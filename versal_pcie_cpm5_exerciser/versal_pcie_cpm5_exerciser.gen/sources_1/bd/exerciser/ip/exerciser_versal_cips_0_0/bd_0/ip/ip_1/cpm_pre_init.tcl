#****************************************************************************
###
#
# @file psu_init.tcl
#
# This file is automatically generated
#
#****************************************************************************
set cpm_pll_init_data {
		# : UNLOCK CODE
		# Register : LOCK @ 0XFCFF000C</p>

		# Lock/Unlock Code
		# CPM_PCSR_LOCK_LOCK                                                              0XF9E8D7C6

		# Lock register for the MASK and PCR Registers
		#(OFFSET, MASK, VALUE)      (0XFCFF000C, 0xFFFFFFFFU ,0xF9E8D7C6U)  */
    mask_write 0XFCFF000C 0xFFFFFFFF 0xF9E8D7C6
		# : POLL PCSR LOCK DE ASSERTED
		# Register : PSR @ 0XFCFF0008</p>

		# Indicates that PCSR space is locked for write transactions when asserted
		# CPM_PCSR_PSR_PCSRLOCK                                                           1
    mask_poll 0XFCFF0008 0x00000001 0x00000000
		# : MASK CPM HOLD STATE DE ASSERTED
		# Register : MASK @ 0XFCFF0000</p>
		# : CPM HOLD STATE DE ASSERTED
		# Register : PCR @ 0XFCFF0004</p>
		# : MASK CPM INISTATE STATE DE ASSERTED
		# Register : MASK @ 0XFCFF0000</p>
		# : INITSTATE DE ASSERTED
		# Register : PCR @ 0XFCFF0004</p>
		# : MASK CPM INISTATE STATE DE ASSERTED
		# Register : MASK @ 0XFCFF0000</p>
		# : WAIT FOR 20US FOR CPM INTERCONNECT
    mask_delay 0x00000000 60
		# : CPLL INIT
		# : DISABLE WRITE PROTECT CRX
		# Register : WPROTS @ 0XFCDC0030</p>

		# 0: Writes Enabled 1: Writes Disabled
		# CPM5_CRX_WPROTS_ACTIVE                                                          0

		# CPM5_CRX Write protection register. In order to write any of the registers(other than the registers that are POR only) within
		# the CPM5-CRX, this register must be set to 0. All registers in this set are protected other then: SAFETY_CHK
		#(OFFSET, MASK, VALUE)      (0XFCDC0030, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0030 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCDC0034</p>

		# 0: Writes Enabled 1: Writes Disabled
		# CPM5_CRX_WPROTP_ACTIVE                                                          0

		# CRCPM Write protection register for registers that are on POR. In order to write any of the POR only registers within the CPM
		# -CRX, this register must be set to 0.
		#(OFFSET, MASK, VALUE)      (0XFCDC0034, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0034 0x00000001 0x00000000
		# : DISABLE WRITE PROTECT SLCR
		# Register : wprots @ 0XFCDD0000</p>

		# 0: Writes Enabled 1: Writed Disabled
		# CPM5_SLCR_WPROTS_ACTIVE                                                         0

		# CPM5 SLCR Write protection on SRST register
		#(OFFSET, MASK, VALUE)      (0XFCDD0000, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDD0000 0x00000001 0x00000000
		# Register : wprotp @ 0XFCDD0004</p>

		# 0: Writes Enabled 1: Writed Disabled
		# CPM5_SLCR_WPROTP_ACTIVE                                                         0

		# CPM5 SLCR Write protection on POR register
		#(OFFSET, MASK, VALUE)      (0XFCDD0004, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDD0004 0x00000001 0x00000000
		# : DISABLE PL FUNC ISO
		# Register : FUNC_ISO @ 0XFCDD04A0</p>

		# Functional isolation control for inputs on AXIMM0 AND AXIMM1 IO interfaces with PL. Default isolation is ON.
		# CPM5_SLCR_FUNC_ISO_AXI_N                                                        1

		# Functional isolation control for inputs on remaining IO's with PL. This includes pl_ref_clk, pl_irq and gpi pins. Default iso
		# ation is ON.
		# CPM5_SLCR_FUNC_ISO_MISC_N                                                       1

		# Functional isolation control for inputs on PCIe0/DMA0 Muxed IO interface with PL. Default isolation is ON.
		# CPM5_SLCR_FUNC_ISO_PL_MIO0_N                                                    1

		# Functional isolation control for inputs on PCIe1/DMA1 Muxed IO interface with PL. Default isolation is ON.
		# CPM5_SLCR_FUNC_ISO_PL_MIO1_N                                                    1

		# Register to specify functional isolation controls for the various input pins on the CPM5<->PL interfaces
		#(OFFSET, MASK, VALUE)      (0XFCDD04A0, 0x00000053U ,0x00000053U)  */
    mask_write 0XFCDD04A0 0x00000053 0x00000053
		# : CPLL CONFIG
		# Register : CPLL_CFG @ 0XFCDC0044</p>
		# : UPDATE CLKOUTDIV AND FBDIV
		# Register : CPLL_CTRL @ 0XFCDC0040</p>

		# Mux select for determining which clock feeds this PLL. X0X ref_clk is the source X11 pl_alt_ref_clk is the source While the P
		# L is being used and not in bypass, this value can not change. Bypass PLL before changing clock source. All other decodes are 
		# eserved.
		# CPM5_CRX_CPLL_CTRL_PRE_SRC                                                      0

		# 00 = no divide in the PLL 01 = divide by 2 (PLL out = VCO div 2) 10 = divide by 4 (PLL out = VCO div 4) 11 = divide by 8 (PLL
		# out = VCO div 8)
		# CPM5_CRX_CPLL_CTRL_CLKOUTDIV                                                    2

		# The integer portion of the feedback divider to the PLL
		# CPM5_CRX_CPLL_CTRL_FBDIV                                                        126

		# PLL Basic Control
		#(OFFSET, MASK, VALUE)      (0XFCDC0040, 0x0073FF00U ,0x00027E00U)  */
    mask_write 0XFCDC0040 0x0073FF00 0x00027E00
		# : BY PASS PLL
		# Register : CPLL_CTRL @ 0XFCDC0040</p>

		# Bypasses the PLL clock. The usable clock will be determined from the POST_SRC field. After a change, this signal may be toggl
		# d again only after 4 cycles of the old clock followed by 6 cycles of the new clock.
		# CPM5_CRX_CPLL_CTRL_BYPASS                                                       1

		# PLL Basic Control
		#(OFFSET, MASK, VALUE)      (0XFCDC0040, 0x00000008U ,0x00000008U)  */
    mask_write 0XFCDC0040 0x00000008 0x00000008
		# : ASSERT RESET
		# Register : CPLL_CTRL @ 0XFCDC0040</p>

		# Asserts Reset to the PLL. When asserting reset, the PLL must already be in BYPASS.
		# CPM5_CRX_CPLL_CTRL_RESET                                                        1

		# PLL Basic Control
		#(OFFSET, MASK, VALUE)      (0XFCDC0040, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCDC0040 0x00000001 0x00000001
		# : DEASSERT RESET
		# Register : CPLL_CTRL @ 0XFCDC0040</p>

		# Asserts Reset to the PLL. When asserting reset, the PLL must already be in BYPASS.
		# CPM5_CRX_CPLL_CTRL_RESET                                                        0

		# PLL Basic Control
		#(OFFSET, MASK, VALUE)      (0XFCDC0040, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0040 0x00000001 0x00000000
		# : CHECK PLL STATUS
		# Register : PLL_STATUS @ 0XFCDC0050</p>

		# PLL is locked
		# CPM5_CRX_PLL_STATUS_CPLL_LOCK                                                   1
    mask_poll 0XFCDC0050 0x00000001
		# : REMOVE PLL BY PASS
		# Register : CPLL_CTRL @ 0XFCDC0040</p>

		# Bypasses the PLL clock. The usable clock will be determined from the POST_SRC field. After a change, this signal may be toggl
		# d again only after 4 cycles of the old clock followed by 6 cycles of the new clock.
		# CPM5_CRX_CPLL_CTRL_BYPASS                                                       0

		# PLL Basic Control
		#(OFFSET, MASK, VALUE)      (0XFCDC0040, 0x00000008U ,0x00000000U)  */
    mask_write 0XFCDC0040 0x00000008 0x00000000
		# : REMOVE GTY RESET
		# Register : RST_GTY @ 0XFCDC0334</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_GTY_RESET1                                                         0

		# block will be reset when asserted 1
		# CPM5_CRX_RST_GTY_RESET2                                                         0

		# block will be reset when asserted 1
		# CPM5_CRX_RST_GTY_RESET3                                                         0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC0334, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCDC0334 0x00000007 0x00000000
}

set cpm_clock_init_data {
		# : CPM CLOCK CONTROL REGISTER
		# Register : CPM5_CORE_REF_CTRL @ 0XFCDC0100</p>

		# 10 bit divider
		# CPM5_CRX_CPM5_CORE_REF_CTRL_DIVISOR0                                            1

		# Clock active signal. 0 = disable the clock. 1 = enable the clock.
		# CPM5_CRX_CPM5_CORE_REF_CTRL_CLKACT                                              1

		# Enable and Divider controls for cpm_core_clk. All CCB features (CMN, L2, Address Remap) run on this clock
		#(OFFSET, MASK, VALUE)      (0XFCDC0100, 0x0203FF00U ,0x02000100U)  */
    mask_write 0XFCDC0100 0x0203FF00 0x02000100
		# Register : CPM5_DBG_REF_CTRL @ 0XFCDC0108</p>

		# 10 bit divider
		# CPM5_CRX_CPM5_DBG_REF_CTRL_DIVISOR0                                             2

		# Clock active signal. 0 = disable the clock. 1 = enable the clock.
		# CPM5_CRX_CPM5_DBG_REF_CTRL_CLKACT                                               1

		# Enable and Divider controls for cpm_dbg_clk. All SOC Debug features run on this clock
		#(OFFSET, MASK, VALUE)      (0XFCDC0108, 0x0203FF00U ,0x02000200U)  */
    mask_write 0XFCDC0108 0x0203FF00 0x02000200
		# Register : CPM5_AUX0_REF_CTRL @ 0XFCDC0110</p>

		# 10 bit divider
		# CPM5_CRX_CPM5_AUX0_REF_CTRL_DIVISOR0                                            1

		# Clock active signal. 0 = disable the clock. 1 = enable the clock.
		# CPM5_CRX_CPM5_AUX0_REF_CTRL_CLKACT                                              1

		# Enable and Divider controls for cpm_aux0_clk.
		#(OFFSET, MASK, VALUE)      (0XFCDC0110, 0x0203FF00U ,0x02000100U)  */
    mask_write 0XFCDC0110 0x0203FF00 0x02000100
		# Register : CPM5_AUX1_REF_CTRL @ 0XFCDC0114</p>

		# 10 bit divider
		# CPM5_CRX_CPM5_AUX1_REF_CTRL_DIVISOR0                                            10

		# Clock active signal. 0 = disable the clock. 1 = enable the clock.
		# CPM5_CRX_CPM5_AUX1_REF_CTRL_CLKACT                                              1

		# Enable and Divider controls for cpm_aux1_clk.
		#(OFFSET, MASK, VALUE)      (0XFCDC0114, 0x0203FF00U ,0x02000A00U)  */
    mask_write 0XFCDC0114 0x0203FF00 0x02000A00
		# : SET UP CLOCKS FOR MBIST AND CLEAR
		# Register : RST_PCIEDMA_CONFIG @ 0XFCDC0304</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_PCIEDMA_CONFIG_RESET                                               0

		# Reset for PCIe configuration Registers (PCIE_ATTRIB*) (POR only register)
		#(OFFSET, MASK, VALUE)      (0XFCDC0304, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0304 0x00000001 0x00000000
		# Register : RST_PCIE0_CONFIG @ 0XFCDC0308</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_PCIE0_CONFIG_RESET                                                 0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC0308, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0308 0x00000001 0x00000000
		# Register : RST_PCIE1_CONFIG @ 0XFCDC030C</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_PCIE1_CONFIG_RESET                                                 0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC030C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC030C 0x00000001 0x00000000
		# Register : RST_DMA0_CONFIG @ 0XFCDC0310</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_DMA0_CONFIG_RESET                                                  0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC0310, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0310 0x00000001 0x00000000
		# Register : RST_DMA1_CONFIG @ 0XFCDC0314</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_DMA1_CONFIG_RESET                                                  0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC0314, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0314 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE08028</p>

		# Write protect bit for pcie attributes registers 0: Writes are enabled 1: Writes are disabled
		# CPM5_PCIE0_ATTR_WPROTP_ACTIVE                                                   0

		# WPROTP
		#(OFFSET, MASK, VALUE)      (0XFCE08028, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE08028 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE0002C</p>

		# Write protect bit for pcie attributes registers 0: Writes are disabled 1: Writes are enabled
		# CPM5_PCIE0_CSR_WPROTP_ACTIVE                                                    0

		# WPROTP
		#(OFFSET, MASK, VALUE)      (0XFCE0002C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE0002C 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE10004</p>

		# 0: Writes Enabled 1: Writed Disabled
		# CPM5_DMA0_ATTR_WPROTP_ACTIVE                                                    0

		# Write Protection Register for attributes
		#(OFFSET, MASK, VALUE)      (0XFCE10004, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE10004 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE88028</p>

		# Write protect bit for pcie attributes registers 0: Writes are enabled 1: Writes are disabled
		# CPM5_PCIE1_ATTR_WPROTP_ACTIVE                                                   0

		# WPROTP
		#(OFFSET, MASK, VALUE)      (0XFCE88028, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88028 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE8002C</p>

		# Write protect bit for pcie attributes registers 0: Writes are disabled 1: Writes are enabled
		# CPM5_PCIE1_CSR_WPROTP_ACTIVE                                                    0

		# WPROTP
		#(OFFSET, MASK, VALUE)      (0XFCE8002C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8002C 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE90004</p>

		# 0: Writes Enabled 1: Writed Disabled
		# CPM5_DMA1_ATTR_WPROTP_ACTIVE                                                    0

		# Write Protection Register for attributes
		#(OFFSET, MASK, VALUE)      (0XFCE90004, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE90004 0x00000001 0x00000000
		# Register : AXI_CTRL @ 0XFCDD020C</p>

		# Enable for axi clk in AXI-MM instance 0 0 - Disabled 1 - Enabled
		# CPM5_SLCR_AXI_CTRL_CLK_EN_0                                                     0X1

		# Enable for axi clk in AXI-MM instance 1 0 - Disabled 1 - Enabled
		# CPM5_SLCR_AXI_CTRL_CLK_EN_1                                                     0X1

		# PL AXI-MM Misc Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD020C, 0x00000003U ,0x00000003U)  */
    mask_write 0XFCDD020C 0x00000003 0x00000003
		# Register : CXS0_SELECT @ 0XFCDD021C</p>

		# Select for CXS interface 0 - Disabled 1 - Enabled
		# CPM5_SLCR_CXS0_SELECT_EN                                                        0X1

		# CXS Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD021C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCDD021C 0x00000001 0x00000001
		# Register : CXS1_SELECT @ 0XFCDD0220</p>

		# Select for CXS interface 0 - Disabled 1 - Enabled
		# CPM5_SLCR_CXS1_SELECT_EN                                                        0X1

		# CXS Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0220, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCDD0220 0x00000001 0x00000001
		# Register : CMN_CTRL @ 0XFCDD0204</p>

		# Enable clk to RAMs in OD MBIST and Mfg MBIST modes
		# CPM5_SLCR_CMN_CTRL_MBIST_CLK_EN                                                 0X1

		# Enable for core clk 0 - Disabled 1 - Enabled
		# CPM5_SLCR_CMN_CTRL_CLK_EN                                                       0X1

		# Enable for efuse capture latch
		# CPM5_SLCR_CMN_CTRL_LATCH_EN                                                     0X1

		# CMN Misc Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0204, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCDD0204 0x00000007 0x00000007
		# Register : L2_CTRL @ 0XFCDD0208</p>

		# Enable for core clk in L2 instance 0 0 - Disabled 1 - Enabled
		# CPM5_SLCR_L2_CTRL_CLK_EN_0                                                      0X1

		# Enable for core clk in L2 instance 1 0 - Disabled 1 - Enabled
		# CPM5_SLCR_L2_CTRL_CLK_EN_1                                                      0X1

		# L2 Misc Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0208, 0x00000003U ,0x00000003U)  */
    mask_write 0XFCDD0208 0x00000003 0x00000003
		# Register : PCIE0_RCLK @ 0XFCDD0280</p>

		# 00: 0 01: 0 10: postdfx_cpm5_dbg_clk 11:pcie_user_clk
		# CPM5_SLCR_PCIE0_RCLK_CTRL3                                                      0X3

		# 00: 0 01: 0 10: postdfx_pcie_dma_clk 11: pcie_core_clk
		# CPM5_SLCR_PCIE0_RCLK_CTRL2                                                      0X3

		# 00: 0 01: 0 10: postdfx_cpm5_lsbus_clk 11: pcie_pipe_clk
		# CPM5_SLCR_PCIE0_RCLK_CTRL1                                                      0X3

		# 00: 0 01: 0 10: postdfx_cpm5_core_clk 11: pcie_gtout_clk
		# CPM5_SLCR_PCIE0_RCLK_CTRL0                                                      0X3

		# Register to specify which set of clocks are output to the RCLK from CPM5
		#(OFFSET, MASK, VALUE)      (0XFCDD0280, 0x000000FFU ,0x000000FFU)  */
    mask_write 0XFCDD0280 0x000000FF 0x000000FF
		# Register : PCIE1_RCLK @ 0XFCDD0290</p>

		# 00: 0 01: 0 10: postdfx_cpm5_dbg_clk 11:pcie_user_clk
		# CPM5_SLCR_PCIE1_RCLK_CTRL3                                                      0X3

		# 00: 0 01: 0 10: postdfx_pcie_dma_clk 11: pcie_core_clk
		# CPM5_SLCR_PCIE1_RCLK_CTRL2                                                      0X3

		# 00: 0 01: 0 10: postdfx_cpm5_lsbus_clk 11: pcie_pipe_clk
		# CPM5_SLCR_PCIE1_RCLK_CTRL1                                                      0X3

		# 00: 0 01: 0 10: postdfx_cpm5_core_clk 11: pcie_gtout_clk
		# CPM5_SLCR_PCIE1_RCLK_CTRL0                                                      0X3

		# Register to specify which set of clocks are output to the RCLK from CPM5
		#(OFFSET, MASK, VALUE)      (0XFCDD0290, 0x000000FFU ,0x000000FFU)  */
    mask_write 0XFCDD0290 0x000000FF 0x000000FF
		# Register : INTWRAPT_RCLK @ 0XFCDD0298</p>

		# 00: 0 01: cpm_pl_pll_test_clk_out[0] 10: ps_cpm_in_ref_clk 11: intcpm_timeout_clk
		# CPM5_SLCR_INTWRAPT_RCLK_CTRL0                                                   0X3

		# 00: 0 01: cpm_pl_pll_test_clk_out[1] 10: bisr_clk 11: postdfx_xpd_clk
		# CPM5_SLCR_INTWRAPT_RCLK_CTRL1                                                   0X3

		# Register to specify which set of clocks are output to the RCLK from CPM5
		#(OFFSET, MASK, VALUE)      (0XFCDD0298, 0x0000000FU ,0x0000000FU)  */
    mask_write 0XFCDD0298 0x0000000F 0x0000000F
		# Register : DMA0_RCLK @ 0XFCDD027C</p>

		# 00: 0 01: 0 10: cpm5_pl_userclk_aux 11:cpm5_pl_dpllmuxout
		# CPM5_SLCR_DMA0_RCLK_CTRL0                                                       0X2

		# Register to specify which set of clocks are output to the RCLK from CPM5
		#(OFFSET, MASK, VALUE)      (0XFCDD027C, 0x00000003U ,0x00000002U)  */
    mask_write 0XFCDD027C 0x00000003 0x00000002
		# Register : DMA1_RCLK @ 0XFCDD028C</p>

		# 00: 0 01: 0 10:cpm5_pl_userclk_aux 11:cpm5_pl_dpllmuxout
		# CPM5_SLCR_DMA1_RCLK_CTRL0                                                       0X2

		# Register to specify which set of clocks are output to the RCLK from CPM5
		#(OFFSET, MASK, VALUE)      (0XFCDD028C, 0x00000003U ,0x00000002U)  */
    mask_write 0XFCDD028C 0x00000003 0x00000002
		# Register : RST_DBG @ 0XF1260400</p>

		# Resets the Debug portion of the PS (including all of the PMC/LPD/FPD) excluding DPC
		# CRP_RST_DBG_RESET                                                               0X0

		# Reset for Individual block
		#(OFFSET, MASK, VALUE)      (0XF1260400, 0x00000001U ,0x00000000U)  */
    mask_write 0XF1260400 0x00000001 0x00000000
		# Register : RST_DBG_LPD @ 0XFF5E0338</p>

		# block will be reset when asserted 1. This will cause all of FPD debug to be reset and all of LPD except HSDP
		# CRL_RST_DBG_LPD_RESET                                                           0X0

		# Reset for Individual block
		#(OFFSET, MASK, VALUE)      (0XFF5E0338, 0x00000001U ,0x00000000U)  */
    mask_write 0XFF5E0338 0x00000001 0x00000000
		# Register : RST_DBG @ 0XFCDC0300</p>

		# block will be reset when asserted 1 (This register is only reset during a POR)
		# CPM5_CRX_RST_DBG_RESET                                                          0X0

		# Reset for SOC Debug Logic (POR only register)
		#(OFFSET, MASK, VALUE)      (0XFCDC0300, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0300 0x00000001 0x00000000
		# Register : DEBUG_CTRL @ 0XFCDD0214</p>

		# Clock gating control for ELA clocks in PCIe core 0 0 : ELA clocks are gated 1 : ELA clocks are running
		# CPM5_SLCR_DEBUG_CTRL_PCIE0_ELA_CLKGATE_EN                                       1

		# Clock gating control for ELA clocks in PCIe core 0 0 : ELA clocks are gated 1 : ELA clocks are running
		# CPM5_SLCR_DEBUG_CTRL_PCIE1_ELA_CLKGATE_EN                                       1

		# Control Register for Soc debug features in PCIe-A
		#(OFFSET, MASK, VALUE)      (0XFCDD0214, 0x00001010U ,0x00001010U)  */
    mask_write 0XFCDD0214 0x00001010 0x00001010
		# Register : DESIGN_USE_MODE @ 0XFCE0A900</p>

		# 
		# CPM5_PCIE0_ATTR_DESIGN_USE_MODE_ATTR                                            0X4

		# Design Use Mode Input : Valid encodings are : 1) 0000000b : Block Disabled. 2) 0000001b : AXI4-ST Interfaces Enabled (PCIE St
		# eam Mode) and 3) 0000100b : DMA Interfaces Enabled (DMA Mode). All other encodings are Reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE0A900, 0x0000007FU ,0x00000004U)  */
    mask_write 0XFCE0A900 0x0000007F 0x00000004
		# Register : DESIGN_USE_MODE @ 0XFCE8A900</p>

		# 
		# CPM5_PCIE1_ATTR_DESIGN_USE_MODE_ATTR                                            0X4

		# Design Use Mode Input : Valid encodings are : 1) 0000000b : Block Disabled. 2) 0000001b : AXI4-ST Interfaces Enabled (PCIE St
		# eam Mode) and 3) 0000100b : DMA Interfaces Enabled (DMA Mode). All other encodings are Reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE8A900, 0x0000007FU ,0x00000004U)  */
    mask_write 0XFCE8A900 0x0000007F 0x00000004
		# : CPM PCIE_DIV_OVERIDE0
		# Register : div_override @ 0XFCE002A0</p>
		# Register : div_override @ 0XFCE802A0</p>
		# Register : PCIE_PLL_OVERRIDE @ 0XFCDD0400</p>

		# PLL override select for PCIe Core 0 divider 0 : Clock from GT 1 : Clock from PLL in CRX
		# CPM5_SLCR_PCIE_PLL_OVERRIDE_PCIE0                                               0X1

		# PLL override select for PCIe Core 1 divider 0 : Clock from GT 1 : Clock from PLL in CRX
		# CPM5_SLCR_PCIE_PLL_OVERRIDE_PCIE1                                               0X1

		# Enables override of gt_outclk at input of divider with output of PLL in CRX
		#(OFFSET, MASK, VALUE)      (0XFCDD0400, 0x00000003U ,0x00000003U)  */
    mask_write 0XFCDD0400 0x00000003 0x00000003
		# : CPM PCIE_DIV_OVERIDE1
		# Register : div_override @ 0XFCE002A0</p>
		# Register : div_override @ 0XFCE802A0</p>
		# : CPM PCIE_DIV_OVERIDE2
		# Register : div_override @ 0XFCE002A0</p>
		# Register : div_override @ 0XFCE802A0</p>
		# : CPM5 CORE CLOCK FOR ES1 MBIST
		# Register : CPM5_CORE_REF_CTRL @ 0XFCDC0100</p>

		# 10 bit divider
		# CPM5_CRX_CPM5_CORE_REF_CTRL_DIVISOR0                                            0X4

		# Clock active signal. 0 = disable the clock. 1 = enable the clock.
		# CPM5_CRX_CPM5_CORE_REF_CTRL_CLKACT                                              0X1

		# Enable and Divider controls for cpm_core_clk. All CCB features (CMN, L2, Address Remap) run on this clock
		#(OFFSET, MASK, VALUE)      (0XFCDC0100, 0x0203FF00U ,0x02000400U)  */
    mask_write 0XFCDC0100 0x0203FF00 0x02000400
}

