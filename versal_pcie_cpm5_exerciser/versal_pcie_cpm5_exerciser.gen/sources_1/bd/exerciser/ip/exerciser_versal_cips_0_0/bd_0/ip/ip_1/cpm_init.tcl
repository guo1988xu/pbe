#****************************************************************************
###
#
# @file psu_init.tcl
#
# This file is automatically generated
#
#****************************************************************************
set cpm_pcie_init_data {
		# : CPM5 CORE CLOCK FOR ES1
		# Register : CPM5_CORE_REF_CTRL @ 0XFCDC0100</p>

		# 10 bit divider
		# CPM5_CRX_CPM5_CORE_REF_CTRL_DIVISOR0                                            1

		# Clock active signal. 0 = disable the clock. 1 = enable the clock.
		# CPM5_CRX_CPM5_CORE_REF_CTRL_CLKACT                                              1

		# Enable and Divider controls for cpm_core_clk. All CCB features (CMN, L2, Address Remap) run on this clock
		#(OFFSET, MASK, VALUE)      (0XFCDC0100, 0x0203FF00U ,0x02000100U)  */
    mask_write 0XFCDC0100 0x0203FF00 0x02000100
		# : RESET RELEASE AFTER GT PROGRAMMING
		# Register : RST_PCIEDMA_CONFIG @ 0XFCDC0304</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_PCIEDMA_CONFIG_RESET                                               0

		# Reset for PCIe configuration Registers (PCIE_ATTRIB*) (POR only register)
		#(OFFSET, MASK, VALUE)      (0XFCDC0304, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0304 0x00000001 0x00000000
		# Register : RST_PCIE0_CONFIG @ 0XFCDC0308</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_PCIE0_CONFIG_RESET                                                 0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC0308, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0308 0x00000001 0x00000000
		# Register : RST_PCIE1_CONFIG @ 0XFCDC030C</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_PCIE1_CONFIG_RESET                                                 0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC030C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC030C 0x00000001 0x00000000
		# Register : RST_DMA0_CONFIG @ 0XFCDC0310</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_DMA0_CONFIG_RESET                                                  0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC0310, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0310 0x00000001 0x00000000
		# Register : RST_DMA1_CONFIG @ 0XFCDC0314</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_DMA1_CONFIG_RESET                                                  0

		# Unused
		#(OFFSET, MASK, VALUE)      (0XFCDC0314, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0314 0x00000001 0x00000000
		# Register : RST_CMN @ 0XFCDC0320</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_CMN_RESET                                                          0

		# Reset for CMN block
		#(OFFSET, MASK, VALUE)      (0XFCDC0320, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0320 0x00000001 0x00000000
		# Register : RST_L2_0 @ 0XFCDC0324</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_L2_0_RESET                                                         0

		# Reset for L2 block
		#(OFFSET, MASK, VALUE)      (0XFCDC0324, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0324 0x00000001 0x00000000
		# Register : RST_L2_1 @ 0XFCDC0328</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_L2_1_RESET                                                         0

		# Reset for L2 block
		#(OFFSET, MASK, VALUE)      (0XFCDC0328, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0328 0x00000001 0x00000000
		# Register : RST_DBG @ 0XFCDC0300</p>

		# block will be reset when asserted 1 (This register is only reset during a POR)
		# CPM5_CRX_RST_DBG_RESET                                                          0

		# Reset for SOC Debug Logic (POR only register)
		#(OFFSET, MASK, VALUE)      (0XFCDC0300, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0300 0x00000001 0x00000000
		# : REMOVE CPM PCIE_DIV_OVERIDE
		# Register : div_override @ 0XFCE002A0</p>
		# Register : div_override @ 0XFCE802A0</p>
		# Register : PCIE_PLL_OVERRIDE @ 0XFCDD0400</p>

		# PLL override select for PCIe Core 0 divider 0 : Clock from GT 1 : Clock from PLL in CRX
		# CPM5_SLCR_PCIE_PLL_OVERRIDE_PCIE0                                               0X0

		# PLL override select for PCIe Core 1 divider 0 : Clock from GT 1 : Clock from PLL in CRX
		# CPM5_SLCR_PCIE_PLL_OVERRIDE_PCIE1                                               0X0

		# Enables override of gt_outclk at input of divider with output of PLL in CRX
		#(OFFSET, MASK, VALUE)      (0XFCDD0400, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCDD0400 0x00000003 0x00000000
		# : RESTORE PCIE CLOCK
		# Register : wprots @ 0XFCDD0000</p>

		# 0: Writes Enabled 1: Writed Disabled
		# CPM5_SLCR_WPROTS_ACTIVE                                                         0X0

		# CPM5 SLCR Write protection on SRST register
		#(OFFSET, MASK, VALUE)      (0XFCDD0000, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDD0000 0x00000001 0x00000000
		# Register : wprotp @ 0XFCDD0004</p>

		# 0: Writes Enabled 1: Writed Disabled
		# CPM5_SLCR_WPROTP_ACTIVE                                                         0X0

		# CPM5 SLCR Write protection on POR register
		#(OFFSET, MASK, VALUE)      (0XFCDD0004, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDD0004 0x00000001 0x00000000
		# Register : CXS0_SELECT @ 0XFCDD021C</p>

		# Select for CXS interface 0 - Disabled 1 - Enabled
		# CPM5_SLCR_CXS0_SELECT_EN                                                        0X0

		# CXS Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD021C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDD021C 0x00000001 0x00000000
		# Register : CXS1_SELECT @ 0XFCDD0220</p>

		# Select for CXS interface 0 - Disabled 1 - Enabled
		# CPM5_SLCR_CXS1_SELECT_EN                                                        0X0

		# CXS Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0220, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDD0220 0x00000001 0x00000000
		# Register : CMN_CTRL @ 0XFCDD0204</p>

		# Enable for core clk 0 - Disabled 1 - Enabled
		# CPM5_SLCR_CMN_CTRL_CLK_EN                                                       0X0

		# Enable for efuse capture latch
		# CPM5_SLCR_CMN_CTRL_LATCH_EN                                                     0X0

		# CMN Misc Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0204, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCDD0204 0x00000003 0x00000000
		# Register : L2_CTRL @ 0XFCDD0208</p>

		# Enable for core clk in L2 instance 0 0 - Disabled 1 - Enabled
		# CPM5_SLCR_L2_CTRL_CLK_EN_0                                                      0X0

		# Enable for core clk in L2 instance 1 0 - Disabled 1 - Enabled
		# CPM5_SLCR_L2_CTRL_CLK_EN_1                                                      0X0

		# L2 Misc Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0208, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCDD0208 0x00000003 0x00000000
		# Register : DEBUG_CTRL @ 0XFCDD0214</p>

		# Clock gating control for ELA clocks in PCIe core 0 0 : ELA clocks are gated 1 : ELA clocks are running
		# CPM5_SLCR_DEBUG_CTRL_PCIE0_ELA_CLKGATE_EN                                       0X0

		# Clock gating control for ELA clocks in PCIe core 0 0 : ELA clocks are gated 1 : ELA clocks are running
		# CPM5_SLCR_DEBUG_CTRL_PCIE1_ELA_CLKGATE_EN                                       0X0

		# Control Register for Soc debug features in PCIe-A
		#(OFFSET, MASK, VALUE)      (0XFCDD0214, 0x00001010U ,0x00000000U)  */
    mask_write 0XFCDD0214 0x00001010 0x00000000
		# Register : CPM5_DMA_ALT_CTRL @ 0XFCDC010C</p>

		# Clock active signal. 0 = disable the clock. 1 = enable the clock.
		# CPM5_CRX_CPM5_DMA_ALT_CTRL_CLKACT                                               0X1

		# 10 bit divider
		# CPM5_CRX_CPM5_DMA_ALT_CTRL_DIVISOR0                                             0X1

		# Enable and Divider controls for dma alternative reference clock. Unlike the other dividers here, the source of this is a cloc
		#  that is approximetly 200MHz plus or minus 50%. It is only to be used when an exact freq is not required.
		#(OFFSET, MASK, VALUE)      (0XFCDC010C, 0x0203FF00U ,0x02000100U)  */
    mask_write 0XFCDC010C 0x0203FF00 0x02000100
		# : PCOMPLETE MASK ASSERTED
		# Register : MASK @ 0XFCFF0000</p>
		# : PCOMPLETE ASSERTED
		# Register : PCR @ 0XFCFF0004</p>
		# : DISABLE ALL PCSR MASK
		# Register : MASK @ 0XFCFF0000</p>
		# : LOCK CODE
		# Register : LOCK @ 0XFCFF000C</p>

		# Lock/Unlock Code
		# CPM_PCSR_LOCK_LOCK                                                              0X1

		# Lock register for the MASK and PCR Registers
		#(OFFSET, MASK, VALUE)      (0XFCFF000C, 0xFFFFFFFFU ,0x00000001U)  */
    mask_write 0XFCFF000C 0xFFFFFFFF 0x00000001
		# : RESET
		# Register : GT_MUX @ 0XFCDD0200</p>

		# Write 1 to this register to force a CSSD Trigger event in all GTYPs
		# CPM5_SLCR_GT_MUX_CSSD_TRIG_N                                                    0

		# Enables forwarding of CSSD Triggers of CPM5 to GTYPs 0 - CPM5 CSSD Triggers not forwarded to GTYP 1 - CPM5 CSSD Triggers OR-e
		#  and and forwarded to GTYP. Any CSSD Trigger of CPM5 will cause CSSD Trigger in all GTYPs
		# CPM5_SLCR_GT_MUX_CSSD_TRIG_FWD_EN                                               0

		# GT clock source for PCIe1 bufgt dividers 0 - gt_outclk 1 - gt_rxoutclk
		# CPM5_SLCR_GT_MUX_PCIE1_GT_OUTCLK_MODE                                           0

		# GT clock source for PCIe0 bufgt dividers 0 - gt_outclk 1 - gt_rxoutclk
		# CPM5_SLCR_GT_MUX_PCIE0_GT_OUTCLK_MODE                                           0

		# Select for mux that connects HSDP or PCIe traffic to GT. 000 - PCIe0 x16 lane configuration to all four GT quads 001 - PCIe1 
		# 8 lane configuration to GT quad2,quad3 and HSDP on link0,quad0,channel0 to GT quad0,channel0. 010 - HSDP on link1,quad2,chann
		# l8 to GT quad2,channel0 and PCIe0 x8 lane configuration to GT quad0,quad1. 011 - HSDP operation enabled on both GT links. PS 
		# ay drive either link. No PCIe operation permitted. This is the hardware default to allow HSDP operation on any link from the 
		# S. To enable PCIe operation, software must write to this register and change the value to one of the other encodings of this 
		# ield 100 - PCIe x8 lane configuration on both links. PCIe0 x8 to GT quad0,quad1 and PCIe1 x8 to GT quad2,quad3. 101 - Reserve
		#  110 - GT Func test Mode via PL 111 - Debug Mode where PCIe0 lanes 0-7 are looped back to PCIe1 lanes 0-7.
		# CPM5_SLCR_GT_MUX_CFG_MODE                                                       4

		# GT Mux Configuration Mode Register.
		#(OFFSET, MASK, VALUE)      (0XFCDD0200, 0x00030307U ,0x00000004U)  */
    mask_write 0XFCDD0200 0x00030307 0x00000004
		# Register : ECO_3_R0_POR @ 0XFCDD008C</p>

		# Reserved
		# CPM5_SLCR_ECO_3_R0_POR_ECO                                                      0

		# ECO Register 3
		#(OFFSET, MASK, VALUE)      (0XFCDD008C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCDD008C 0xFFFFFFFF 0x00000000
		# Register : DEBUG_CTRL @ 0XFCDD0214</p>

		# Clock gating control for ELA clocks in PCIe core 0 0 : ELA clocks are gated 1 : ELA clocks are running
		# CPM5_SLCR_DEBUG_CTRL_PCIE0_ELA_CLKGATE_EN                                       1

		# Clock gating control for ELA clocks in PCIe core 0 0 : ELA clocks are gated 1 : ELA clocks are running
		# CPM5_SLCR_DEBUG_CTRL_PCIE1_ELA_CLKGATE_EN                                       1

		# Control Register for Soc debug features in PCIe-A
		#(OFFSET, MASK, VALUE)      (0XFCDD0214, 0x00001010U ,0x00001010U)  */
    mask_write 0XFCDD0214 0x00001010 0x00001010
		# Register : PCIe_USER_CLK_OVERRIDE @ 0XFCDD0408</p>

		# 0: Disabled (Manual mode, dma1_en decides user_clk selection from the AGFM) 1: Enabled (Auto mode, AGFM switches to other run
		# ing clock if the manually selected clock stopped)
		# CPM5_SLCR_PCIE_USER_CLK_OVERRIDE_GFM1_AUTO_SW_EN                                1

		# 0: Disabled (Manual mode, dma0_en decides user_clk selection from the AGFM) 1: Enabled (Auto mode, AGFM switches to other run
		# ing clock if the manually selected clock stopped)
		# CPM5_SLCR_PCIE_USER_CLK_OVERRIDE_GFM0_AUTO_SW_EN                                1

		# This register enables the alt dma clock
		#(OFFSET, MASK, VALUE)      (0XFCDD0408, 0x0000000CU ,0x0000000CU)  */
    mask_write 0XFCDD0408 0x0000000C 0x0000000C
		# : PCIE1 AND DMA1 WRITE PROTECT DISABLE
		# Register : WPROTP @ 0XFCE88028</p>

		# Write protect bit for pcie attributes registers 0: Writes are enabled 1: Writes are disabled
		# CPM5_PCIE1_ATTR_WPROTP_ACTIVE                                                   0

		# WPROTP
		#(OFFSET, MASK, VALUE)      (0XFCE88028, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88028 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE8002C</p>

		# Write protect bit for pcie attributes registers 0: Writes are disabled 1: Writes are enabled
		# CPM5_PCIE1_CSR_WPROTP_ACTIVE                                                    0

		# WPROTP
		#(OFFSET, MASK, VALUE)      (0XFCE8002C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8002C 0x00000001 0x00000000
		# Register : WPROTP @ 0XFCE90004</p>

		# 0: Writes Enabled 1: Writed Disabled
		# CPM5_DMA1_ATTR_WPROTP_ACTIVE                                                    0

		# Write Protection Register for attributes
		#(OFFSET, MASK, VALUE)      (0XFCE90004, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE90004 0x00000001 0x00000000
		# : PCSR UNLOCK FOR DPLL1
		# Register : REG_PCSR_LOCK @ 0XFCEB000C</p>

		# Reserved for future use.
		# CPM5_DPLL1_ATTR_REG_PCSR_LOCK_RESERVED                                          0X7CF46BE3

		# In order to enable write operations on the programming registers, the unlock code must be written first to the LOCK register.
		# The unlock code is 0xF9E8D7C6. When the programming register write operation has completed, the LOCK register must be written
		# with any other value(not 0xF9E8D7C6) to re-lock the programming registers. If write happens when LOCK is enabled, the slave w
		# ll return a slave error except for the LOCK register itself.
		# CPM5_DPLL1_ATTR_REG_PCSR_LOCK_STATE                                             0X0

		# NPI Lock Register
		#(OFFSET, MASK, VALUE)      (0XFCEB000C, 0xFFFFFFFFU ,0xF9E8D7C6U)  */
    mask_write 0XFCEB000C 0xFFFFFFFF 0xF9E8D7C6
		# : DPLL1 HOLDSTATE
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_HOLDSTATE                                         0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000080U ,0x00000080U)  */
    mask_write 0XFCEB0000 0x00000080 0x00000080
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Clock enable for user-visible state.
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_HOLDSTATE                                      0X1

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000080U ,0x00000080U)  */
    mask_write 0XFCEB0004 0x00000080 0x00000080
		# : DPLL1 INITSTATE
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_INITSTATE                                         0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000040U ,0x00000040U)  */
    mask_write 0XFCEB0000 0x00000040 0x00000040
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Initializes block state (initialization state may be programmable).
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_INITSTATE                                      0X1

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000040U ,0x00000040U)  */
    mask_write 0XFCEB0004 0x00000040 0x00000040
		# : DPLL1 TRISTATE
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_TRISTATE                                          0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000100U ,0x00000100U)  */
    mask_write 0XFCEB0000 0x00000100 0x00000100
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Tristate control for external IO (i.e. pad drivers)
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_TRISTATE                                       0X1

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000100U ,0x00000100U)  */
    mask_write 0XFCEB0004 0x00000100 0x00000100
		# : DPLL1 ODISABLE
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_ODISABLE                                          0XF

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x0000003CU ,0x0000003CU)  */
    mask_write 0XFCEB0000 0x0000003C 0x0000003C
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Disables/Isolates block interfaces. Bit 1 should be used for a fabric interface. Bit 2 should be used for a 1st NoC interface
		#  etc.
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_ODISABLE                                       0XF

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x0000003CU ,0x0000003CU)  */
    mask_write 0XFCEB0004 0x0000003C 0x0000003C
		# : DPLL1 GATEREG
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_GATEREG                                           0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000002U ,0x00000002U)  */
    mask_write 0XFCEB0000 0x00000002 0x00000002
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Gates outputs of programming registers
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_GATEREG                                        0X1

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000002U ,0x00000002U)  */
    mask_write 0XFCEB0004 0x00000002 0x00000002
		# : DPLL1 PROGRAMMING
		# Register : REG_0 @ 0XFCEB0030</p>

		# 1 for fast lock up.
		# CPM5_DPLL1_ATTR_REG_0_ALLOW_RESIDULE                                            0X1

		# Programmable resistor chain to select voltage hysteresis for comparator
		# CPM5_DPLL1_ATTR_REG_0_AVDD_COMP_SET                                             0X3

		# Adjusts the resistor chain for bandgap DLL voltage
		# CPM5_DPLL1_ATTR_REG_0_AVDD_VBG_PD                                               0X6

		# Selects various voltages off the bandgap resistor chain, or direct vbg, vbg_se or Vccaux
		# CPM5_DPLL1_ATTR_REG_0_AVDD_VBG_SEL                                              0XC

		# REG_0
		#(OFFSET, MASK, VALUE)      (0XFCEB0030, 0x00000FFFU ,0x00000BCCU)  */
    mask_write 0XFCEB0030 0x00000FFF 0x00000BCC
		# Register : REG_1 @ 0XFCEB0034</p>

		# Enables clock burst repeat feature
		# CPM5_DPLL1_ATTR_REG_1_CLKBURST_REPEAT                                           0X0

		# Clock Burst test circuit enable control
		# CPM5_DPLL1_ATTR_REG_1_CLKBURST_ENABLE                                           0X0

		# Clock Burst test circuit count control
		# CPM5_DPLL1_ATTR_REG_1_CLKBURST_CNT                                              0X1

		# bypass code_dco_testin to dco for dco characterization. Code_dco_testin8:0 is shared with lock_th8:0.
		# CPM5_DPLL1_ATTR_REG_1_BYPASS                                                    0X0

		# dfcw: 0 for 8; 1 for 16; 2 for 32; 3 for 64.
		# CPM5_DPLL1_ATTR_REG_1_BITSHFT                                                   0X2

		# REG_1
		#(OFFSET, MASK, VALUE)      (0XFCEB0034, 0x00001FFFU ,0x0000000AU)  */
    mask_write 0XFCEB0034 0x00001FFF 0x0000000A
		# Register : REG_6 @ 0XFCEB0048</p>

		# MMCM O1 counter delay setting
		# CPM5_DPLL1_ATTR_REG_6_CLKOUT1_DT                                                0X0

		# REG_6
		#(OFFSET, MASK, VALUE)      (0XFCEB0048, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCEB0048 0x000000FF 0x00000000
		# Register : REG_7 @ 0XFCEB004C</p>

		# 
		# CPM5_DPLL1_ATTR_REG_7_CLKOUT2_USED                                              0X0

		# MMCM_lite O2 counter clock input mux control
		# CPM5_DPLL1_ATTR_REG_7_CLKOUT2_MX                                                0X1

		# Specifies the amount to divide the associated CLKOUT clock output if a different frequency is desired. This number in combina
		# ion with the CLKFBOUT_MULT and DIVCLK_DIVIDE values will determine the output frequency.
		# CPM5_DPLL1_ATTR_REG_7_CLKOUT2_DIVIDE                                            0X10

		# REG_7
		#(OFFSET, MASK, VALUE)      (0XFCEB004C, 0x00000FFFU ,0x00000210U)  */
    mask_write 0XFCEB004C 0x00000FFF 0x00000210
		# Register : REG_8 @ 0XFCEB0050</p>

		# MMCM O2 counter delay setting
		# CPM5_DPLL1_ATTR_REG_8_CLKOUT2_DT                                                0X0

		# REG_8
		#(OFFSET, MASK, VALUE)      (0XFCEB0050, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCEB0050 0x000000FF 0x00000000
		# Register : REG_9 @ 0XFCEB0054</p>

		# 
		# CPM5_DPLL1_ATTR_REG_9_CLKOUT3_USED                                              0X0

		# MMCM_lite O3 counter clock input mux control
		# CPM5_DPLL1_ATTR_REG_9_CLKOUT3_MX                                                0X1

		# Specifies the amount to divide the associated CLKOUT clock output if a different frequency is desired. This number in combina
		# ion with the CLKFBOUT_MULT and DIVCLK_DIVIDE values will determine the output frequency.
		# CPM5_DPLL1_ATTR_REG_9_CLKOUT3_DIVIDE                                            0X10

		# REG_9
		#(OFFSET, MASK, VALUE)      (0XFCEB0054, 0x00000FFFU ,0x00000210U)  */
    mask_write 0XFCEB0054 0x00000FFF 0x00000210
		# Register : REG_11 @ 0XFCEB005C</p>

		# Spare digital registers
		# CPM5_DPLL1_ATTR_REG_11_CNT_EDGE_SEL                                             0X82

		# REG_11
		#(OFFSET, MASK, VALUE)      (0XFCEB005C, 0x000001FFU ,0x00000082U)  */
    mask_write 0XFCEB005C 0x000001FF 0x00000082
		# Register : REG_12 @ 0XFCEB0060</p>

		# select dco directly to clk_test.
		# CPM5_DPLL1_ATTR_REG_12_DIRECT_PATH_CNTRL                                        0

		# Enables the PI based deskew system
		# CPM5_DPLL1_ATTR_REG_12_DESKEW_EN                                                0X1

		# Option to choose in which of the two clock inputs is the programmable delay introduced.FALSE : CLKIN_DESKEW TRUE : CLKFB_DESK
		# W
		# CPM5_DPLL1_ATTR_REG_12_DESKEW_DLY_PATH                                          0X0

		# Option to enable the programmable delay in either of the two clock inputs to the deskew sub-system
		# CPM5_DPLL1_ATTR_REG_12_DESKEW_DLY_EN                                            0X0

		# Option to choose the value of the programmable delay
		# CPM5_DPLL1_ATTR_REG_12_DESKEW_DLY                                               0X0

		# REG_12
		#(OFFSET, MASK, VALUE)      (0XFCEB0060, 0x000003FFU ,0x00000100U)  */
    mask_write 0XFCEB0060 0x000003FF 0x00000100
		# Register : REG_14 @ 0XFCEB0068</p>

		# Low values gates the TESTIN ports
		# CPM5_DPLL1_ATTR_REG_14_EN_TESTIN                                                0X0

		# Enables a test mode in digital sync circuit
		# CPM5_DPLL1_ATTR_REG_14_EN_SYNC_CK_TEST                                          0X0

		# enable loop switch over from type1 to type2 in order to speed up lock process.
		# CPM5_DPLL1_ATTR_REG_14_EN_SWITCH                                                0X1

		# nbti_active high will shut off regulator when assert.
		# CPM5_DPLL1_ATTR_REG_14_EN_NBTI_TURNOFFREGULATOR                                 0X1

		# Enables adaptive bandwidth scheme.
		# CPM5_DPLL1_ATTR_REG_14_EN_MOD                                                   0X0

		# enable nbti to gate mclk when deassert.
		# CPM5_DPLL1_ATTR_REG_14_EN_MCLK_GATED                                            0X0

		# Enables locked_deskew combined with locked_loop to generate locked signal.
		# CPM5_DPLL1_ATTR_REG_14_EN_LOCKED_DESKEW                                         0X1

		# 1 to set mc_jump1~15 to index_jump if en_calibration=1.
		# CPM5_DPLL1_ATTR_REG_14_EN_JUMP_PRESET                                           0X1

		# enable edge_sel 511 clkv cycle later.
		# CPM5_DPLL1_ATTR_REG_14_EN_EDGESEL_DLY                                           0X1

		# enable divout enable scheme: use en_out_cntr to start output counter.
		# CPM5_DPLL1_ATTR_REG_14_EN_DIVOUT                                                0X1

		# Enables deskew track ability.
		# CPM5_DPLL1_ATTR_REG_14_EN_DESKEW_TRACK                                          0X1

		# Enables dco calibration before enable loop.
		# CPM5_DPLL1_ATTR_REG_14_EN_CALIBRATION                                           0X1

		# REG_14
		#(OFFSET, MASK, VALUE)      (0XFCEB0068, 0x00000FFFU ,0x0000033FU)  */
    mask_write 0XFCEB0068 0x00000FFF 0x0000033F
		# Register : REG_15 @ 0XFCEB006C</p>

		# hysterisis value for type2 loop lock detect.
		# CPM5_DPLL1_ATTR_REG_15_HYST                                                     0X8

		# hysterisis value for type 1 loop lock detect.
		# CPM5_DPLL1_ATTR_REG_15_HYST_TYPE1                                               0X4

		# REG_15
		#(OFFSET, MASK, VALUE)      (0XFCEB006C, 0x000000FFU ,0x00000048U)  */
    mask_write 0XFCEB006C 0x000000FF 0x00000048
		# Register : REG_17 @ 0XFCEB0074</p>

		# Chooses the skew value of the interpolator .i.e a fixed offset step value
		# CPM5_DPLL1_ATTR_REG_17_INTERP3_SKEW                                             0X0

		# 2'b00 : Interpolator is not controlled by neither DESKEW_PD nor Phase Shift Interface 2'b01 : Interpolator is controlled by D
		# SKEW_PD 2'b10 : Interpolator is controlled by Phase Shift Interface
		# CPM5_DPLL1_ATTR_REG_17_INTERP3_SEL                                              0X0

		# Chooses the skew value of the interpolator .i.e a fixed offset step value
		# CPM5_DPLL1_ATTR_REG_17_INTERP2_SKEW                                             0X0

		# 2'b00 : Interpolator is not controlled by neither DESKEW_PD nor Phase Shift Interface 2'b01 : Interpolator is controlled by D
		# SKEW_PD 2'b10 : Interpolator is controlled by Phase Shift Interface
		# CPM5_DPLL1_ATTR_REG_17_INTERP2_SEL                                              0X0

		# REG_17
		#(OFFSET, MASK, VALUE)      (0XFCEB0074, 0x00007F7FU ,0x00000000U)  */
    mask_write 0XFCEB0074 0x00007F7F 0x00000000
		# Register : REG_18 @ 0XFCEB0078</p>

		# 
		# CPM5_DPLL1_ATTR_REG_18_IS_RST_INVERTED                                          0X0

		# 
		# CPM5_DPLL1_ATTR_REG_18_IS_PWRDWN_INVERTED                                       0X0

		# 
		# CPM5_DPLL1_ATTR_REG_18_IS_PSINCDEC_INVERTED                                     0X0

		# 
		# CPM5_DPLL1_ATTR_REG_18_IS_PSEN_INVERTED                                         0X0

		# 
		# CPM5_DPLL1_ATTR_REG_18_IS_CLKIN_INVERTED                                        0X0

		# REG_18
		#(OFFSET, MASK, VALUE)      (0XFCEB0078, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCEB0078 0x0000001F 0x00000000
		# Register : REG_19 @ 0XFCEB007C</p>

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_19_JUMP3                                                    0X0

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_19_JUMP2                                                    0X10

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_19_JUMP1                                                    0X0

		# REG_19
		#(OFFSET, MASK, VALUE)      (0XFCEB007C, 0x00007FFFU ,0x00000200U)  */
    mask_write 0XFCEB007C 0x00007FFF 0x00000200
		# Register : REG_20 @ 0XFCEB0080</p>

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_20_JUMP6                                                    0X5

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_20_JUMP5                                                    0X0

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_20_JUMP4                                                    0X0

		# REG_20
		#(OFFSET, MASK, VALUE)      (0XFCEB0080, 0x00007FFFU ,0x00001400U)  */
    mask_write 0XFCEB0080 0x00007FFF 0x00001400
		# Register : REG_21 @ 0XFCEB0084</p>

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_21_JUMP9                                                    0X8

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_21_JUMP8                                                    0X6

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_21_JUMP7                                                    0X0

		# REG_21
		#(OFFSET, MASK, VALUE)      (0XFCEB0084, 0x00007FFFU ,0x000020C0U)  */
    mask_write 0XFCEB0084 0x00007FFF 0x000020C0
		# Register : REG_22 @ 0XFCEB0088</p>

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_22_JUMP12                                                   0XA

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_22_JUMP11                                                   0X8

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_22_JUMP10                                                   0XA

		# REG_22
		#(OFFSET, MASK, VALUE)      (0XFCEB0088, 0x00007FFFU ,0x0000290AU)  */
    mask_write 0XFCEB0088 0x00007FFF 0x0000290A
		# Register : REG_23 @ 0XFCEB008C</p>

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_23_JUMP15                                                   0X7

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_23_JUMP14                                                   0XA

		# index_jump setting for dco curve correction.
		# CPM5_DPLL1_ATTR_REG_23_JUMP13                                                   0X8

		# REG_23
		#(OFFSET, MASK, VALUE)      (0XFCEB008C, 0x00007FFFU ,0x00001D48U)  */
    mask_write 0XFCEB008C 0x00007FFF 0x00001D48
		# Register : REG_27 @ 0XFCEB009C</p>

		# MMCM LOCK circuit LOCK counter setting, sets the number of clock cycles the MMCM needs to have clkref and clkfb aligned withi
		#  a certain window before saying it is LOCKED
		# CPM5_DPLL1_ATTR_REG_27_LOCK_TMR                                                 0X20

		# REG_27
		#(OFFSET, MASK, VALUE)      (0XFCEB009C, 0x00000FFFU ,0x00000020U)  */
    mask_write 0XFCEB009C 0x00000FFF 0x00000020
		# Register : REG_28 @ 0XFCEB00A0</p>

		# MMCM LOCK circuit LOCK counter setting, sets the number of clock cycles the MMCM needs to have clkref and clkfb aligned withi
		#  a certain window before saying it is LOCKED
		# CPM5_DPLL1_ATTR_REG_28_LOCK_TMR_TYPE1                                           0X20

		# REG_28
		#(OFFSET, MASK, VALUE)      (0XFCEB00A0, 0x00000FFFU ,0x00000020U)  */
    mask_write 0XFCEB00A0 0x00000FFF 0x00000020
		# Register : REG_29 @ 0XFCEB00A4</p>

		# 00:2+1; 01:2+3; 10: 2+5; 11:2+7.
		# CPM5_DPLL1_ATTR_REG_29_RETIME_SEL                                               0X2

		# Selects when the low-pass filter feeding the LDO regulator switches to its full resistor branch
		# CPM5_DPLL1_ATTR_REG_29_REGLPF_RES_SHORT                                         0X0

		# nbti mux to select delay for clk loss detect.
		# CPM5_DPLL1_ATTR_REG_29_NBTI_MUX                                                 0X3

		# REG_29
		#(OFFSET, MASK, VALUE)      (0XFCEB00A4, 0x0000001FU ,0x00000013U)  */
    mask_write 0XFCEB00A4 0x0000001F 0x00000013
		# Register : REG_30 @ 0XFCEB00A8</p>

		# select locked_in to control regulator.
		# CPM5_DPLL1_ATTR_REG_30_SEL_LOCKED_IN                                            0X1

		# control dealy from en_reg to en_ref.
		# CPM5_DPLL1_ATTR_REG_30_SEL_REG_DELAY                                            0X0

		# Spare digital registers
		# CPM5_DPLL1_ATTR_REG_30_SPARE_DIGITAL                                            0X3E0

		# 1'b1 enables the circuit to sense AVDD short
		# CPM5_DPLL1_ATTR_REG_30_SENSE_TEST_EN                                            0X0

		# 0: lock goes high when phase lock; 1: lock goes high when freq locks.
		# CPM5_DPLL1_ATTR_REG_30_SEL_FREQ_LOCK                                            0X0

		# REG_30
		#(OFFSET, MASK, VALUE)      (0XFCEB00A8, 0x00007FFFU ,0x00004F80U)  */
    mask_write 0XFCEB00A8 0x00007FFF 0x00004F80
		# Register : REG_31 @ 0XFCEB00AC</p>

		# Select AVDD to be put on analog monitor bus
		# CPM5_DPLL1_ATTR_REG_31_SUP_SEL_AVDD                                             0X0

		# Select VBG to be put on analog monitor bus
		# CPM5_DPLL1_ATTR_REG_31_SUP_SEL_VBG                                              0X0

		# Select VBGHALF to be put on analog monitor bus
		# CPM5_DPLL1_ATTR_REG_31_SUP_SEL_VBGHALF                                          0X0

		# Select VCCAUX to be put on analog monitor bus
		# CPM5_DPLL1_ATTR_REG_31_SUP_SEL_VCCAUX                                           0X0

		# Select VCCINT to be put on analog monitor bus
		# CPM5_DPLL1_ATTR_REG_31_SUP_SEL_VCCINT                                           0X0

		# REG_31
		#(OFFSET, MASK, VALUE)      (0XFCEB00AC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCEB00AC 0x0000001F 0x00000000
		# Register : REG_32 @ 0XFCEB00B0</p>

		# Mux select to choose which internal signal goes on TESTOUT1 in regular testmode
		# CPM5_DPLL1_ATTR_REG_32_TESTOUT1_MUX_SEL                                         0X6

		# Mux select to choose which internal signal goes on TESTOUT0 in regular testmode
		# CPM5_DPLL1_ATTR_REG_32_TESTOUT0_MUX_SEL                                         0X4

		# REG_32
		#(OFFSET, MASK, VALUE)      (0XFCEB00B0, 0x00000FFFU ,0x00000184U)  */
    mask_write 0XFCEB00B0 0x00000FFF 0x00000184
		# Register : REG_33 @ 0XFCEB00B4</p>

		# Mux select to choose which internal signal goes on TESTOUT3 in regular testmode
		# CPM5_DPLL1_ATTR_REG_33_TESTOUT3_MUX_SEL                                         0X3

		# Mux select to choose which internal signal goes on TESTOUT2 in regular testmode
		# CPM5_DPLL1_ATTR_REG_33_TESTOUT2_MUX_SEL                                         0X5

		# REG_33
		#(OFFSET, MASK, VALUE)      (0XFCEB00B4, 0x00000FFFU ,0x000000C5U)  */
    mask_write 0XFCEB00B4 0x00000FFF 0x000000C5
		# Register : REG_34 @ 0XFCEB00B8</p>

		# testing with skew flop
		# CPM5_DPLL1_ATTR_REG_34_SKEW_SEL                                                 0X0

		# use dvdd_valid for rst_in_dpll logic
		# CPM5_DPLL1_ATTR_REG_34_USE_REG_VALID                                            0X1

		# Mux select to choose the VLF_VALID trip point using bandgap based reference
		# CPM5_DPLL1_ATTR_REG_34_VLF_VALID_SEL                                            0X3

		# Mux select to choose the VLF_SWITCH trip point using bandgap based reference
		# CPM5_DPLL1_ATTR_REG_34_VLF_SWITCH_SEL                                           0X3

		# Test Mux output control selection mux
		# CPM5_DPLL1_ATTR_REG_34_TMUX_MUX_SEL                                             0X0

		# REG_34
		#(OFFSET, MASK, VALUE)      (0XFCEB00B8, 0x00007FFFU ,0x0000016CU)  */
    mask_write 0XFCEB00B8 0x00007FFF 0x0000016C
		# : USERCLK250_1
		# Register : REG_2 @ 0XFCEB0038</p>

		# Specifies the amount to multiply all CLKOUT clock outputs if a different frequency is desired. It has to be an integer value.
		# This number, in combination with the associated CLKOUT#_DIVIDE value and DIVCLK_DIVIDE value, will determine the output frequ
		# ncy.
		# CPM5_DPLL1_ATTR_REG_2_CLKFBOUT_MULT                                             0X18

		# Specify M value's fractional portion.
		# CPM5_DPLL1_ATTR_REG_2_CLKFBOUT_FRACT                                            0X0

		# REG_2
		#(OFFSET, MASK, VALUE)      (0XFCEB0038, 0x00007FFFU ,0x00000600U)  */
    mask_write 0XFCEB0038 0x00007FFF 0x00000600
		# Register : REG_3 @ 0XFCEB003C</p>

		# 
		# CPM5_DPLL1_ATTR_REG_3_CLKOUT0_USED                                              0X1

		# MMCM_lite O0 counter clock input mux control
		# CPM5_DPLL1_ATTR_REG_3_CLKOUT0_MX                                                0X1

		# Specifies the amount to divide the associated CLKOUT clock output if a different frequency is desired. This number in combina
		# ion with the CLKFBOUT_MULT and DIVCLK_DIVIDE values will determine the output frequency.
		# CPM5_DPLL1_ATTR_REG_3_CLKOUT0_DIVIDE                                            0XC

		# REG_3
		#(OFFSET, MASK, VALUE)      (0XFCEB003C, 0x00000FFFU ,0x00000A0CU)  */
    mask_write 0XFCEB003C 0x00000FFF 0x00000A0C
		# Register : REG_4 @ 0XFCEB0040</p>

		# MMCM O0 counter delay setting
		# CPM5_DPLL1_ATTR_REG_4_CLKOUT0_DT                                                0X0

		# REG_4
		#(OFFSET, MASK, VALUE)      (0XFCEB0040, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCEB0040 0x000000FF 0x00000000
		# Register : REG_5 @ 0XFCEB0044</p>

		# 
		# CPM5_DPLL1_ATTR_REG_5_CLKOUT1_USED                                              0X1

		# MMCM_lite O1 counter clock input mux control
		# CPM5_DPLL1_ATTR_REG_5_CLKOUT1_MX                                                0X1

		# Specifies the amount to divide the associated CLKOUT clock output if a different frequency is desired. This number in combina
		# ion with the CLKFBOUT_MULT and DIVCLK_DIVIDE values will determine the output frequency.
		# CPM5_DPLL1_ATTR_REG_5_CLKOUT1_DIVIDE                                            0X10

		# REG_5
		#(OFFSET, MASK, VALUE)      (0XFCEB0044, 0x00000FFFU ,0x00000A10U)  */
    mask_write 0XFCEB0044 0x00000FFF 0x00000A10
		# Register : REG_10 @ 0XFCEB0058</p>

		# MMCM O3 counter delay setting
		# CPM5_DPLL1_ATTR_REG_10_CLKOUT3_DT                                               0X18

		# REG_10
		#(OFFSET, MASK, VALUE)      (0XFCEB0058, 0x000000FFU ,0x00000018U)  */
    mask_write 0XFCEB0058 0x000000FF 0x00000018
		# Register : REG_13 @ 0XFCEB0064</p>

		# en rk short in regulator
		# CPM5_DPLL1_ATTR_REG_13_EN_RKSHORT                                               0X0

		# en current sink in regulator
		# CPM5_DPLL1_ATTR_REG_13_EN_CURR_SINK                                             0X0

		# Global enable signal for the MMCM
		# CPM5_DPLL1_ATTR_REG_13_DPLL_EN                                                  0X1

		# Specifies the division ratio for all output clocks with respect to the input clock. Effectively divides the CLKIN going into 
		# he TDC and top_syn.
		# CPM5_DPLL1_ATTR_REG_13_DIVCLK_DIVIDE                                            0X02

		# REG_13
		#(OFFSET, MASK, VALUE)      (0XFCEB0064, 0x00000FFFU ,0x00000202U)  */
    mask_write 0XFCEB0064 0x00000FFF 0x00000202
		# Register : REG_16 @ 0XFCEB0070</p>

		# Chooses the skew value of the interpolator .i.e a fixed offset step value
		# CPM5_DPLL1_ATTR_REG_16_INTERP1_SKEW                                             0X0

		# 2'b00 : Interpolator is not controlled by neither DESKEW_PD nor Phase Shift Interface 2'b01 : Interpolator is controlled by D
		# SKEW_PD 2'b10 : Interpolator is controlled by Phase Shift Interface
		# CPM5_DPLL1_ATTR_REG_16_INTERP1_SEL                                              0X0

		# Chooses the skew value of the interpolator .i.e a fixed offset step value
		# CPM5_DPLL1_ATTR_REG_16_INTERP0_SKEW                                             0X00

		# 2'b00 : Interpolator is not controlled by neither DESKEW_PD nor Phase Shift Interface 2'b01 : Interpolator is controlled by D
		# SKEW_PD 2'b10 : Interpolator is controlled by Phase Shift Interface
		# CPM5_DPLL1_ATTR_REG_16_INTERP0_SEL                                              0X01

		# REG_16
		#(OFFSET, MASK, VALUE)      (0XFCEB0070, 0x00007F7FU ,0x00000001U)  */
    mask_write 0XFCEB0070 0x00007F7F 0x00000001
		# Register : REG_24 @ 0XFCEB0090</p>

		# digital loop filter setting for ki.
		# CPM5_DPLL1_ATTR_REG_24_KIP                                                      0X8

		# digital loop filter setting for kp.
		# CPM5_DPLL1_ATTR_REG_24_KPP                                                      0X4

		# REG_24
		#(OFFSET, MASK, VALUE)      (0XFCEB0090, 0x00000FE0U ,0x00000880U)  */
    mask_write 0XFCEB0090 0x00000FE0 0x00000880
		# Register : REG_25 @ 0XFCEB0094</p>

		# MMCM LOCK circuit LOCK counter setting, sets the number of clock cycles the MMCM needs to have clkref and clkfb aligned withi
		#  a certain window before saying it is LOCKED
		# CPM5_DPLL1_ATTR_REG_25_LOCK_TH                                                  0X1F4

		# REG_25
		#(OFFSET, MASK, VALUE)      (0XFCEB0094, 0x00000FFFU ,0x000001F4U)  */
    mask_write 0XFCEB0094 0x00000FFF 0x000001F4
		# Register : REG_26 @ 0XFCEB0098</p>

		# MMCM LOCK circuit LOCK counter setting, sets the number of clock cycles the MMCM needs to have clkref and clkfb aligned withi
		#  a certain window before saying it is LOCKED
		# CPM5_DPLL1_ATTR_REG_26_LOCK_TH_TYPE1                                            0X78

		# REG_26
		#(OFFSET, MASK, VALUE)      (0XFCEB0098, 0x00000FFFU ,0x00000078U)  */
    mask_write 0XFCEB0098 0x00000FFF 0x00000078
		# : DPLL1 GATEREG REMOVAL
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_GATEREG                                           0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000002U ,0x00000002U)  */
    mask_write 0XFCEB0000 0x00000002 0x00000002
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Gates outputs of programming registers
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_GATEREG                                        0X0

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000002U ,0x00000000U)  */
    mask_write 0XFCEB0004 0x00000002 0x00000000
		# : DPLL1 ODISABLE DEASSERT
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_ODISABLE                                          0XF

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x0000003CU ,0x0000003CU)  */
    mask_write 0XFCEB0000 0x0000003C 0x0000003C
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Disables/Isolates block interfaces. Bit 1 should be used for a fabric interface. Bit 2 should be used for a 1st NoC interface
		#  etc.
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_ODISABLE                                       0X0

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x0000003CU ,0x00000000U)  */
    mask_write 0XFCEB0004 0x0000003C 0x00000000
		# : DPLL1 INITSTATE DEASSERT
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_INITSTATE                                         0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000040U ,0x00000040U)  */
    mask_write 0XFCEB0000 0x00000040 0x00000040
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Initializes block state (initialization state may be programmable).
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_INITSTATE                                      0X0

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000040U ,0x00000000U)  */
    mask_write 0XFCEB0004 0x00000040 0x00000000
		# : DPLL1 APBEN
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_APBEN                                             0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00001000U ,0x00001000U)  */
    mask_write 0XFCEB0000 0x00001000 0x00001000
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Enable fabric APB port.
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_APBEN                                          0X1

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00001000U ,0x00001000U)  */
    mask_write 0XFCEB0004 0x00001000 0x00001000
		# : DPLL1 FABRICEN
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_FABRICEN                                          0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000200U ,0x00000200U)  */
    mask_write 0XFCEB0000 0x00000200 0x00000200
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# Controls isolation of fabric inputs.
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_FABRICEN                                       0X1

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000200U ,0x00000200U)  */
    mask_write 0XFCEB0004 0x00000200 0x00000200
		# : DPLL1 PROGRAMMING1
		# Register : REG_PCSR_MASK @ 0XFCEB0000</p>

		# 
		# CPM5_DPLL1_ATTR_REG_PCSR_MASK_PCOMPLETE                                         0X1

		# Programming Mask Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0000, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCEB0000 0x00000001 0x00000001
		# Register : REG_PCSR_CONTROL @ 0XFCEB0004</p>

		# When asserted this bit indicates that the block is now in user operation mode. This bit is set by the PMC.
		# CPM5_DPLL1_ATTR_REG_PCSR_CONTROL_PCOMPLETE                                      0X0

		# Programming Control Register
		#(OFFSET, MASK, VALUE)      (0XFCEB0004, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCEB0004 0x00000001 0x00000000
		# : PCSR LOCK FOR DPLL1
		# Register : REG_PCSR_LOCK @ 0XFCEB000C</p>

		# Reserved for future use.
		# CPM5_DPLL1_ATTR_REG_PCSR_LOCK_RESERVED                                          0X0

		# In order to enable write operations on the programming registers, the unlock code must be written first to the LOCK register.
		# The unlock code is 0xF9E8D7C6. When the programming register write operation has completed, the LOCK register must be written
		# with any other value(not 0xF9E8D7C6) to re-lock the programming registers. If write happens when LOCK is enabled, the slave w
		# ll return a slave error except for the LOCK register itself.
		# CPM5_DPLL1_ATTR_REG_PCSR_LOCK_STATE                                             0X0

		# NPI Lock Register
		#(OFFSET, MASK, VALUE)      (0XFCEB000C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCEB000C 0xFFFFFFFF 0x00000000
		# : PCIE1 CSR REGISTER PROGRAMMING
		# Register : cfg_link_training_enable @ 0XFCE8018C</p>

		# 
		# CPM5_PCIE1_CSR_CFG_LINK_TRAINING_ENABLE_ATTR                                    0X1

		# cfg_link_training_enable
		#(OFFSET, MASK, VALUE)      (0XFCE8018C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8018C 0x00000001 0x00000001
		# Register : cfg_config_space_enable @ 0XFCE801B0</p>

		# 
		# CPM5_PCIE1_CSR_CFG_CONFIG_SPACE_ENABLE_ATTR                                     0X1

		# cfg_config_space_enable
		#(OFFSET, MASK, VALUE)      (0XFCE801B0, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE801B0 0x00000001 0x00000001
		# Register : dpll @ 0XFCE80228</p>

		# Chicken bit to bypass DPLL Logic. 1: DPLL State machine is bypassed, 0: DPLL State machine is active
		# CPM5_PCIE1_CSR_DPLL_SM_BYPASS                                                   0X1

		# Attribute to control DPLL reset when sm_bypass bit is set. Value programmed in this register will be sent as reset to DPLL wh
		# n sm_bypass bit is set
		# CPM5_PCIE1_CSR_DPLL_DPLL_RESET                                                  0X0

		# dpll
		#(OFFSET, MASK, VALUE)      (0XFCE80228, 0x00000003U ,0x00000001U)  */
    mask_write 0XFCE80228 0x00000003 0x00000001
		# : PCIE1 CSR REGISTERS
		# Register : MISC_CTRL @ 0XFCE80000</p>

		# By default, invalid address requests are ignored. However, a maskable interrupt exsists. By enabling this slverr_enable inval
		# d address requests cause a slverr to occur. Enable/Disable SLVERR during address decode failure. 0: SLVERR is disabled. For r
		# quest address: Writes are ignored. Read returns 0. 1: SLVERR is enabled. For requestes address, SLVERR is asserted. Writes ar
		#  ignored. Read returns 0.
		# CPM5_PCIE1_CSR_MISC_CTRL_SLVERR_ENABLE                                          0x0

		# MISC_CTRL
		#(OFFSET, MASK, VALUE)      (0XFCE80000, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE80000 0x00000001 0x00000000
		# Register : ISR @ 0XFCE80010</p>

		# DPLL npi interrupt bit 3
		# CPM5_PCIE1_CSR_ISR_DPLL_NPI_INTERRUPT_3                                         0x0

		# DPLL npi interrupt bit 2
		# CPM5_PCIE1_CSR_ISR_DPLL_NPI_INTERRUPT_2                                         0x0

		# DPLL npi interrupt bit 1
		# CPM5_PCIE1_CSR_ISR_DPLL_NPI_INTERRUPT_1                                         0x0

		# DPLL npi interrupt bit 0
		# CPM5_PCIE1_CSR_ISR_DPLL_NPI_INTERRUPT_0                                         0x0

		# DPLL lock not received within interval programmed in dpll_timeout register. 0: No timeout error , 1 : DPLL lock timeout error
		# CPM5_PCIE1_CSR_ISR_DPLL_LOCK_TIMEOUT_ERR                                        0x0

		# Address Decode Error
		# CPM5_PCIE1_CSR_ISR_ADDR_DECODE_ERR                                              0x0

		# Interrupt Status Register. This is a sticky register that holds the value of the interrupt until cleared by a value of 1.
		#(OFFSET, MASK, VALUE)      (0XFCE80010, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE80010 0x0000003F 0x00000000
		# Register : IMR @ 0XFCE80014</p>

		# DPLL npi interrupt bit 3
		# CPM5_PCIE1_CSR_IMR_DPLL_NPI_INTERRUPT_3                                         0x1

		# DPLL npi interrupt bit 2
		# CPM5_PCIE1_CSR_IMR_DPLL_NPI_INTERRUPT_2                                         0x1

		# DPLL npi interrupt bit 1
		# CPM5_PCIE1_CSR_IMR_DPLL_NPI_INTERRUPT_1                                         0x1

		# DPLL npi interrupt bit 0
		# CPM5_PCIE1_CSR_IMR_DPLL_NPI_INTERRUPT_0                                         0x1

		# DPLL lock not received within interval programmed in dpll_timeout register
		# CPM5_PCIE1_CSR_IMR_DPLL_LOCK_TIMEOUT_ERR                                        0x1

		# Address Decode Error
		# CPM5_PCIE1_CSR_IMR_ADDR_DECODE_ERR                                              0x0

		# Interrupt Mask Register. This is a read-only location and can be atomically altered by either the IDR or the IER.
		#(OFFSET, MASK, VALUE)      (0XFCE80014, 0x0000003FU ,0x0000003EU)  */
    mask_write 0XFCE80014 0x0000003F 0x0000003E
		# Register : IER @ 0XFCE80018</p>

		# DPLL npi interrupt bit 3
		# CPM5_PCIE1_CSR_IER_DPLL_NPI_INTERRUPT_3                                         0x0

		# DPLL npi interrupt bit 2
		# CPM5_PCIE1_CSR_IER_DPLL_NPI_INTERRUPT_2                                         0x0

		# DPLL npi interrupt bit 1
		# CPM5_PCIE1_CSR_IER_DPLL_NPI_INTERRUPT_1                                         0x0

		# DPLL npi interrupt bit 0
		# CPM5_PCIE1_CSR_IER_DPLL_NPI_INTERRUPT_0                                         0x0

		# DPLL lock not received within interval programmed in dpll_timeout register
		# CPM5_PCIE1_CSR_IER_DPLL_LOCK_TIMEOUT_ERR                                        0x0

		# Address Decode Error
		# CPM5_PCIE1_CSR_IER_ADDR_DECODE_ERR                                              0x1

		# Interrupt Enable Register. A write of to this location will unmask the interrupt. (IMR: 0)
		#(OFFSET, MASK, VALUE)      (0XFCE80018, 0x0000003FU ,0x00000001U)  */
    mask_write 0XFCE80018 0x0000003F 0x00000001
		# Register : IDR @ 0XFCE8001C</p>

		# DPLL npi interrupt bit 3
		# CPM5_PCIE1_CSR_IDR_DPLL_NPI_INTERRUPT_3                                         0x0

		# DPLL npi interrupt bit 2
		# CPM5_PCIE1_CSR_IDR_DPLL_NPI_INTERRUPT_2                                         0x0

		# DPLL npi interrupt bit 1
		# CPM5_PCIE1_CSR_IDR_DPLL_NPI_INTERRUPT_1                                         0x0

		# DPLL npi interrupt bit 0
		# CPM5_PCIE1_CSR_IDR_DPLL_NPI_INTERRUPT_0                                         0x0

		# DPLL lock not received within interval programmed in dpll_timeout register
		# CPM5_PCIE1_CSR_IDR_DPLL_LOCK_TIMEOUT_ERR                                        0x0

		# Address Decode Error
		# CPM5_PCIE1_CSR_IDR_ADDR_DECODE_ERR                                              0x0

		# Interrupt Disable Register. A write of one to this location will mask the interrupt. (IMR: 1)
		#(OFFSET, MASK, VALUE)      (0XFCE8001C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8001C 0x0000003F 0x00000000
		# Register : ITR @ 0XFCE80020</p>

		# DPLL npi interrupt bit 3
		# CPM5_PCIE1_CSR_ITR_DPLL_NPI_INTERRUPT_3                                         0x0

		# DPLL npi interrupt bit 2
		# CPM5_PCIE1_CSR_ITR_DPLL_NPI_INTERRUPT_2                                         0x0

		# DPLL npi interrupt bit 1
		# CPM5_PCIE1_CSR_ITR_DPLL_NPI_INTERRUPT_1                                         0x0

		# DPLL npi interrupt bit 0
		# CPM5_PCIE1_CSR_ITR_DPLL_NPI_INTERRUPT_0                                         0x0

		# DPLL lock not received within interval programmed in dpll_timeout register
		# CPM5_PCIE1_CSR_ITR_DPLL_LOCK_TIMEOUT_ERR                                        0x0

		# Address Decode Error
		# CPM5_PCIE1_CSR_ITR_ADDR_DECODE_ERR                                              0x0

		# Address Decode Error
		# CPM5_PCIE1_CSR_ITR_ADDR_DECODE_ERR                                              0x0

		# Interrupt Trigger Register. A write of one to this location will set the interrupt status register related to this interrupt.
		#(OFFSET, MASK, VALUE)      (0XFCE80020, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE80020 0x0000003F 0x00000000
		# Register : ECO_0 @ 0XFCE80024</p>

		# Reserved for future use
		# CPM5_PCIE1_CSR_ECO_0_ECO_0                                                      0x0

		# ECO Register 0
		#(OFFSET, MASK, VALUE)      (0XFCE80024, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE80024 0xFFFFFFFF 0x00000000
		# Register : ECO_1 @ 0XFCE80028</p>

		# Reserved for future use
		# CPM5_PCIE1_CSR_ECO_1_ECO_1                                                      0xFFFFFFFF

		# ECO Register 1
		#(OFFSET, MASK, VALUE)      (0XFCE80028, 0xFFFFFFFFU ,0xFFFFFFFFU)  */
    mask_write 0XFCE80028 0xFFFFFFFF 0xFFFFFFFF
		# Register : WPROTP @ 0XFCE8002C</p>

		# Write protect bit for pcie attributes registers 0: Writes are disabled 1: Writes are enabled
		# CPM5_PCIE1_CSR_WPROTP_ACTIVE                                                    0x0

		# WPROTP
		#(OFFSET, MASK, VALUE)      (0XFCE8002C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8002C 0x00000001 0x00000000
		# Register : USER_TPH @ 0XFCE80030</p>

		# 
		# CPM5_PCIE1_CSR_USER_TPH_USER_TPH_STT_RD_DATA                                    0x0

		# 
		# CPM5_PCIE1_CSR_USER_TPH_USER_TPH_STT_RD_EN                                      0x0

		# 
		# CPM5_PCIE1_CSR_USER_TPH_USER_TPH_STT_INDEX                                      0x0

		# 
		# CPM5_PCIE1_CSR_USER_TPH_USER_TPH_STT_FUNC_NUM                                   0x0

		# USER_TPH
		#(OFFSET, MASK, VALUE)      (0XFCE80030, 0x00FF7FFFU ,0x00000000U)  */
    mask_write 0XFCE80030 0x00FF7FFF 0x00000000
		# Register : PCIE_PL @ 0XFCE80048</p>

		# Setting this register to 1 will clear pl_rcvd_eios_any_lane
		# CPM5_PCIE1_CSR_PCIE_PL_PL_RCVD_EIOS_ANY_LANE_CLEAR                              0x0

		# Setting this register to 1 will clear pl_gen34_eq_mismatch
		# CPM5_PCIE1_CSR_PCIE_PL_PL_GEN34_EQ_MISMATCH_CLEAR                               0x0

		# Setting this register to 1 will clear pl_eq_phase_*
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_PHASE_CLEAR                                        0x0

		# Setting this register to 1 will clear pl_eq_in_progress
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_IN_PROGRESS_CLEAR                                  0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_PL_PL_RCVD_EIOS_ANY_LANE                                    0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_PL_PL_GEN34_EQ_MISMATCH                                     0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_PL_PL_GEN34_REDO_EQ_SPEED                                   0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_PL_PL_GEN34_REDO_EQUALIZATION                               0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_PL_PL_GEN2_UPSTREAM_PREFER_DEEMPH                           0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_RESET_EIEOS_COUNT                                  0x0

		# Indicates there was occurrence of phase value 2'b11
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_PHASE_3                                            0x0

		# Indicates there was occurrence of phase value 2'b10
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_PHASE_2                                            0x0

		# Indicates there was occurrence of phase value 2'b01
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_PHASE_1                                            0x0

		# Indicates there was occurrence of phase value 2'b00
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_PHASE_0                                            0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_PL_PL_EQ_IN_PROGRESS                                        0x0

		# PCIE_PL
		#(OFFSET, MASK, VALUE)      (0XFCE80048, 0x00007FFFU ,0x00000000U)  */
    mask_write 0XFCE80048 0x00007FFF 0x00000000
		# Register : cfg_dsn_low @ 0XFCE80090</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DSN_LOW_ATTR                                                 0x0

		# cfg_dsn_low
		#(OFFSET, MASK, VALUE)      (0XFCE80090, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE80090 0xFFFFFFFF 0x00000000
		# Register : cfg_dsn_high @ 0XFCE8009C</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DSN_HIGH_ATTR                                                0x0

		# cfg_dsn_high
		#(OFFSET, MASK, VALUE)      (0XFCE8009C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8009C 0xFFFFFFFF 0x00000000
		# Register : cfg_dev_id_pf0 @ 0XFCE800A8</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DEV_ID_PF0_ATTR                                              45119

		# cfg_dev_id_pf0
		#(OFFSET, MASK, VALUE)      (0XFCE800A8, 0x0000FFFFU ,0x0000B03FU)  */
    mask_write 0XFCE800A8 0x0000FFFF 0x0000B03F
		# Register : cfg_dev_id_pf1 @ 0XFCE800B4</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DEV_ID_PF1_ATTR                                              45375

		# cfg_dev_id_pf1
		#(OFFSET, MASK, VALUE)      (0XFCE800B4, 0x0000FFFFU ,0x0000B13FU)  */
    mask_write 0XFCE800B4 0x0000FFFF 0x0000B13F
		# Register : cfg_dev_id_pf2 @ 0XFCE800C0</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DEV_ID_PF2_ATTR                                              45631

		# cfg_dev_id_pf2
		#(OFFSET, MASK, VALUE)      (0XFCE800C0, 0x0000FFFFU ,0x0000B23FU)  */
    mask_write 0XFCE800C0 0x0000FFFF 0x0000B23F
		# Register : cfg_dev_id_pf3 @ 0XFCE800CC</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DEV_ID_PF3_ATTR                                              45887

		# cfg_dev_id_pf3
		#(OFFSET, MASK, VALUE)      (0XFCE800CC, 0x0000FFFFU ,0x0000B33FU)  */
    mask_write 0XFCE800CC 0x0000FFFF 0x0000B33F
		# Register : cfg_vend_id @ 0XFCE800D8</p>

		# 
		# CPM5_PCIE1_CSR_CFG_VEND_ID_ATTR                                                 4334

		# cfg_vend_id
		#(OFFSET, MASK, VALUE)      (0XFCE800D8, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE800D8 0x0000FFFF 0x000010EE
		# Register : cfg_rev_id_pf0 @ 0XFCE800E4</p>

		# 
		# CPM5_PCIE1_CSR_CFG_REV_ID_PF0_ATTR                                              0

		# cfg_rev_id_pf0
		#(OFFSET, MASK, VALUE)      (0XFCE800E4, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE800E4 0x000000FF 0x00000000
		# Register : cfg_rev_id_pf1 @ 0XFCE800F0</p>

		# 
		# CPM5_PCIE1_CSR_CFG_REV_ID_PF1_ATTR                                              0

		# cfg_rev_id_pf1
		#(OFFSET, MASK, VALUE)      (0XFCE800F0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE800F0 0x000000FF 0x00000000
		# Register : cfg_rev_id_pf2 @ 0XFCE800FC</p>

		# 
		# CPM5_PCIE1_CSR_CFG_REV_ID_PF2_ATTR                                              0

		# cfg_rev_id_pf2
		#(OFFSET, MASK, VALUE)      (0XFCE800FC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE800FC 0x000000FF 0x00000000
		# Register : cfg_rev_id_pf3 @ 0XFCE80108</p>

		# 
		# CPM5_PCIE1_CSR_CFG_REV_ID_PF3_ATTR                                              0

		# cfg_rev_id_pf3
		#(OFFSET, MASK, VALUE)      (0XFCE80108, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE80108 0x000000FF 0x00000000
		# Register : cfg_subsys_id_pf0 @ 0XFCE80114</p>

		# 
		# CPM5_PCIE1_CSR_CFG_SUBSYS_ID_PF0_ATTR                                           7

		# cfg_subsys_id_pf0
		#(OFFSET, MASK, VALUE)      (0XFCE80114, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE80114 0x0000FFFF 0x00000007
		# Register : cfg_subsys_id_pf1 @ 0XFCE80120</p>

		# 
		# CPM5_PCIE1_CSR_CFG_SUBSYS_ID_PF1_ATTR                                           7

		# cfg_subsys_id_pf1
		#(OFFSET, MASK, VALUE)      (0XFCE80120, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE80120 0x0000FFFF 0x00000007
		# Register : cfg_subsys_id_pf2 @ 0XFCE8012C</p>

		# 
		# CPM5_PCIE1_CSR_CFG_SUBSYS_ID_PF2_ATTR                                           7

		# cfg_subsys_id_pf2
		#(OFFSET, MASK, VALUE)      (0XFCE8012C, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE8012C 0x0000FFFF 0x00000007
		# Register : cfg_subsys_id_pf3 @ 0XFCE80138</p>

		# 
		# CPM5_PCIE1_CSR_CFG_SUBSYS_ID_PF3_ATTR                                           7

		# cfg_subsys_id_pf3
		#(OFFSET, MASK, VALUE)      (0XFCE80138, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE80138 0x0000FFFF 0x00000007
		# Register : cfg_subsys_vend_id @ 0XFCE80144</p>

		# 
		# CPM5_PCIE1_CSR_CFG_SUBSYS_VEND_ID_ATTR                                          4334

		# cfg_subsys_vend_id
		#(OFFSET, MASK, VALUE)      (0XFCE80144, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE80144 0x0000FFFF 0x000010EE
		# Register : cfg_ds_port_number @ 0XFCE80150</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DS_PORT_NUMBER_ATTR                                          0x0

		# cfg_ds_port_number
		#(OFFSET, MASK, VALUE)      (0XFCE80150, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE80150 0x000000FF 0x00000000
		# Register : cfg_ds_bus_number @ 0XFCE8015C</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DS_BUS_NUMBER_ATTR                                           0x0

		# cfg_ds_bus_number
		#(OFFSET, MASK, VALUE)      (0XFCE8015C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8015C 0x000000FF 0x00000000
		# Register : cfg_ds_device_number @ 0XFCE80168</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DS_DEVICE_NUMBER_ATTR                                        0x0

		# cfg_ds_device_number
		#(OFFSET, MASK, VALUE)      (0XFCE80168, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE80168 0x0000001F 0x00000000
		# Register : cfg_ds_function_number @ 0XFCE80174</p>

		# 
		# CPM5_PCIE1_CSR_CFG_DS_FUNCTION_NUMBER_ATTR                                      0x0

		# cfg_ds_function_number
		#(OFFSET, MASK, VALUE)      (0XFCE80174, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE80174 0x00000007 0x00000000
		# Register : cfg_req_pm_transition_l23_ready @ 0XFCE80180</p>

		# 
		# CPM5_PCIE1_CSR_CFG_REQ_PM_TRANSITION_L23_READY_ATTR                             0x0

		# cfg_req_pm_transition_l23_ready
		#(OFFSET, MASK, VALUE)      (0XFCE80180, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE80180 0x00000001 0x00000000
		# Register : cfg_link_training_enable @ 0XFCE8018C</p>

		# 
		# CPM5_PCIE1_CSR_CFG_LINK_TRAINING_ENABLE_ATTR                                    0x1

		# cfg_link_training_enable
		#(OFFSET, MASK, VALUE)      (0XFCE8018C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8018C 0x00000001 0x00000001
		# Register : cfg_pm_aspm_l1_entry_reject @ 0XFCE80198</p>

		# 
		# CPM5_PCIE1_CSR_CFG_PM_ASPM_L1_ENTRY_REJECT_ATTR                                 0x0

		# cfg_pm_aspm_l1_entry_reject
		#(OFFSET, MASK, VALUE)      (0XFCE80198, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE80198 0x00000001 0x00000000
		# Register : cfg_pm_aspm_tx_l0s_entry_disable @ 0XFCE801A4</p>

		# 
		# CPM5_PCIE1_CSR_CFG_PM_ASPM_TX_L0S_ENTRY_DISABLE_ATTR                            0x0

		# cfg_pm_aspm_tx_l0s_entry_disable
		#(OFFSET, MASK, VALUE)      (0XFCE801A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE801A4 0x00000001 0x00000000
		# Register : cfg_config_space_enable @ 0XFCE801B0</p>

		# 
		# CPM5_PCIE1_CSR_CFG_CONFIG_SPACE_ENABLE_ATTR                                     0x1

		# cfg_config_space_enable
		#(OFFSET, MASK, VALUE)      (0XFCE801B0, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE801B0 0x00000001 0x00000001
		# Register : cfg_bus_number @ 0XFCE801BC</p>

		# 
		# CPM5_PCIE1_CSR_CFG_BUS_NUMBER_ATTR                                              0x0

		# cfg_bus_number
		#(OFFSET, MASK, VALUE)      (0XFCE801BC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE801BC 0x000000FF 0x00000000
		# Register : DPLL_CTRL_STATUS @ 0XFCE801C8</p>

		# 
		# CPM5_PCIE1_CSR_DPLL_CTRL_STATUS_RESERVED                                        0x0

		# Allow PL to drive fabric_if of DPLL (instead of CPM5 logic). This is a test only feature.
		# CPM5_PCIE1_CSR_DPLL_CTRL_STATUS_PL_IO_EN                                        0x1

		# PLL Powerdown verride value. Only effective when pwrdwn_override=1
		# CPM5_PCIE1_CSR_DPLL_CTRL_STATUS_PWRDWN_OVERRIDE_VAL                             0x0

		# PLL Powerdown override enable.
		# CPM5_PCIE1_CSR_DPLL_CTRL_STATUS_PWRDWN_OVERRIDE                                 0x0

		# PLL Reset override value. Only effective when rst_override=1
		# CPM5_PCIE1_CSR_DPLL_CTRL_STATUS_RST_OVERRIDE_VAL                                0x0

		# PLL Reset override enable
		# CPM5_PCIE1_CSR_DPLL_CTRL_STATUS_RST_OVERRIDE                                    0x0

		# 0: PLL not locked, 1: PLL Locked
		# CPM5_PCIE1_CSR_DPLL_CTRL_STATUS_LOCKED                                          0x0

		# Control and Status for DPLL in PL
		#(OFFSET, MASK, VALUE)      (0XFCE801C8, 0xFFFFFFFFU ,0x00000020U)  */
    mask_write 0XFCE801C8 0xFFFFFFFF 0x00000020
		# Register : CPM_PCIE_DBG @ 0XFCE801EC</p>

		# ELA Debug Select register for core 1
		# CPM5_PCIE1_CSR_CPM_PCIE_DBG_SEL1                                                0x0

		# ELA Debug Select register for core 0
		# CPM5_PCIE1_CSR_CPM_PCIE_DBG_SEL0                                                0x0

		# CPM_PCIE_DBG
		#(OFFSET, MASK, VALUE)      (0XFCE801EC, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE801EC 0x00000FFF 0x00000000
		# Register : cfg_mgmt_dvsec @ 0XFCE80200</p>

		# 
		# CPM5_PCIE1_CSR_CFG_MGMT_DVSEC_CCIX_PDVSEC_SEND_COMPLETION                       0x0

		# 
		# CPM5_PCIE1_CSR_CFG_MGMT_DVSEC_CCIX_PDVSEC_FUNCTION_NUMBER                       0x0

		# 
		# CPM5_PCIE1_CSR_CFG_MGMT_DVSEC_CCIX_PDVSEC_REGISTER_NUMBER                       0x0

		# 
		# CPM5_PCIE1_CSR_CFG_MGMT_DVSEC_MGMT_DEBUG_ACCESS                                 0x0

		# cfg_mgmt_dvsec
		#(OFFSET, MASK, VALUE)      (0XFCE80200, 0x0FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE80200 0x0FFFFFFF 0x00000000
		# Register : dpll_sm_timeout @ 0XFCE8021C</p>

		# DPLL State machine Timeout period in microseconds (1 us for 150MHz lsbus clk. Will be less than 1us unit if lsbus clock is sl
		# wer than 150MHz). Default : 2ms
		# CPM5_PCIE1_CSR_DPLL_SM_TIMEOUT_ATTR                                             0x7D0

		# dpll_sm_timeout
		#(OFFSET, MASK, VALUE)      (0XFCE8021C, 0xFFFFFFFFU ,0x000007D0U)  */
    mask_write 0XFCE8021C 0xFFFFFFFF 0x000007D0
		# Register : dpll @ 0XFCE80228</p>

		# Attribute to control blocking/unblocking phystatus to PCIe core when sm_bypass bit is set. 1: block phystatus, 0: unblock phy
		# tatus
		# CPM5_PCIE1_CSR_DPLL_BLOCK_PHYSTATUS                                             0x0

		# Attribute to control blocking/unblocking phy_rdy to PCIe core when sm_bypass bit is set. 1: block phy_rdy, 0: unblock phy_rdy
		# CPM5_PCIE1_CSR_DPLL_BLOCK_PHY_RDY                                               0x0

		# Attribute to control DPLL reset when sm_bypass bit is set. Value programmed in this register will be sent as reset to DPLL wh
		# n sm_bypass bit is set
		# CPM5_PCIE1_CSR_DPLL_DPLL_RESET                                                  0x0

		# Chicken bit to bypass DPLL Logic. 1: DPLL State machine is bypassed, 0: DPLL State machine is active
		# CPM5_PCIE1_CSR_DPLL_SM_BYPASS                                                   0x1

		# dpll
		#(OFFSET, MASK, VALUE)      (0XFCE80228, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE80228 0x0000000F 0x00000001
		# Register : fabricen @ 0XFCE80244</p>

		# 
		# CPM5_PCIE1_CSR_FABRICEN_ATTR                                                    1

		# Fabricen for independent isolation for a PCIe Core. Fabricen=0 :isolation enabled, Fabricen=1: no isolation
		#(OFFSET, MASK, VALUE)      (0XFCE80244, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE80244 0x00000001 0x00000001
		# Register : ccix_optimized_tlp_tx_and_rx_enable @ 0XFCE80250</p>

		# 
		# CPM5_PCIE1_CSR_CCIX_OPTIMIZED_TLP_TX_AND_RX_ENABLE_ATTR                         0x0

		# CCIX register implemented instead of PL pin (EDT-976961 )
		#(OFFSET, MASK, VALUE)      (0XFCE80250, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE80250 0x00000001 0x00000000
		# Register : cfg_interrupt @ 0XFCE80260</p>

		# write to this will clear msi_sent, msi_fail and msix_vec_pending_status bits
		# CPM5_PCIE1_CSR_CFG_INTERRUPT_CLEAR                                              0x0

		# 
		# CPM5_PCIE1_CSR_CFG_INTERRUPT_MSIX_VEC_PENDING_STATUS                            0x0

		# 
		# CPM5_PCIE1_CSR_CFG_INTERRUPT_MSI_FAIL                                           0x0

		# 
		# CPM5_PCIE1_CSR_CFG_INTERRUPT_MSI_SENT                                           0x0

		# cfg_interrupt
		#(OFFSET, MASK, VALUE)      (0XFCE80260, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE80260 0x0000000F 0x00000000
		# Register : phy_rdy @ 0XFCE8027C</p>

		# Control bit to stall the rate change ack coming from the PL. 1: Allow rate change ack from PL to pass through 0: Block rate c
		# ange ack from PL
		# CPM5_PCIE1_CSR_PHY_RDY_CFG_CCIX_EDR_DATA_RATE_CHANGE_ACK                        0x1

		# EDR data rate change ack from the PL
		# CPM5_PCIE1_CSR_PHY_RDY_CFG_CCIX_EDR_DATA_RATE_CHANGE_ACK_FROM_PL                0x0

		# EDR data rate change req
		# CPM5_PCIE1_CSR_PHY_RDY_CFG_CCIX_EDR_DATA_RATE_CHANGE_REQ                        0x0

		# EDR Enabled
		# CPM5_PCIE1_CSR_PHY_RDY_CFG_EDR_ENABLE                                           0x0

		# This register is the xpipe tx rate request from the PCIE core
		# CPM5_PCIE1_CSR_PHY_RDY_XPIPE_TX_RATE                                            0x0

		# This register will log status of phy_rdy received by PCIe Core
		# CPM5_PCIE1_CSR_PHY_RDY_RCVD                                                     0x0

		# This register indicates current ltssm_state.
		# CPM5_PCIE1_CSR_PHY_RDY_LTSSM_STATE                                              0x0

		# Link training debug information
		#(OFFSET, MASK, VALUE)      (0XFCE8027C, 0x00003FFFU ,0x00002000U)  */
    mask_write 0XFCE8027C 0x00003FFF 0x00002000
		# Register : div_override @ 0XFCE802A0</p>

		# reset mask
		# CPM5_PCIE1_CSR_DIV_OVERRIDE_RSTMASK                                             0x0

		# reset
		# CPM5_PCIE1_CSR_DIV_OVERRIDE_RST                                                 0x0

		# clock enable mask
		# CPM5_PCIE1_CSR_DIV_OVERRIDE_CEMASK                                              0x0

		# clock enable
		# CPM5_PCIE1_CSR_DIV_OVERRIDE_CE                                                  0x0

		# divisor value
		# CPM5_PCIE1_CSR_DIV_OVERRIDE_DIV                                                 0x0

		# If enable=1, divider that is used to generate PCIe clocks will be controlled by this register and not from GT.
		# CPM5_PCIE1_CSR_DIV_OVERRIDE_ENABLE                                              0x0

		# div_override
		#(OFFSET, MASK, VALUE)      (0XFCE802A0, 0x007FFFFFU ,0x00000000U)  */
    mask_write 0XFCE802A0 0x007FFFFF 0x00000000
		# Register : pcie_cfg_msg @ 0XFCE802C4</p>

		# 
		# CPM5_PCIE1_CSR_PCIE_CFG_MSG_DATA_TYPE                                           0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_CFG_MSG_DATA                                                0x0

		# 
		# CPM5_PCIE1_CSR_PCIE_CFG_MSG_RECEIVED                                            0x0

		# pcie_cfg_msg
		#(OFFSET, MASK, VALUE)      (0XFCE802C4, 0x00003FFFU ,0x00000000U)  */
    mask_write 0XFCE802C4 0x00003FFF 0x00000000
		# Register : cfg_vc1_negotiation_pending @ 0XFCE802D8</p>

		# 
		# CPM5_PCIE1_CSR_CFG_VC1_NEGOTIATION_PENDING_LPO                                  0x0

		# cfg_vc1_negotiation_pending
		#(OFFSET, MASK, VALUE)      (0XFCE802D8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE802D8 0x00000001 0x00000000
		# Register : ela_data_mux_sel @ 0XFCE802E4</p>

		# ELA data mux select for ELA1
		# CPM5_PCIE1_CSR_ELA_DATA_MUX_SEL_ELA1                                            0x0

		# ELA data mux select for ELA0
		# CPM5_PCIE1_CSR_ELA_DATA_MUX_SEL_ELA0                                            0x0

		# ela_data_mux_sel
		#(OFFSET, MASK, VALUE)      (0XFCE802E4, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE802E4 0x00000003 0x00000000
		# Register : dma_dbg @ 0XFCE802F4</p>

		# 
		# CPM5_PCIE1_CSR_DMA_DBG_SEL1                                                     0x0

		# 
		# CPM5_PCIE1_CSR_DMA_DBG_SEL0                                                     0x0

		# DMA debug select
		#(OFFSET, MASK, VALUE)      (0XFCE802F4, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE802F4 0x00000FFF 0x00000000
		# : PCIEA1
		# Register : MISC_CTRL @ 0XFCE88000</p>

		# By default, invalid address requests are ignored. However, a maskable interrupt exsists. By enabling this slverr_enable inval
		# d address requests cause a slverr to occur. Enable/Disable SLVERR during address decode failure. 0: SLVERR is disabled. For r
		# quest address: Writes are ignored. Read returns 0. 1: SLVERR is enabled. For requestes address, SLVERR is asserted. Writes ar
		#  ignored. Read returns 0.
		# CPM5_PCIE1_ATTR_MISC_CTRL_SLVERR_ENABLE                                         0x0

		# MISC_CTRL
		#(OFFSET, MASK, VALUE)      (0XFCE88000, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88000 0x00000001 0x00000000
		# Register : ISR @ 0XFCE88010</p>

		# DPLL lock not received within interval programmed in dpll_timeout register. 0: No timeout error , 1 : DPLL lock timeout error
		# CPM5_PCIE1_ATTR_ISR_DPLL_LOCK_TIMEOUT_ERR                                       0x0

		# Address Decode Error
		# CPM5_PCIE1_ATTR_ISR_ADDR_DECODE_ERR                                             0x0

		# Interrupt Status Register. This is a sticky register that holds the value of the interrupt until cleared by a value of 1.
		#(OFFSET, MASK, VALUE)      (0XFCE88010, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88010 0x00000003 0x00000000
		# Register : IMR @ 0XFCE88014</p>

		# DPLL lock not received within interval programmed in dpll_timeout register
		# CPM5_PCIE1_ATTR_IMR_DPLL_LOCK_TIMEOUT_ERR                                       0x1

		# Address Decode Error
		# CPM5_PCIE1_ATTR_IMR_ADDR_DECODE_ERR                                             0x1

		# Interrupt Mask Register. This is a read-only location and can be atomically altered by either the IDR or the IER.
		#(OFFSET, MASK, VALUE)      (0XFCE88014, 0x00000003U ,0x00000003U)  */
    mask_write 0XFCE88014 0x00000003 0x00000003
		# Register : IER @ 0XFCE88018</p>

		# DPLL lock not received within interval programmed in dpll_timeout register
		# CPM5_PCIE1_ATTR_IER_DPLL_LOCK_TIMEOUT_ERR                                       0x0

		# Address Decode Error
		# CPM5_PCIE1_ATTR_IER_ADDR_DECODE_ERR                                             0x1

		# Interrupt Enable Register. A write of to this location will unmask the interrupt. (IMR: 0)
		#(OFFSET, MASK, VALUE)      (0XFCE88018, 0x00000003U ,0x00000001U)  */
    mask_write 0XFCE88018 0x00000003 0x00000001
		# Register : IDR @ 0XFCE8801C</p>

		# DPLL lock not received within interval programmed in dpll_timeout register
		# CPM5_PCIE1_ATTR_IDR_DPLL_LOCK_TIMEOUT_ERR                                       0x0

		# Address Decode Error
		# CPM5_PCIE1_ATTR_IDR_ADDR_DECODE_ERR                                             0x0

		# Interrupt Disable Register. A write of one to this location will mask the interrupt. (IMR: 1)
		#(OFFSET, MASK, VALUE)      (0XFCE8801C, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE8801C 0x00000003 0x00000000
		# Register : ECO_0 @ 0XFCE88020</p>

		# Reserved for future use
		# CPM5_PCIE1_ATTR_ECO_0_ECO_0                                                     0x0

		# ECO Register 0
		#(OFFSET, MASK, VALUE)      (0XFCE88020, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88020 0xFFFFFFFF 0x00000000
		# Register : ECO_1 @ 0XFCE88024</p>

		# Reserved for future use
		# CPM5_PCIE1_ATTR_ECO_1_ECO_1                                                     0xFFFFFFFF

		# ECO Register 1
		#(OFFSET, MASK, VALUE)      (0XFCE88024, 0xFFFFFFFFU ,0xFFFFFFFFU)  */
    mask_write 0XFCE88024 0xFFFFFFFF 0xFFFFFFFF
		# Register : CRM_CORE_CLK_FREQ @ 0XFCE88030</p>

		# 
		# CPM5_PCIE1_ATTR_CRM_CORE_CLK_FREQ_ATTR                                          4

		# Core Clock Frequency: 00001b = 250 MHz, 00010b = 500 MHz, 00100b = 1000 MHz All other encodings are Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88030, 0x0000001FU ,0x00000004U)  */
    mask_write 0XFCE88030 0x0000001F 0x00000004
		# Register : CRM_USER_CLK_FREQ @ 0XFCE88034</p>

		# 
		# CPM5_PCIE1_ATTR_CRM_USER_CLK_FREQ_ATTR                                          2

		# User Clock Frequency: 000b = 62.5 MHz, 001b = 125 MHz, 010b = 250 MHz All other encodings are reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE88034, 0x00000007U ,0x00000002U)  */
    mask_write 0XFCE88034 0x00000007 0x00000002
		# Register : AXISTEN_IF_WIDTH @ 0XFCE88038</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_WIDTH_ATTR                                           4

		# AXI Streaming Enhanced Interface Width: Valid settings are: 000b = 64b, 001b = 128b, 010b = 256b, 011b = 512b, 100b = 1024b
		#(OFFSET, MASK, VALUE)      (0XFCE88038, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE88038 0x00000007 0x00000004
		# Register : AXISTEN_IF_CQ_STRADDLE @ 0XFCE8803C</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CQ_STRADDLE_ATTR                                     0

		# AXI Stream Enhanced Interface Enable CQ Straddle Enable : 00b = max 1 packet/beat, 01b = max 2 packets/beat, 10b = max 4 pack
		# ts/beat, 11b = reserved 00b: Design will always align a SOP to bit 0. 01b: SOPs are aligned with bit 0 and bit 256 on 512-bit
		# interface. SOPs are aligned with bits 0, 256, 512, or 768 on the 1024-bit interface.The first SOP in a beat will always be al
		# gned with bit 0, unless there is an EOP before it. On the 1024-bit interface, the SOP tokens will be contiguous, with no gaps
		# (for example, if the first packet ends before bit 256, there will be either an SOP at bit 256 or the rest of the beat will be
		# empty). 10b : (1024-bit interface only): SOPs are aligned with bits 0, 256, 512, or 768 on the 1024-bit interface. The first 
		# OP in a beat will always be aligned with bit 0, unless there is an EOP before it. On the 1024-bit interface, the SOP tokens w
		# ll be contiguous, with no gaps (for example, if the first packet ends before bit 256, there will be either an SOP at bit 256 
		# r the rest of the beat will be empty).
		#(OFFSET, MASK, VALUE)      (0XFCE8803C, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE8803C 0x00000003 0x00000000
		# Register : AXISTEN_IF_CC_STRADDLE @ 0XFCE88040</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CC_STRADDLE_ATTR                                     0

		# AXI Stream Enhanced Interface Enable CC Straddle Enable : 00b = max 1 packet/beat, 01b = max 2 packets/beat, 10b = max 4 pack
		# ts/beat, 11b = reserved 00b : User must always align a SOP to bit 0. 01b : SOPs must be aligned with bit 0 and bit 256 on 512
		# bit interface. SOPs must be aligned with bits 0, 256, 512, or 768 on the 1024-bit interface. The first SOP in a beat must alw
		# ys be aligned with bit 0, unless there is an EOP before it. On the 1024-bit interface, the SOP tokens must be contiguous, wit
		#  no gaps (for example, if the first packet ends before bit 256, there must be either an SOP at bit 256 or the rest of the bea
		#  must be empty). 10b : (1024-bit interface only): SOPs must be aligned with bits 0, 256, 512, or 768 on the 1024-bit interfac
		# . The first SOP in a beat must always be aligned with bit 0, unless there is an EOP before it. On the 1024-bit interface, the
		# SOP tokens must be contiguous, with no gaps (for example, if the first packet ends before bit 256, there must be either an SO
		#  at bit 256 or the rest of the beat must be empty).
		#(OFFSET, MASK, VALUE)      (0XFCE88040, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88040 0x00000003 0x00000000
		# Register : AXISTEN_IF_RQ_STRADDLE @ 0XFCE88044</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_RQ_STRADDLE_ATTR                                     0

		# AXI Stream Enhanced Interface Enable RQ Straddle Enable : 00b = max 1 packet/beat, 01b = max 2 packets/beat, 10b = max 4 pack
		# ts/beat, 11b = reserved 00b : User must always align a SOP to bit 0. 01b : SOPs must be aligned with bit 0 and bit 256 on 512
		# bit interface. SOPs must be aligned with bits 0, 256, 512, or 768 on the 1024-bit interface. The first SOP in a beat must alw
		# ys be aligned with bit 0, unless there is an EOP before it. On the 1024-bit interface, the SOP tokens must be contiguous, wit
		#  no gaps (for example, if the first packet ends before bit 256, there must be either an SOP at bit 256 or the rest of the bea
		#  must be empty). 10b : (1024-bit interface only): SOPs must be aligned with bits 0, 256, 512, or 768 on the 1024-bit interfac
		# . The first SOP in a beat must always be aligned with bit 0, unless there is an EOP before it. On the 1024-bit interface, the
		# SOP tokens must be contiguous, with no gaps (for example, if the first packet ends before bit 256, there must be either an SO
		#  at bit 256 or the rest of the beat must be empty).
		#(OFFSET, MASK, VALUE)      (0XFCE88044, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88044 0x00000003 0x00000000
		# Register : AXISTEN_IF_RC_STRADDLE @ 0XFCE88048</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_RC_STRADDLE_ATTR                                     2

		# AXI Stream Enhanced Interface Enable RC Straddle Enable : 00b = max 1 packet/beat, 01b = max 2 packets/beat, 10b = max 4 pack
		# ts/beat, 11b = max. 8 packets/beat. 00b : Design will always align a SOP to bit 0. 01b : SOPs are aligned with bit 0 and bit 
		# 56 on 512-bit interface. SOPs are aligned with bits 0, 256, 512, or 768 on the 1024-bit interface. The first SOP in a beat wi
		# l always be aligned with bit 0, unless there is an EOP before it. On the 1024-bit interface, the SOP tokens will be contiguou
		# , with no gaps (for example, if the first packet ends before bit 256, there will be either an SOP at bit 256 or the rest of t
		# e beat will be empty). 10b : 1024-bit interface: SOPs are aligned with bits 0, 256, 512, or 768 on the 1024-bit interface. Th
		#  first SOP in a beat will always be aligned with bit 0, unless there is an EOP before it. The SOP tokens will be contiguous, 
		# ith no gaps (for example, if the first packet ends before bit 256, there will be either an SOP at bit 256 or the rest of the 
		# eat will be empty). Straddle =2, 512-bit interface: SOPs are aligned with bits 0, 128, 256, or 384 on the 512-bit interface. 
		# he first SOP in a beat will always be aligned with bit 0, unless there is an EOP before it. The SOP tokens will be contiguous
		#  with no gaps (for example, if the first packet ends before bit 128, there will be either an SOP at bit 128 or the rest of th
		#  beat will be empty). 11b : (1024-bit interface only): SOPs are aligned with bits 0, 128, 256, 384, 512, 640, 768, or 896 on 
		# he 1024-bit interface. The first SOP in a beat will always be aligned with bit 0, unless there is an EOP before it. The SOP t
		# kens will be contiguous, with no gaps (for example, if the first packet ends before bit 128, there will be either an SOP at b
		# t 128 or the rest of the beat will be empty).
		#(OFFSET, MASK, VALUE)      (0XFCE88048, 0x00000003U ,0x00000002U)  */
    mask_write 0XFCE88048 0x00000003 0x00000002
		# Register : AXISTEN_IF_CQ_ALIGNMENT_MODE @ 0XFCE8804C</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CQ_ALIGNMENT_MODE_ATTR                               0

		# AXI Streaming Enhanced Interface CQ Alignment: Determines the data alignment mode for the CQ interface: 00b = Dword-aligned m
		# de, 01b = 256b-address-aligned mode, 10b = 128b-address-aligned mode, 11b = Reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE8804C, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE8804C 0x00000003 0x00000000
		# Register : AXISTEN_IF_CC_ALIGNMENT_MODE @ 0XFCE88050</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CC_ALIGNMENT_MODE_ATTR                               0

		# AXI Streaming Enhanced Interface CC Alignment: Determines the data alignment mode for the CC interface: 00b = Dword-aligned m
		# de, 01b = 256b-address-aligned mode, 10b = 128b-address-aligned mode, 11b = Reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE88050, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88050 0x00000003 0x00000000
		# Register : AXISTEN_IF_RQ_ALIGNMENT_MODE @ 0XFCE88054</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_RQ_ALIGNMENT_MODE_ATTR                               0

		# AXI Streaming Enhanced Interface RQ Alignment: Determines the data alignment mode for the RQ interface: 00b = Dword-aligned m
		# de, 01b = 256b-address-aligned mode, 10b = 128b-address-aligned mode, 11b = Reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE88054, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88054 0x00000003 0x00000000
		# Register : AXISTEN_IF_RC_ALIGNMENT_MODE @ 0XFCE88058</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_RC_ALIGNMENT_MODE_ATTR                               0

		# AXI Streaming Enhanced Interface RC Alignment: Determines the data alignment mode for the RC interface: 00b = Dword-aligned m
		# de, 01b = 256b-address-aligned mode, 10b = 128b-address-aligned mode, 11b = Reserved. Encodings 01b and 10b can used only if 
		# XISTEN_IF_RQ_ALIGNMENT_MODE is set to 01b or 10b.
		#(OFFSET, MASK, VALUE)      (0XFCE88058, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88058 0x00000003 0x00000000
		# Register : AXISTEN_IF_ENABLE_RX_MSG_INTFC @ 0XFCE8805C</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_RX_MSG_INTFC_ATTR                             0x0

		# Received AXISTEN message interface enable: When set to 0, received messages are delivered through the CQ interface. When set 
		# o 1, these are delivered through the receive message interface.
		#(OFFSET, MASK, VALUE)      (0XFCE8805C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8805C 0x00000001 0x00000000
		# Register : AXISTEN_IF_ENABLE_MSG_ROUTE @ 0XFCE88060</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_MSG_ROUTE_ATTR                                0

		# Received AXISTEN message routing Enable the routing of message TLPs to the user through the AXI CQ interface. A bit value of 
		#  enables routing of the message TLP to the user. Messages are always decoded by the message decoder. Bit 0 - ERR_COR, Bit 1 -
		# ERR_NONFATAL, Bit 2 - ERR_FATAL, Bit 3 - Assert_INTA and Deassert_ INTA, Bit 4 - Assert_INTB and Deassert_ INTB, Bit 5 - Asse
		# t_INTC and Deassert_ INTC, Bit 6 - Assert_INTD and Deassert_ INTD, Bit 7 - PM_PME, Bit 8 - PME_TO_Ack, Bit 9 - PME_Turn_Off, 
		# it 10 - PM_Active_State_Nak, Bit 11 - Set_Slot_Power_Limit, Bit 12 - Latency Tolerance Reporting (LTR), Bit 13 - Reserved, Bi
		#  14 - Unlock, Bit 15 - Vendor_Defined Type 0, Bit 16 - Vendor_Defined Type 1, Bit 17 - Invalid Request, Invalid Completion, P
		# ge, Request, PRG Response,
		#(OFFSET, MASK, VALUE)      (0XFCE88060, 0x0003FFFFU ,0x00000000U)  */
    mask_write 0XFCE88060 0x0003FFFF 0x00000000
		# Register : AXISTEN_IF_RX_PARITY_EN @ 0XFCE88064</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_RX_PARITY_EN_ATTR                                    1

		# AXI Rx Interface Parity Enable. Used in conjunction with LL_RX_TLP_PARITY_GEN TRUE -- parity is enabled FALSE -- parity is di
		# abled.
		#(OFFSET, MASK, VALUE)      (0XFCE88064, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88064 0x00000001 0x00000001
		# Register : AXISTEN_IF_TX_PARITY_EN @ 0XFCE88068</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_TX_PARITY_EN_ATTR                                    0

		# AXI Tx Interface Parity Enable. Used in conjunction with LL_TX_TLP_PARITY_CHK TRUE -- parity is enabled FALSE -- parity is di
		# abled.
		#(OFFSET, MASK, VALUE)      (0XFCE88068, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88068 0x00000001 0x00000000
		# Register : AXISTEN_IF_ENABLE_CLIENT_TAG @ 0XFCE8806C</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_CLIENT_TAG_ATTR                               0

		# AXI Streaming Enhanced Inteface Tag management option for RQ interface: When this attribute is FALSE, Tag management for Non-
		# osted TxN initiated from the requester request interface is performed by the PCIe Hard Block. For each Non-Posted request, th
		#  Block generates the Tag for the transaction and communicates it to the client.When this attribute set to TRUE, internal tag 
		# anagement is disabled, allowing the user to supply the tag to be used for each Non-Posted request. When AXISTEN_IF_ENABLE_CLI
		# NT_TAG = FALSE, Tag generation is controlled by the attribute AXISTEN_IF_ENABLE_TAGS.
		#(OFFSET, MASK, VALUE)      (0XFCE8806C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8806C 0x00000001 0x00000000
		# Register : AXISTEN_IF_ENABLE_TAGS @ 0XFCE88070</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_TAGS_ATTR                                     0

		# AXI Streaming Enhanced Interface Tag management for Tags Support on the RQ interface: 00b = 32 Tags \'7b000-01FH\'7d, 01b = 2
		# 6 Tags \'7b000H-0FF\'7d, 10b = 768 Tags (range \'7b100H-3FFH\'7d, 11b = 1024 Tags \'7b000H-3FFH\'7d. Attribute is active only
		# when AXISTEN_IF_ENABLE_CLIENT_TAG = FALSE.
		#(OFFSET, MASK, VALUE)      (0XFCE88070, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88070 0x00000003 0x00000000
		# Register : AXISTEN_IF_ENABLE_RX_TAG_SCALING @ 0XFCE88074</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_RX_TAG_SCALING_ATTR                           0x0

		# AXI Streaming Enhanced Interface Rx Tag Scaling: FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE88074, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88074 0x00000001 0x00000000
		# Register : AXISTEN_IF_ENABLE_TX_TAG_SCALING @ 0XFCE88078</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_TX_TAG_SCALING_ATTR                           0x0

		# AXI Streaming Enhanced Interface Tx Tag Scaling: FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE88078, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88078 0x00000001 0x00000000
		# Register : AXISTEN_IF_COMPL_TIMEOUT_REG0 @ 0XFCE8807C</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_COMPL_TIMEOUT_REG0_ATTR                              0xbebc20

		# Completion Timeout Limit Register #0: This register contains the timeout value used to detect a completion timeout event for 
		#  request originated by the core from its AXI master interface, when sub-range 1 is programmed in the Device Control 2 Registe
		# .
		#(OFFSET, MASK, VALUE)      (0XFCE8807C, 0x00FFFFFFU ,0x00BEBC20U)  */
    mask_write 0XFCE8807C 0x00FFFFFF 0x00BEBC20
		# Register : AXISTEN_IF_COMPL_TIMEOUT_REG1 @ 0XFCE88080</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_COMPL_TIMEOUT_REG1_ATTR                              0x2faf080

		# Completion Timeout Limit Register #1: This register contains the timeout value used to detect a completion timeout event for 
		#  request originated by the core from its AXI master interface, when sub-range 2 is programmed in the Device Control 2 Registe
		# .
		#(OFFSET, MASK, VALUE)      (0XFCE88080, 0x0FFFFFFFU ,0x02FAF080U)  */
    mask_write 0XFCE88080 0x0FFFFFFF 0x02FAF080
		# Register : AXISTEN_IF_LEGACY_MODE_ENABLE @ 0XFCE88084</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_LEGACY_MODE_ENABLE_ATTR                              0x0

		# Enable Legacy Endpoint Mode: When TRUE, if PL_UPSTREAM_FACING is TRUE, then core is configured as a Legacy Endpoint and will 
		# orward Locked Transactions through the AXI target interface, and generate Locked Completions in response to them. If PL_UPSTR
		# AM_FACING is FALSE, then user can generate Locked Read Transactions as a Master. When FALSE, core is configured as a PCIe End
		# oint.
		#(OFFSET, MASK, VALUE)      (0XFCE88084, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88084 0x00000001 0x00000000
		# Register : AXISTEN_IF_ENABLE_MESSAGE_RID_CHECK @ 0XFCE88088</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_MESSAGE_RID_CHECK_ATTR                        0x1

		# Enable Requestor ID Checking of Received TLPs: When set to TRUE, the core will check the RID of the incoming Message TLPs tha
		#  are routed by ID, against the RIDs of its enabled Functions. Any messages with an RID mismatch are handled as Unsupported Re
		# uests and discarded within the core. When this bit is FALSE, the core will not check the RIDs of received Message TLPs and wi
		# l forward them to the AXISTEN interface. This attribute is applicable only when the core is configured as an Endpoint.
		#(OFFSET, MASK, VALUE)      (0XFCE88088, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88088 0x00000001 0x00000001
		# Register : AXISTEN_IF_MSIX_TO_RAM_PIPELINE @ 0XFCE8808C</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_MSIX_TO_RAM_PIPELINE_ATTR                            0x0

		# To MSIX RAM Pipeline : 00b - No pipeline, 01b - 1 stage, 10b - 2 stage, 11b - Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8808C, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE8808C 0x00000003 0x00000000
		# Register : AXISTEN_IF_MSIX_FROM_RAM_PIPELINE @ 0XFCE88090</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_MSIX_FROM_RAM_PIPELINE_ATTR                          0x0

		# From MSIX RAM Pipeline : 00b - No pipeline, 01b - 1 stage, 10b - 2 stage, 11b - Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88090, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88090 0x00000003 0x00000000
		# Register : AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE @ 0XFCE88094</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE_ATTR                      0

		# MSIX Internal Tables Enable : When this attribute is set to TRUE, the MSIX Table and Pending Bit Array (PBA) functions are im
		# lemented within the Block (in MSIX RAM). When it is set to FALSE, the MSIX Table and PBA are implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE88094, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88094 0x00000001 0x00000000
		# Register : AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE_PBA_OFFSET @ 0XFCE88098</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE_PBA_OFFSET_ATTR           0x10800

		# MSIX Internal Table PBA Base Address : Configurable Pending Bit Array start address for the external MSIX RAM. For PCIEA5 the
		# value 1_0800H must be written. This is a fixed value and should not be modified.
		#(OFFSET, MASK, VALUE)      (0XFCE88098, 0x0001FFFFU ,0x00010800U)  */
    mask_write 0XFCE88098 0x0001FFFF 0x00010800
		# Register : AXISTEN_IF_SIM_SHORT_CPL_TIMEOUT @ 0XFCE8809C</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_SIM_SHORT_CPL_TIMEOUT_ATTR                           0x0

		# AXI Stream Enhanced Interface Simulation Short Completion Timeout : When TRUE, Non Posted Completion Timeouts are scaled down
		# by a factor of ~1000.
		#(OFFSET, MASK, VALUE)      (0XFCE8809C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8809C 0x00000001 0x00000000
		# Register : AXISTEN_IF_CCIX_TX_REGISTERED_TREADY @ 0XFCE880A0</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CCIX_TX_REGISTERED_TREADY_ATTR                       0x0

		# AXI Stream CCIX Tx Registered tready :This attribute defines the flow control behavior on the CCIX Transaction Layer Transmit
		# Interface. When this attribute is set to 0b, the interface supports that standard AXI Stream tvalid-tready protocol. When set
		# to 1b, it supports a modified protocol where the response to ready is delayed by 2 cycles. FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE880A0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880A0 0x00000001 0x00000000
		# Register : AXISTEN_IF_CCIX_TX_CREDIT_LIMIT @ 0XFCE880A4</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CCIX_TX_CREDIT_LIMIT_ATTR                            0x8

		# AXI CCIX CXS TX Credits : This attribute defines the maximum number of flow control credits issued by the TL to CXS (Transact
		# on Layer Transmit) Interface. Its value is defined in terms of number of CXS interface beats. Informational attribute (has no
		#  effect on design).
		#(OFFSET, MASK, VALUE)      (0XFCE880A4, 0x0000003FU ,0x00000008U)  */
    mask_write 0XFCE880A4 0x0000003F 0x00000008
		# Register : AXISTEN_IF_CCIX_RX_CREDIT_LIMIT @ 0XFCE880A8</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CCIX_RX_CREDIT_LIMIT_ATTR                            0x3F

		# AXI CCIX CXS RX Credits : This attribute defines the maximum number of flow control credits issued by the CCIX transmit-side 
		# pplication. Its value controls the width of the credit counters in the TL block. Its minimum value is 2 and the maximum is 12
		# . Information attribute (has not effect on design).
		#(OFFSET, MASK, VALUE)      (0XFCE880A8, 0x000000FFU ,0x0000003FU)  */
    mask_write 0XFCE880A8 0x000000FF 0x0000003F
		# Register : AXISTEN_IF_CQ_POISON_DISCARD_DISABLE @ 0XFCE880AC</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CQ_POISON_DISCARD_DISABLE_ATTR                       0x0

		# AXISTEN_IF_CQ_POISON_DISCARD_DISABLE. When it is set to TRUE, poisoned TLPs are not discarded by AXIST CQ Interface, but pass
		# d to the Users with Descriptor Bit[79] set. When it is set to FALSE, no poisoned TLP is sent to the Users on AXIST CQ Interfa
		# e.
		#(OFFSET, MASK, VALUE)      (0XFCE880AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880AC 0x00000001 0x00000000
		# Register : AXISTEN_IF_EXTEND_CPL_TIMEOUT @ 0XFCE880B0</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_EXTEND_CPL_TIMEOUT_ATTR                              0x0

		# Extend Completion Timeouts : When [1:0] is set to 01, Completion Timeout range is extended and becomes 64ms to 4s. When [1:0]
		# is set to 10, Completion Timeout range is extended and becomes 128ms to 8s. Otherwise, the default timeout range is 16ms to 1
		# .
		#(OFFSET, MASK, VALUE)      (0XFCE880B0, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE880B0 0x00000003 0x00000000
		# Register : AXISTEN_IF_RQ_CC_REGISTERED_TREADY @ 0XFCE880B4</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_RQ_CC_REGISTERED_TREADY_ATTR                         0x0

		# Allows interface logic to use registered (CLB Flop) version of tready (for timing closure reasons) on RQ and CC interfaces (n
		# t AXIST spec compliant). 0=Disables registed tready mode of opration. tready on RQ and CC interfaces must be directly used to
		# control data source (AXIST spec compliant). Following Configurations are supported: Block A : x16 Gen4. AXI4ST WIDTH = 512b U
		# ER_CLK FREQ = 500 MHz (Deprecated, for PCIEA only, used AXISTEN_USER_SPARE[9]) Block B : x8 Gen4. AXI4ST WIDTH = 256b USER_CL
		#  FREQ = 500 MHz Block B : x4 Gen4. AXI4ST WIDTH = 128b USER_CLK FREQ = 500 MHz Block B : x2 Gen4. AXI4ST WIDTH = 64b USER_CLK
		# FREQ = 500 MHz
		#(OFFSET, MASK, VALUE)      (0XFCE880B4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880B4 0x00000001 0x00000000
		# Register : AXISTEN_IF_ENABLE_10B_TAGS @ 0XFCE880B8</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_ENABLE_10B_TAGS_ATTR                                 0

		# Enable Tag Scaling : When TRUE, enables 10b Tags width. When FALSE, Tag width is 8b/5b. UNUSED. Replaced by CAP attribute.
		#(OFFSET, MASK, VALUE)      (0XFCE880B8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880B8 0x00000001 0x00000000
		# Register : AXISTEN_IF_PASID_UR_CHECK_DISABLE @ 0XFCE880BC</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_PASID_UR_CHECK_DISABLE_ATTR                          0x0

		# Disable PASID UR Check : When TRUE, disables UR check on PASID for CQ.
		#(OFFSET, MASK, VALUE)      (0XFCE880BC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880BC 0x00000001 0x00000000
		# Register : AXISTEN_IF_CQ_EN_POISONED_MEM_WR @ 0XFCE880C0</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_IF_CQ_EN_POISONED_MEM_WR_ATTR                           0x0

		# AXI Stream Enable Presentation of Poisoned Memory Write on CQ interface : When this attribute is set to TRUE, all received Po
		# soned Memory Write TLPs targeted at any of the Functions will be presented on the CQ Interface (with the Poison bit set in th
		#  descriptor to indicate its status). When the attribute is set to FALSE, all received poisoned Memory Write transactions will
		# be discarded (not presented on the CQ interface). This setting has no effect on the reporting of Poisoned TLP errors, and set
		# ing it to TRUE, simply provides the received poisoned packet and payload to the user for debug/diagnostics purposes. FEATURE 
		# SE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE880C0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880C0 0x00000001 0x00000000
		# Register : AXISTEN_USER_SPARE @ 0XFCE880C4</p>

		# 
		# CPM5_PCIE1_ATTR_AXISTEN_USER_SPARE_ATTR                                         0x100

		# AXI Stream Spare Bits. Bit0: 1b: Disable Completion Table Poisoned Bit check (Error Code 1); 0b: Enable Bit1: 1b: Disable Com
		# letion Table Completion Status check (Error Code 2); 0b: Enable Bit2: 1b: Disable Completion Table Byte Count check (Error Co
		# e 3); 0b: Enable Bit3: 1b: Disable Completion Table RID/RC/Attr check (Error Code 4); 0b: Enable Bit4: 1b: Disable Completion
		# Table Low Address check (Error Code 5); 0b: Enable Bit5: 1b: Disable Completion Table Invalid Tag check (Error Code 6); 0b: E
		# able Bit6: 1b: Disable Completion Table Function-Level Reset check (Error Code 8); 0b: Enable Bit7: 1b: Disable Completion Ta
		# le Full check for Client Tag mode; 0b: Enable Bit8 :1b: Disable EDT-1002327 fix (in timeout state of state machine for back-t
		# -back Completion timeouts). 0b: Enable Bit9 :1b: Disable EDT-1002863 fix is for dealing with the appended request header in a
		# CA/UR Completion packet received on 64- or 128-bit AXI CC interface operating the address-aligned mode. Bit10 : 1b Disable ED
		# -1002868 fix, a discontinue indication sent in the header cycle of a packet on RQ or CC will be ignored when the interface wi
		# th is 64 or 128 bits Bit11 : (PCIEA only) 1b : Disable ECC error logging for Completion Table (2 RAMs) and Completion Timeout
		# RAM; 0b : Enable Bit12 : EDT-1003451. Setting it to 0b enables bypass of data being written to all the Completion Table RAMs 
		# o the read side when there is an address conflict. It also masks ECC errors from the RAMs on an address conflict. Setting it 
		# o 1b disables the bypass logic. Bit13 : EDT-1003457. Setting it to 0b makes the Completion timer state machine to start scann
		# ng the states of pending requests as soon as the reset is removed. Setting to 1b makes the state machine wait for one or more
		# pending active requests from RQ before starting the scan.
		#(OFFSET, MASK, VALUE)      (0XFCE880C4, 0x0000FFFFU ,0x00000100U)  */
    mask_write 0XFCE880C4 0x0000FFFF 0x00000100
		# Register : PM_ASPML0S_TIMEOUT @ 0XFCE880C8</p>

		# 
		# CPM5_PCIE1_ATTR_PM_ASPML0S_TIMEOUT_ATTR                                         0x1500

		# L0S Timeout Limit Register: Timeout value for transitioning to the L0S power state. If the transmit side has been idle for th
		# s interval, the core will transmit the idle sequence on the link and transition the state of the link to L0S. Contains the ti
		# eout value for transitioning to the L0S power state Setting it to 0 permanently disables the transition to the L0S power stat
		# . When CRM_CORE_CLK_FREQ == 00100b Time unit = 1ns, for all other CRM_CORE_CLK_FREQ Time unit = 2ns
		#(OFFSET, MASK, VALUE)      (0XFCE880C8, 0x0000FFFFU ,0x00001500U)  */
    mask_write 0XFCE880C8 0x0000FFFF 0x00001500
		# Register : PM_L1_REENTRY_DELAY @ 0XFCE880CC</p>

		# 
		# CPM5_PCIE1_ATTR_PM_L1_REENTRY_DELAY_ATTR                                        0xC350

		# L1 State Re-entry Delay Register: Time (in units of 4 ns) the core will wait before it re-enters the L1 state if its link par
		# ner transitions the link to L0 while all the Functions of the core are in D3 power state. The core will change the power stat
		#  of the link from L0 to L1 if no activity is detected both on the transmit and receive sides before this interval, while all 
		# unction are in D3 state and the link is in L0. Setting this register to 0 disables re-rentry to L1 state if the link partner 
		# eturns the link to L0 from L1 when all the Functions of the core are in D3 state. This register control only the re-entry to 
		# 1. This register control only the re-entry to L1. The initial transition to L1 always occurs when the all the Functions of th
		#  core are set to the D3 state. The defaults are nominal values that should not be changed. When CRM_CORE_CLK_FREQ == 00100b T
		# me unit = 1ns, for all other CRM_CORE_CLK_FREQ Time unit = 2ns
		#(OFFSET, MASK, VALUE)      (0XFCE880CC, 0xFFFFFFFFU ,0x0000C350U)  */
    mask_write 0XFCE880CC 0xFFFFFFFF 0x0000C350
		# Register : PM_ASPML1_ENTRY_DELAY @ 0XFCE880D0</p>

		# 
		# CPM5_PCIE1_ATTR_PM_ASPML1_ENTRY_DELAY_ATTR                                      0x7D0

		# ASPM L1 Entry Timeout Delay Register: Contains the timeout value for transitioning to the L1 power state. Setting it to 0 per
		# anently disables the transition to the L1 power state. The defaults are nominal values that should not be changed. When CRM_C
		# RE_CLK_FREQ == 00100b Time unit = 1ns, for all other CRM_CORE_CLK_FREQ Time unit = 2ns
		#(OFFSET, MASK, VALUE)      (0XFCE880D0, 0x000FFFFFU ,0x000007D0U)  */
    mask_write 0XFCE880D0 0x000FFFFF 0x000007D0
		# Register : PM_ENABLE_SLOT_POWER_CAPTURE @ 0XFCE880D4</p>

		# 
		# CPM5_PCIE1_ATTR_PM_ENABLE_SLOT_POWER_CAPTURE_ATTR                               0x1

		# When set to TRUE, and configured as Endpoint, the core will capture the Slot Power Limit Value and Slot Power Limit Scale par
		# meters from a Set_Slot_Power_Limit message received in the Device Capabilities Register. When this bit is 0, the capture is d
		# sabled.
		#(OFFSET, MASK, VALUE)      (0XFCE880D4, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE880D4 0x00000001 0x00000001
		# Register : PM_PME_TURNOFF_ACK_DELAY @ 0XFCE880D8</p>

		# 
		# CPM5_PCIE1_ATTR_PM_PME_TURNOFF_ACK_DELAY_ATTR                                   0x100

		# Time in microseconds between the core receiving a PME_Turn_Off message TLP and sending a PME_ TO_Ack response to it. This fie
		# d must be set to a non-zero value to enable the core to send the response. Setting this field to 0 suppresses the cores respo
		# se to the PME_Turn_Off message, so that the user may transmit the PME_TO_Ack message through the AXI interface.
		#(OFFSET, MASK, VALUE)      (0XFCE880D8, 0x0000FFFFU ,0x00000100U)  */
    mask_write 0XFCE880D8 0x0000FFFF 0x00000100
		# Register : PL_UPSTREAM_FACING @ 0XFCE880DC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_UPSTREAM_FACING_ATTR                                         1

		# Physical Layer Mode: TRUE specifies upstream-facing port. FALSE specifies downstream-facing port. This setting is propagated 
		# o all layers in the core.
		#(OFFSET, MASK, VALUE)      (0XFCE880DC, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE880DC 0x00000001 0x00000001
		# Register : PL_LINK_CAP_MAX_LINK_WIDTH @ 0XFCE880E0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LINK_CAP_MAX_LINK_WIDTH_ATTR                                 8

		# Maximum Link Width. Valid settings are: 000001b x1, 00010b x2, 00100b x4, 01000b x8, 10000b x16. All other encodings are rese
		# ved. This setting is propagaed to all layers in the design.
		#(OFFSET, MASK, VALUE)      (0XFCE880E0, 0x0000001FU ,0x00000008U)  */
    mask_write 0XFCE880E0 0x0000001F 0x00000008
		# Register : PL_LINK_CAP_MAX_LINK_SPEED @ 0XFCE880E4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LINK_CAP_MAX_LINK_SPEED_ATTR                                 16

		# Maximum Link Speed. Valid settings are: 00001b = Gen1, 00010b = Gen2, 00100b = Gen3, 01000b = Gen4, 10000b = Gen5. All other 
		# ncodings are reserved. This setting is propagated to all layers in the design.
		#(OFFSET, MASK, VALUE)      (0XFCE880E4, 0x0000001FU ,0x00000010U)  */
    mask_write 0XFCE880E4 0x0000001F 0x00000010
		# Register : PL_DISABLE_DC_BALANCE @ 0XFCE880E8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_DC_BALANCE_ATTR                                      0x0

		# Disable Gen3 or Gen4 DC Balance: Disabled transmission of special symbols when set to TRUE. Used for debug.
		#(OFFSET, MASK, VALUE)      (0XFCE880E8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880E8 0x00000001 0x00000000
		# Register : PL_DISABLE_EI_INFER_IN_L0 @ 0XFCE880EC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_EI_INFER_IN_L0_ATTR                                  1

		# When set to TRUE disables the inferring of electrical idle in the L0 state. Electrical idle is inferred when no flow control 
		# pdates and no SKP sequences are received within an interval of 128 us. This bit should not be set to TRUE during normal opera
		# ion, but may be used for in system debug.
		#(OFFSET, MASK, VALUE)      (0XFCE880EC, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE880EC 0x00000001 0x00000001
		# Register : PL_N_FTS @ 0XFCE880F0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_N_FTS_ATTR                                                   0xFF

		# Sets the number of FTS OS, advertised in the TS1 Ordered Sets. Value supported by Xilinx GTs is 255.
		#(OFFSET, MASK, VALUE)      (0XFCE880F0, 0x000000FFU ,0x000000FFU)  */
    mask_write 0XFCE880F0 0x000000FF 0x000000FF
		# Register : PL_DISABLE_UPCONFIG_CAPABLE @ 0XFCE880F4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_UPCONFIG_CAPABLE_ATTR                                0x0

		# This attribute disables the upconfigure capability when set to TRUE and enables the upconfigure capability when set to FALSE
		#(OFFSET, MASK, VALUE)      (0XFCE880F4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880F4 0x00000001 0x00000000
		# Register : PL_DISABLE_RETRAIN_ON_FRAMING_ERROR @ 0XFCE880F8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_RETRAIN_ON_FRAMING_ERROR_ATTR                        0x0

		# This attribute disables link retrain on any and all framing error at Gen3 or Gen4 speeds due to Rx framing error detected, be
		# avior when set to TRUE and enables it when set to FALSE. Used for debug.
		#(OFFSET, MASK, VALUE)      (0XFCE880F8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE880F8 0x00000001 0x00000000
		# Register : PL_DISABLE_RETRAIN_ON_SPECIFIC_FRAMING_ERROR @ 0XFCE880FC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_RETRAIN_ON_SPECIFIC_FRAMING_ERROR_ATTR               0x0

		# Disables link retrain for specific framing error reasons when set to 1b bit0 : Rx Link Bad Frame Start Error (BFS Error (Opti
		# nal by Spec)) bit1 : Rx FCRC ANDamp; Parity Error (FCRCP Error(Optional by Spec)) bit2 : Rx TLP Length Error (TLPL Error (Opt
		# onal by Spec)) bit3 : Rx Multiple STP Error (MSTP Error (Optional by Spec)) bit4 : Rx Out of Place EDB (OOPEDB Error (Optiona
		#  by Spec)) bit5 : Rx Ordered Set After EDS Error (OSAEDS Error (Optional by Spec)) bit6 : Rx Multiple SDP Error (MSDP Error (
		# ptional by Spec)) bit7 : Rx OS after SDS Error (RXOSASDS Error(Required by Spec)) bit8 : Rx Unknown Block Type Error (RXUNBT 
		# rror(Required by Spec)) bit9 : Rx OS without EDS Error (RXOSWOEDS Errror(Reqquired by Spec)) bit10 : Rx Data Block After EDS 
		# rror (DBAEDS Error(Required by Spec)) bits11-15 : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE880FC, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE880FC 0x0000FFFF 0x00000000
		# Register : PL_DISABLE_RETRAIN_ON_EB_ERROR @ 0XFCE88100</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_RETRAIN_ON_EB_ERROR_ATTR                             0x0

		# This attribute disables link retrain on error detection in the (elastic buffer in) the deskew buffer behavior when set to TRU
		#  and enables it when set to FALSE. Used for debug.
		#(OFFSET, MASK, VALUE)      (0XFCE88100, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88100 0x00000001 0x00000000
		# Register : PL_REPORT_ALL_PHY_ERRORS @ 0XFCE88104</p>

		# 
		# CPM5_PCIE1_ATTR_PL_REPORT_ALL_PHY_ERRORS_ATTR                                   0x0

		# Disables reporting for specific phy error reporting when set to 1b bit0 - Gen1/2 Disparity (pipe_rx\'7bn\'7d_status == 111b) 
		# it1 - Elastic Buf Undeflow (pipe_rx\'7bn\'7d_status == 110b) bit2 - Overflow (pipe_rx\'7bn\'7d_status == 101b) bit3 - Gen3 Di
		# parity (pipe_rx\'7bn\'7d_status == 100b) bits 4-7 - Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88104, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88104 0x000000FF 0x00000000
		# Register : PL_DISABLE_LFSR_UPDATE_ON_SKP @ 0XFCE88108</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_LFSR_UPDATE_ON_SKP_ATTR                              0x0

		# Setting this attribute to TRUE disables the update of the LFSRs in the Gen3 and Gen4 descramblers of the core, from the value
		#  received in SKP sequences.This bit should be set to TRUE during normal operation. Setting to FALSE is useful for testing. Bi
		# 0 if for Gen3 operation, Bit1 is for Gen4 operation. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE88108, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88108 0x00000003 0x00000000
		# Register : PL_LANE0_EQ_CONTROL_l @ 0XFCE8810C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE0_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#0 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion, 16-32 bit are for Gen4 operation and Upper 16b for Gen54 operation.Bits 7, 15, 23, 31, 39, 47 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8810C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8810C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE1_EQ_CONTROL_l @ 0XFCE88114</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE1_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#1 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88114, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88114 0xFFFFFFFF 0x77777777
		# Register : PL_LANE2_EQ_CONTROL_l @ 0XFCE8811C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE2_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#2 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8811C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8811C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE3_EQ_CONTROL_l @ 0XFCE88124</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE3_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#3 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88124, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88124 0xFFFFFFFF 0x77777777
		# Register : PL_LANE4_EQ_CONTROL_l @ 0XFCE8812C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE4_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#4 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8812C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8812C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE5_EQ_CONTROL_l @ 0XFCE88134</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE5_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#5 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation.Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88134, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88134 0xFFFFFFFF 0x77777777
		# Register : PL_LANE6_EQ_CONTROL_l @ 0XFCE8813C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE6_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#6 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8813C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8813C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE7_EQ_CONTROL_l @ 0XFCE88144</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE7_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#7 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88144, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88144 0xFFFFFFFF 0x77777777
		# Register : PL_LANE8_EQ_CONTROL_l @ 0XFCE8814C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE8_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#8 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8814C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8814C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE9_EQ_CONTROL_l @ 0XFCE88154</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE9_EQ_CONTROL_L_ATTR                                      0x77777777

		# Lane#9 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88154, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88154 0xFFFFFFFF 0x77777777
		# Register : PL_LANE10_EQ_CONTROL_l @ 0XFCE8815C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE10_EQ_CONTROL_L_ATTR                                     0x77777777

		# Lane#10 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8815C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8815C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE11_EQ_CONTROL_l @ 0XFCE88164</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE11_EQ_CONTROL_L_ATTR                                     0x77777777

		# Lane#11 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88164, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88164 0xFFFFFFFF 0x77777777
		# Register : PL_LANE12_EQ_CONTROL_l @ 0XFCE8816C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE12_EQ_CONTROL_L_ATTR                                     0x77777777

		# Lane#12 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8816C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8816C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE13_EQ_CONTROL_l @ 0XFCE88174</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE13_EQ_CONTROL_L_ATTR                                     0x77777777

		# Lane#13 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88174, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88174 0xFFFFFFFF 0x77777777
		# Register : PL_LANE14_EQ_CONTROL_l @ 0XFCE8817C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE14_EQ_CONTROL_L_ATTR                                     0x77777777

		# Lane#14 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8817C, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE8817C 0xFFFFFFFF 0x77777777
		# Register : PL_LANE15_EQ_CONTROL_l @ 0XFCE88184</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE15_EQ_CONTROL_L_ATTR                                     0x77777777

		# Lane#15 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88184, 0xFFFFFFFFU ,0x77777777U)  */
    mask_write 0XFCE88184 0xFFFFFFFF 0x77777777
		# Register : PL_LANE0_EQ_CONTROL_h @ 0XFCE88110</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE0_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#0 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion, 16-32 bit are for Gen4 operation and Upper 16b for Gen54 operation.Bits 7, 15, 23, 31, 39, 47 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88110, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88110 0x0000FFFF 0x00007777
		# Register : PL_LANE1_EQ_CONTROL_h @ 0XFCE88118</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE1_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#1 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88118, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88118 0x0000FFFF 0x00007777
		# Register : PL_LANE2_EQ_CONTROL_h @ 0XFCE88120</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE2_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#2 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88120, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88120 0x0000FFFF 0x00007777
		# Register : PL_LANE3_EQ_CONTROL_h @ 0XFCE88128</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE3_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#3 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88128, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88128 0x0000FFFF 0x00007777
		# Register : PL_LANE4_EQ_CONTROL_h @ 0XFCE88130</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE4_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#4 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88130, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88130 0x0000FFFF 0x00007777
		# Register : PL_LANE5_EQ_CONTROL_h @ 0XFCE88138</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE5_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#5 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation.Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88138, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88138 0x0000FFFF 0x00007777
		# Register : PL_LANE6_EQ_CONTROL_h @ 0XFCE88140</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE6_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#6 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88140, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88140 0x0000FFFF 0x00007777
		# Register : PL_LANE7_EQ_CONTROL_h @ 0XFCE88148</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE7_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#7 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88148, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88148 0x0000FFFF 0x00007777
		# Register : PL_LANE8_EQ_CONTROL_h @ 0XFCE88150</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE8_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#8 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88150, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88150 0x0000FFFF 0x00007777
		# Register : PL_LANE9_EQ_CONTROL_h @ 0XFCE88158</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE9_EQ_CONTROL_H_ATTR                                      0x00007777

		# Lane#9 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Second
		# ry PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver P
		# eset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 oper
		# tion and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88158, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88158 0x0000FFFF 0x00007777
		# Register : PL_LANE10_EQ_CONTROL_h @ 0XFCE88160</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE10_EQ_CONTROL_H_ATTR                                     0x00007777

		# Lane#10 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88160, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88160 0x0000FFFF 0x00007777
		# Register : PL_LANE11_EQ_CONTROL_h @ 0XFCE88168</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE11_EQ_CONTROL_H_ATTR                                     0x00007777

		# Lane#11 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88168, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88168 0x0000FFFF 0x00007777
		# Register : PL_LANE12_EQ_CONTROL_h @ 0XFCE88170</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE12_EQ_CONTROL_H_ATTR                                     0x00007777

		# Lane#12 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88170, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88170 0x0000FFFF 0x00007777
		# Register : PL_LANE13_EQ_CONTROL_h @ 0XFCE88178</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE13_EQ_CONTROL_H_ATTR                                     0x00007777

		# Lane#13 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88178, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88178 0x0000FFFF 0x00007777
		# Register : PL_LANE14_EQ_CONTROL_h @ 0XFCE88180</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE14_EQ_CONTROL_H_ATTR                                     0x00007777

		# Lane#14 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88180, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88180 0x0000FFFF 0x00007777
		# Register : PL_LANE15_EQ_CONTROL_h @ 0XFCE88188</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE15_EQ_CONTROL_H_ATTR                                     0x00007777

		# Lane#15 Equalization Control Register: Sets the appropriate lane specific entry in the Equalization Control Register in Secon
		# ary PCI Express Extended Capability Header. Bit[3:0] - Downstream Port Transmitter Preset, Bit[6:4] Downstream Port Receiver 
		# reset Hint, Bit[11:8] Upstream Port Transmitter Preset, Bit[14:12] Upstream Port Receiver Preset Hint. Lower 16b for Gen3 ope
		# ation and Upper 16b for Gen4 operation. Bits 7, 15, 23, 31 are unused.
		#(OFFSET, MASK, VALUE)      (0XFCE88188, 0x0000FFFFU ,0x00007777U)  */
    mask_write 0XFCE88188 0x0000FFFF 0x00007777
		# Register : PL_EQ_BYPASS_PHASE23 @ 0XFCE8818C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_BYPASS_PHASE23_ATTR                                       0x0

		# Bypass Equalization Phases 2 ANDamp; 3 : When TRUE, and if PL_UPSTREAM_FACING is FALSE, then Bypass optional EQ Phases. Bit0 
		# f for Gen3 operation, Bit1 is for Gen4 operation, Bit2 is for Gen5 opreation.
		#(OFFSET, MASK, VALUE)      (0XFCE8818C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8818C 0x00000007 0x00000000
		# Register : PL_EQ_ADAPT_ITER_COUNT @ 0XFCE88190</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_ADAPT_ITER_COUNT_ATTR                                     0x02

		# Link Partner Transmitter Adaptive Equilization Iteration Count: When in EQ Phase-2 for EP and Phase-3 for RP, this is the max
		# mum number of iterations of Adaptive Equilization attempted before exiting the Recovery.EQ phase. Supported range 2-31
		#(OFFSET, MASK, VALUE)      (0XFCE88190, 0x0000001FU ,0x00000002U)  */
    mask_write 0XFCE88190 0x0000001F 0x00000002
		# Register : PL_EQ_ADAPT_REJECT_RETRY_COUNT @ 0XFCE88194</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_ADAPT_REJECT_RETRY_COUNT_ATTR                             0x01

		# Equalization Adaptation Proposal Rejection Retry Count: Number of times new remote transmitter coefficients will be proposed 
		# fter being continuously rejected by the link partner, per lane. Supported range from 0-3. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE88194, 0x00000003U ,0x00000001U)  */
    mask_write 0XFCE88194 0x00000003 0x00000001
		# Register : PL_EQ_SHORT_ADAPT_PHASE @ 0XFCE88198</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_SHORT_ADAPT_PHASE_ATTR                                    0x0

		# Shorten the Receive Adaptation Phase: When set to TRUE, EQ Phase-2 for EP and Phase-3 for RP will return the received Tx Pres
		# t OR Coefficients as the the new proposed settings. Anticipate use for simulation speed-up and debug purposes.
		#(OFFSET, MASK, VALUE)      (0XFCE88198, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88198 0x00000001 0x00000000
		# Register : PL_EQ_ADAPT_DISABLE_COEFF_CHECK @ 0XFCE8819C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_ADAPT_DISABLE_COEFF_CHECK_ATTR                            0x0

		# Disable checks on Received Coefficients : When set to TRUE, received coefficient cheking is disabled (no rejection) during EQ
		# Phase-3 for EP and EQ Phase-2 for RP. Bit0 if for Gen3 operation, Bit1 is for Gen4 operation.
		#(OFFSET, MASK, VALUE)      (0XFCE8819C, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE8819C 0x00000003 0x00000000
		# Register : PL_EQ_ADAPT_DISABLE_PRESET_CHECK @ 0XFCE881A0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_ADAPT_DISABLE_PRESET_CHECK_ATTR                           0x0

		# Disable checks on Received Presets : When set to TRUE, received preset cheking is disabled (no rejection) during EQ Phase-3 f
		# r EP and EQ Phase-2 for RP. Bit0 if for Gen3 operation, Bit1 is for Gen4 operation.
		#(OFFSET, MASK, VALUE)      (0XFCE881A0, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE881A0 0x00000003 0x00000000
		# Register : PL_EQ_DEFAULT_TX_PRESET @ 0XFCE881A4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_DEFAULT_TX_PRESET_ATTR                                    0x444

		# Default Gen3/Gen4 Tx Preset : This value is used in transmitted TS1s by Endpoint in EQ Phase0,if no EQ TS2 are receied during
		# EQ Phase0. bits[3:0] are for Gen3 operation, bits[7:4] are for Gen4 operation, bit[11:8] are for Gen5 operation. Others bits 
		# re reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE881A4, 0x0000FFFFU ,0x00000444U)  */
    mask_write 0XFCE881A4 0x0000FFFF 0x00000444
		# Register : PL_EQ_DEFAULT_RX_PRESET_HINT @ 0XFCE881A8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_DEFAULT_RX_PRESET_HINT_ATTR                               0x33

		# Default Gen3/Gen4 Rx Preset Hint : This value is used in transmitted TS1s by Endpoint in EQ Phase0,if no EQ TS2 are receied d
		# ring EQ Phase0. bits[2:0] are for Gen3 operation, bits[5:3] are for Gen4 operation. Xilinx GTs do not require a Rx Preset Hin
		# , therefore, UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE881A8, 0x0000003FU ,0x00000033U)  */
    mask_write 0XFCE881A8 0x0000003F 0x00000033
		# Register : PL_EQ_DISABLE_MISMATCH_CHECK @ 0XFCE881AC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_DISABLE_MISMATCH_CHECK_ATTR                               0x1

		# Disable Mismatch Check in Recovery RecvrLock in Upstream Port : Disables Spec required check of Rx Preset in Upstream Port Re
		# overy ReceiverLock state. Set to 1'b1 when PL_EQ_RX_ADAPTATION_MODE[2] is set.
		#(OFFSET, MASK, VALUE)      (0XFCE881AC, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE881AC 0x00000001 0x00000001
		# Register : PL_EQ_RX_ADV_EQ_PER_DATA_RATE_ENABLE @ 0XFCE881B0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_RX_ADV_EQ_PER_DATA_RATE_ENABLE_ATTR                       0x1F

		# Rx Adaptation EQ Mode per Speed Enable: Bit = 0b, Adv EQ disabled. Bit = 1b, Adv EQ enabled, only when PL_EQ_RX_ADAPTATION_MO
		# E = 101b or 110b. bit[0] = 8 GT/s bit[1] = 16 GT/s bit[2] = 20 GT/s bit[3] = 25 GT/s bit[4] = 32 GT/s
		#(OFFSET, MASK, VALUE)      (0XFCE881B0, 0x0000001FU ,0x0000001FU)  */
    mask_write 0XFCE881B0 0x0000001F 0x0000001F
		# Register : PL_EQ_RX_ADAPTATION_MODE @ 0XFCE881B4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_RX_ADAPTATION_MODE_ATTR                                   0x5

		# Rx Adaptation EQ Mode: bit[0] - 1b = Enable Original constant single Preset (PL_EQ_DEFAULT_TX_PRESET) bit[1] - 1b = Enable Tw
		#  Presets, second Preset (PL_EQ_DEFAULT_TX_PRESET2) used on rejection of the first Preset (PL_EQ_DEFAULT_TX_PRESET). bit[2] - 
		# b = Enable Advanced EQ. When set need to set PL_EQ_DISABLE_MISMATCH_CHECK to 1'b1 Supported Options: 3'b000 or 3'b001 =ANDgt;
		# Normal EQ for all modes and data rates 3'b010 =ANDgt; Backup EQ for all modes and data rates 3'b101 =ANDgt; Adv + Normal EQ, 
		# ubject to data rates selected in PL_EQ_RX_ADV_EQ_PER_DATA_RATE_ENABLE (used with EDR mode) 3'b110 =ANDgt; Adv + Backup EQ, su
		# ject to data rates selected in PL_EQ_RX_ADV_EQ_PER_DATA_RATE_ENABLE (used with EDR mode) All others are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE881B4, 0x00000007U ,0x00000005U)  */
    mask_write 0XFCE881B4 0x00000007 0x00000005
		# Register : PL_EQ_RX_ADAPT_EQ_PHASE0 @ 0XFCE881B8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_RX_ADAPT_EQ_PHASE0_ATTR                                   0x0

		# Rx Adapt in EQ Phase0 State : Setting this to TRUE cause Xilinx GT specific Rx Adapt action in EQ Phase0. Bit0 if for Gen3 op
		# ration, Bit1 is for Gen4 operation. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE881B8, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE881B8 0x00000003 0x00000000
		# Register : PL_EQ_RX_ADAPT_EQ_PHASE1 @ 0XFCE881BC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_RX_ADAPT_EQ_PHASE1_ATTR                                   0x0

		# Rx Adapt in EQ Phase1 State : Setting this to TRUE cause Xilinx GT specific Rx Adapt action in EQ Phase1. Bit0 if for Gen3 op
		# ration, Bit1 is for Gen4 operation. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE881BC, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE881BC 0x00000003 0x00000000
		# Register : PL_Rx_L0s_EXIT_TO_RECOVERY @ 0XFCE881C0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_L0S_EXIT_TO_RECOVERY_ATTR                                 0x0

		# Exit for Recovery from Rx_L0s.FTS after NFTS amount of time in Rx_L0s.FTS. Applicable only for Gen3 and Gen4 speeds. Bit0 if 
		# or Gen3 operation, Bit1 is for Gen4 operation. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE881C0, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE881C0 0x00000003 0x00000000
		# Register : PL_EQ_TX_8G_EQ_TS2_ENABLE @ 0XFCE881C4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_8G_EQ_TS2_ENABLE_ATTR                                  1

		# Tx of (optional) 8GT EQ TS2s in Recovery.RcvrConfig when in Gen3 : Applicable for Upstrem Port only.
		#(OFFSET, MASK, VALUE)      (0XFCE881C4, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE881C4 0x00000001 0x00000001
		# Register : PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN4 @ 0XFCE881C8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN4_ATTR                    0x0

		# Downstream Port Auto Speed Change to Gen4 : When FALSE enable Downstream Port to autonomously change speed to Gen4. When TRUE
		# will require software to issue "link retrain". Usually set to TRUE only to overcome VIP modelling limitations.
		#(OFFSET, MASK, VALUE)      (0XFCE881C8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE881C8 0x00000001 0x00000000
		# Register : PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN3 @ 0XFCE881CC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN3_ATTR                    0x0

		# Downstream Port Auto Speed Change to Gen3 : When FALSE enable Downstream Port to autonomously change speed to Gen3. When TRUE
		# will require software to issue "link retrain". Usually set to TRUE only to overcome VIP modelling limitations.
		#(OFFSET, MASK, VALUE)      (0XFCE881CC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE881CC 0x00000001 0x00000000
		# Register : PL_DISABLE_AUTO_SPEED_CHANGE_TO_GEN2 @ 0XFCE881D0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_AUTO_SPEED_CHANGE_TO_GEN2_ATTR                       0x0

		# Downstream Port Auto Speed Change to Gen2 : When FALSE enable Downstream Port to autonomously change speed to Gen2. When TRUE
		# will require software to issue "link retrain". Usually set to TRUE only to overcome VIP modelling limitations.
		#(OFFSET, MASK, VALUE)      (0XFCE881D0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE881D0 0x00000001 0x00000000
		# Register : PL_DESKEW_ON_SKIP_IN_GEN12 @ 0XFCE881D4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DESKEW_ON_SKIP_IN_GEN12_ATTR                                 0x0

		# Deskew using SKP OS in Gen1 and Gen2 speed: When TRUE enable deskew using SKP OS. When FALSE disable this feature. Re-Used th
		# s Rx L0s Deskew ECO (SI# 948565). FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE881D4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE881D4 0x00000001 0x00000000
		# Register : PL_INFER_EI_DISABLE_REC_RC @ 0XFCE881D8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_INFER_EI_DISABLE_REC_RC_ATTR                                 0x0

		# Infer EI Disable in REC RC. Used for debug.
		#(OFFSET, MASK, VALUE)      (0XFCE881D8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE881D8 0x00000001 0x00000000
		# Register : PL_INFER_EI_DISABLE_REC_SPD @ 0XFCE881DC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_INFER_EI_DISABLE_REC_SPD_ATTR                                0x0

		# Infer EI Disable in REC SPEED. Used for debug.
		#(OFFSET, MASK, VALUE)      (0XFCE881DC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE881DC 0x00000001 0x00000000
		# Register : PL_INFER_EI_DISABLE_LPBK_ACTIVE @ 0XFCE881E0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_INFER_EI_DISABLE_LPBK_ACTIVE_ATTR                            0x01

		# Infer EI Disable in Loopback Active. Used for debug.
		#(OFFSET, MASK, VALUE)      (0XFCE881E0, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE881E0 0x00000001 0x00000001
		# Register : PL_RX_ADAPT_TIMER_RRL_GEN3 @ 0XFCE881E4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_RRL_GEN3_ATTR                                 0x0

		# Xilinx GT implementation Specific Rx Adaptation Timeout state before Recovery.RcvrLock when current speed is Gen3 (in milli s
		# conds). Value of 0h disables the timer. Allowed values are 0h to Fh. Must be set to 0 when PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_T
		#  is FALSE
		#(OFFSET, MASK, VALUE)      (0XFCE881E4, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE881E4 0x0000000F 0x00000000
		# Register : PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_TS @ 0XFCE881E8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_TS_ATTR                        0x0

		# When in Xilinx GT implementation Specific Rx Adaptation Timeout state before Recovery.RcvrLock at Gen3 speed, Clobber Tx Trai
		# ing Sets. Bit0 if for Gen3 operation, Bit1 is for Gen4 operation, Bit2 is for Gen5 operation.
		#(OFFSET, MASK, VALUE)      (0XFCE881E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE881E8 0x00000007 0x00000000
		# Register : PL_RX_ADAPT_TIMER_RRL_GEN4 @ 0XFCE881EC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_RRL_GEN4_ATTR                                 0x0

		# Xilinx GT implementation Specific Rx Adaptation Timeout before Recovery.RcvrLock when current speed is Gen4 (in milli seconds
		# . Value of 0h disables the timer. Allowed values are 0h to Fh. Must be set to 0 when PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_TS is F
		# LSE
		#(OFFSET, MASK, VALUE)      (0XFCE881EC, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE881EC 0x0000000F 0x00000000
		# Register : PL_RX_ADAPT_TIMER_CLWS_GEN3 @ 0XFCE881F0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_CLWS_GEN3_ATTR                                0x0

		# Xilinx GT implementation Specific Rx Adaptation Timeout state before Configuration.LinkWidthStart when current speed is Gen3 
		# in milli seconds). Value of 0h disables the timer. Allowed values are 0h to Fh
		#(OFFSET, MASK, VALUE)      (0XFCE881F0, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE881F0 0x0000000F 0x00000000
		# Register : PL_RX_ADAPT_TIMER_CLWS_CLOBBER_TX_TS @ 0XFCE881F4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_CLWS_CLOBBER_TX_TS_ATTR                       0x0

		# When in Xilinx GT implementation Specific Rx Adaptation Timeout state before Configuration.LinkWidthStart at Gen3 speed, Clob
		# er Tx Training Sets. Bit0 if for Gen3 operation, Bit1 is for Gen4 operation, Bit2 is for Gen5 operation.
		#(OFFSET, MASK, VALUE)      (0XFCE881F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE881F4 0x00000007 0x00000000
		# Register : PL_RX_ADAPT_TIMER_CLWS_GEN4 @ 0XFCE881F8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_CLWS_GEN4_ATTR                                0x0

		# Xilinx GT implementation Specific Rx Adaptation Timeout state before Configuration.LinkWidthStart when current speed is Gen4 
		# in milli seconds). Value of 0h disables the timer. Allowed values are 0h to Fh
		#(OFFSET, MASK, VALUE)      (0XFCE881F8, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE881F8 0x0000000F 0x00000000
		# Register : PL_DISABLE_LANE_REVERSAL @ 0XFCE881FC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_LANE_REVERSAL_ATTR                                   0

		# Disables Lane Reversal Feature
		#(OFFSET, MASK, VALUE)      (0XFCE881FC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE881FC 0x00000001 0x00000000
		# Register : PL_CFG_STATE_ROBUSTNESS_ENABLE @ 0XFCE88200</p>

		# 
		# CPM5_PCIE1_ATTR_PL_CFG_STATE_ROBUSTNESS_ENABLE_ATTR                             0x01

		# Enables Increased Rx TS Count 2 to 4 in Cfg LTSSM States. TRUE by default. FALSE for Compliance testing. Used for debug.
		#(OFFSET, MASK, VALUE)      (0XFCE88200, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88200 0x00000001 0x00000001
		# Register : PL_REDO_EQ_SOURCE_SELECT @ 0XFCE88204</p>

		# 
		# CPM5_PCIE1_ATTR_PL_REDO_EQ_SOURCE_SELECT_ATTR                                   0x01

		# Applicable to Downsteam Port. Selects source of redo equalization Rec.RcvrLock. When TRUE, selects spec register as source. I
		#  FALSE selects pl_gen34_redo_equalization as the source. FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE88204, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88204 0x00000001 0x00000001
		# Register : PL_DEEMPH_SOURCE_SELECT @ 0XFCE88208</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DEEMPH_SOURCE_SELECT_ATTR                                    0x0

		# Applicable to Upstream ANDamp; Downsteam Ports. When FALSE : Selects value of Selectable De-emphasis (bit4, symbol4) recived 
		# n TS2s in Recovery.RecvrCfg. When TRUE : if PL_UPSTREAM_FACING is TRUE, selects value presented on pl_gen2_upstream_prefer_de
		# mph, else, if PL_UPSTREAM_FACING is FALSE, then selects value of Selectable De-emphasis (bit6) of Link Control 2 Register. Wh
		# n PL_UPSTREAM_FACING is TRUE, default should be FALSE. When PL_UPSTREAM_FACING is FALSE default should be TRUE
		#(OFFSET, MASK, VALUE)      (0XFCE88208, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88208 0x00000001 0x00000000
		# Register : PL_EXIT_LOOPBACK_ON_EI_ENTRY @ 0XFCE8820C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EXIT_LOOPBACK_ON_EI_ENTRY_ATTR                               0x01

		# Exit Lookback if Entry to EI Detected on Rx When FALSE used to optionally disable exit from Loopback Active when Electrical I
		# le is detected on Rx.
		#(OFFSET, MASK, VALUE)      (0XFCE8820C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8820C 0x00000001 0x00000001
		# Register : PL_QUIESCE_GUARANTEE_DISABLE @ 0XFCE88210</p>

		# 
		# CPM5_PCIE1_ATTR_PL_QUIESCE_GUARANTEE_DISABLE_ATTR                               0x01

		# Disable Quiesce Guarantee When TRUE disables assertion of Quiesce Guarantee (bit 6) on transmitted TS2s in Recovery.RcvrCfg (
		# ogether with Request Equalization (bit 7) and Equalization Request Data Rate (bit 5) (in Gen4 speed)) when current speed is G
		# n3 or Gen4. When FALSE Quiesce Guarantee (bit 6) is set, together with Request Equalization (bit 7) and Equalization Request 
		# ata Rate (bit 5) (in Gen4 speed.
		#(OFFSET, MASK, VALUE)      (0XFCE88210, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88210 0x00000001 0x00000001
		# Register : PL_SRIS_ENABLE @ 0XFCE88214</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SRIS_ENABLE_ATTR                                             0x0

		# Enable Separate Reference Clock Indepenent SSC (SRIS) Mode When TRUE enabled SRIS functionality in the Physical Layer. Normal
		# operation when FALSE.
		#(OFFSET, MASK, VALUE)      (0XFCE88214, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88214 0x00000001 0x00000000
		# Register : PL_SRIS_SKPOS_GEN_SPD_VEC @ 0XFCE88218</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SRIS_SKPOS_GEN_SPD_VEC_ATTR                                  0x0

		# Link Capabilities 2 Register :: Lower SKP OS Generation Supported Speeds Vector Used by PL when SRIS is enabled.
		#(OFFSET, MASK, VALUE)      (0XFCE88218, 0x0000007FU ,0x00000000U)  */
    mask_write 0XFCE88218 0x0000007F 0x00000000
		# Register : PL_SRIS_SKPOS_REC_SPD_VEC @ 0XFCE8821C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SRIS_SKPOS_REC_SPD_VEC_ATTR                                  0x0

		# Link Capabilities 2 Register :: Lower SKP OS Reception Supported Speeds Vector Used by PL when SRIS is enabled.
		#(OFFSET, MASK, VALUE)      (0XFCE8821C, 0x0000007FU ,0x00000000U)  */
    mask_write 0XFCE8821C 0x0000007F 0x00000000
		# Register : PL_RETIMER_PRESENCE_DETECTION_SUPPORTED @ 0XFCE88220</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RETIMER_PRESENCE_DETECTION_SUPPORTED_ATTR                    0x1

		# Link Capabilities 2 Register :: Retimer Presence Detect Supported. Enabled when TRUE.
		#(OFFSET, MASK, VALUE)      (0XFCE88220, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88220 0x00000001 0x00000001
		# Register : PL_TWO_RETIMER_PRESENCE_DETECTION_SUPPORTED @ 0XFCE88224</p>

		# 
		# CPM5_PCIE1_ATTR_PL_TWO_RETIMER_PRESENCE_DETECTION_SUPPORTED_ATTR                0x1

		# Link Capabilities 2 Register :: Two Retimer Presence Detect Supported. Enabled when TRUE.
		#(OFFSET, MASK, VALUE)      (0XFCE88224, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88224 0x00000001 0x00000001
		# Register : PL_CTRL_SKP_GEN_ENABLE @ 0XFCE88228</p>

		# 
		# CPM5_PCIE1_ATTR_PL_CTRL_SKP_GEN_ENABLE_ATTR                                     0x01

		# Control SKP OS Genertation Enable :
		#(OFFSET, MASK, VALUE)      (0XFCE88228, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88228 0x00000001 0x00000001
		# Register : PL_CTRL_SKP_PARITY_AND_CRC_CHECK_DISABLE @ 0XFCE8822C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_CTRL_SKP_PARITY_AND_CRC_CHECK_DISABLE_ATTR                   0x01

		# Control SKP OS Parity and CRC Check Disable :
		#(OFFSET, MASK, VALUE)      (0XFCE8822C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8822C 0x00000001 0x00000001
		# Register : PL_SIM_FAST_LINK_TRAINING @ 0XFCE88230</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SIM_FAST_LINK_TRAINING_ATTR                                  0x0

		# Fast Link Training for Simulations : Link training time is shortened to facilitate fast simulation of the design. Enabling th
		# s bit has the following effects: 1. When PL_SIM_FAST_LINK_TRAINING[0] = 1b, all 1 ms, 2 ms, 12 ms, 24 ms, 32 ms and 48 ms tim
		# out intervals in the LTSSM are shortened by a factor of 512. 2. When PL_SIM_FAST_LINK_TRAINING[1] = 1b, in the Polling.Active
		#  Recovery.RecLock (Ext Sync Enabled) state of the LTSSM, only 16 training sequences are required to be transmitted (Instead o
		#  1024) to make the transition to the Configuration state. Must be set to 00b for non-simulation use.
		#(OFFSET, MASK, VALUE)      (0XFCE88230, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88230 0x00000003 0x00000000
		# Register : PL_EQ_TX_PRECUR_0 @ 0XFCE88234</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_0_ATTR                                          0x0

		# Tx Pre-Cursor for Preset0 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88234, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88234 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_1 @ 0XFCE88238</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_1_ATTR                                          0x0

		# Tx Pre-Cursor for Preset1 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88238, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88238 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_2 @ 0XFCE8823C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_2_ATTR                                          0x0

		# Tx Pre-Cursor for Preset2 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE8823C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8823C 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_3 @ 0XFCE88240</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_3_ATTR                                          0x0

		# Tx Pre-Cursor for Preset3 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88240, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88240 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_4 @ 0XFCE88244</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_4_ATTR                                          0x0

		# Tx Pre-Cursor for Preset4 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88244, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88244 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_5 @ 0XFCE88248</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_5_ATTR                                          0x8

		# Tx Pre-Cursor for Preset5 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88248, 0x0000003FU ,0x00000008U)  */
    mask_write 0XFCE88248 0x0000003F 0x00000008
		# Register : PL_EQ_TX_PRECUR_6 @ 0XFCE8824C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_6_ATTR                                          0xA

		# Tx Pre-Cursor for Preset6 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE8824C, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE8824C 0x0000003F 0x0000000A
		# Register : PL_EQ_TX_PRECUR_7 @ 0XFCE88250</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_7_ATTR                                          0x6

		# Tx Pre-Cursor for Preset7 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88250, 0x0000003FU ,0x00000006U)  */
    mask_write 0XFCE88250 0x0000003F 0x00000006
		# Register : PL_EQ_TX_PRECUR_8 @ 0XFCE88254</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_8_ATTR                                          0x8

		# Tx Pre-Cursor for Preset8 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88254, 0x0000003FU ,0x00000008U)  */
    mask_write 0XFCE88254 0x0000003F 0x00000008
		# Register : PL_EQ_TX_PRECUR_9 @ 0XFCE88258</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_9_ATTR                                          0xC

		# Tx Pre-Cursor for Preset9 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88258, 0x0000003FU ,0x0000000CU)  */
    mask_write 0XFCE88258 0x0000003F 0x0000000C
		# Register : PL_EQ_TX_PRECUR_A @ 0XFCE8825C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_A_ATTR                                          0x0

		# Tx Pre-Cursor for PresetA (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE8825C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8825C 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_B @ 0XFCE88260</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_B_ATTR                                          0x0

		# Tx Pre-Cursor for PresetB (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88260, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88260 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_C @ 0XFCE88264</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_C_ATTR                                          0x0

		# Tx Pre-Cursor for PresetC (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88264, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88264 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_D @ 0XFCE88268</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_D_ATTR                                          0x0

		# Tx Pre-Cursor for PresetD (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88268, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88268 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_E @ 0XFCE8826C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_E_ATTR                                          0x0

		# Tx Pre-Cursor for PresetE (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE8826C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8826C 0x0000003F 0x00000000
		# Register : PL_EQ_TX_PRECUR_F @ 0XFCE88270</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_PRECUR_F_ATTR                                          0x0

		# Tx Pre-Cursor for PresetF (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88270, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88270 0x0000003F 0x00000000
		# Register : PL_EQ_TX_POSTCUR_0 @ 0XFCE88274</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_0_ATTR                                         0x14

		# Tx POST-Cursor for Preset0 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88274, 0x0000003FU ,0x00000014U)  */
    mask_write 0XFCE88274 0x0000003F 0x00000014
		# Register : PL_EQ_TX_POSTCUR_1 @ 0XFCE88278</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_1_ATTR                                         0xC

		# Tx POST-Cursor for Preset1 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88278, 0x0000003FU ,0x0000000CU)  */
    mask_write 0XFCE88278 0x0000003F 0x0000000C
		# Register : PL_EQ_TX_POSTCUR_2 @ 0XFCE8827C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_2_ATTR                                         0x10

		# Tx POST-Cursor for Preset2 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE8827C, 0x0000003FU ,0x00000010U)  */
    mask_write 0XFCE8827C 0x0000003F 0x00000010
		# Register : PL_EQ_TX_POSTCUR_3 @ 0XFCE88280</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_3_ATTR                                         0xA

		# Tx POST-Cursor for Preset3 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88280, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE88280 0x0000003F 0x0000000A
		# Register : PL_EQ_TX_POSTCUR_4 @ 0XFCE88284</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_4_ATTR                                         0x0

		# Tx POST-Cursor for Preset4 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88284, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88284 0x0000003F 0x00000000
		# Register : PL_EQ_TX_POSTCUR_5 @ 0XFCE88288</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_5_ATTR                                         0x0

		# Tx POST-Cursor for Preset5 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88288, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88288 0x0000003F 0x00000000
		# Register : PL_EQ_TX_POSTCUR_6 @ 0XFCE8828C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_6_ATTR                                         0x0

		# Tx POST-Cursor for Preset6 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE8828C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8828C 0x0000003F 0x00000000
		# Register : PL_EQ_TX_POSTCUR_7 @ 0XFCE88290</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_7_ATTR                                         0x10

		# Tx POST-Cursor for Preset7 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88290, 0x0000003FU ,0x00000010U)  */
    mask_write 0XFCE88290 0x0000003F 0x00000010
		# Register : PL_EQ_TX_POSTCUR_8 @ 0XFCE88294</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_8_ATTR                                         0xA

		# Tx POST-Cursor for Preset8 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88294, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE88294 0x0000003F 0x0000000A
		# Register : PL_EQ_TX_POSTCUR_9 @ 0XFCE88298</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_9_ATTR                                         0x0

		# Tx POST-Cursor for Preset9 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE88298, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88298 0x0000003F 0x00000000
		# Register : PL_EQ_TX_POSTCUR_A @ 0XFCE8829C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_A_ATTR                                         0x1A

		# Tx POST-Cursor for PresetA (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE8829C, 0x0000003FU ,0x0000001AU)  */
    mask_write 0XFCE8829C 0x0000003F 0x0000001A
		# Register : PL_EQ_TX_POSTCUR_B @ 0XFCE882A0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_B_ATTR                                         0x1A

		# Tx POST-Cursor for PresetB (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882A0, 0x0000003FU ,0x0000001AU)  */
    mask_write 0XFCE882A0 0x0000003F 0x0000001A
		# Register : PL_EQ_TX_POSTCUR_C @ 0XFCE882A4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_C_ATTR                                         0x1A

		# Tx POST-Cursor for PresetC (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882A4, 0x0000003FU ,0x0000001AU)  */
    mask_write 0XFCE882A4 0x0000003F 0x0000001A
		# Register : PL_EQ_TX_POSTCUR_D @ 0XFCE882A8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_D_ATTR                                         0x1A

		# Tx POST-Cursor for PresetD (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882A8, 0x0000003FU ,0x0000001AU)  */
    mask_write 0XFCE882A8 0x0000003F 0x0000001A
		# Register : PL_EQ_TX_POSTCUR_E @ 0XFCE882AC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_E_ATTR                                         0x1A

		# Tx POST-Cursor for PresetE (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882AC, 0x0000003FU ,0x0000001AU)  */
    mask_write 0XFCE882AC 0x0000003F 0x0000001A
		# Register : PL_EQ_TX_POSTCUR_F @ 0XFCE882B0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_POSTCUR_F_ATTR                                         0x1A

		# Tx POST-Cursor for PresetF (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882B0, 0x0000003FU ,0x0000001AU)  */
    mask_write 0XFCE882B0 0x0000003F 0x0000001A
		# Register : PL_EQ_TX_MAINCUR_0 @ 0XFCE882B4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_0_ATTR                                         0x3C

		# Tx MAIN-Cursor for Preset0 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882B4, 0x0000007FU ,0x0000003CU)  */
    mask_write 0XFCE882B4 0x0000007F 0x0000003C
		# Register : PL_EQ_TX_MAINCUR_1 @ 0XFCE882B8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_1_ATTR                                         0x44

		# Tx MAIN-Cursor for Preset1 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882B8, 0x0000007FU ,0x00000044U)  */
    mask_write 0XFCE882B8 0x0000007F 0x00000044
		# Register : PL_EQ_TX_MAINCUR_2 @ 0XFCE882BC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_2_ATTR                                         0x40

		# Tx MAIN-Cursor for Preset2 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882BC, 0x0000007FU ,0x00000040U)  */
    mask_write 0XFCE882BC 0x0000007F 0x00000040
		# Register : PL_EQ_TX_MAINCUR_3 @ 0XFCE882C0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_3_ATTR                                         0x46

		# Tx MAIN-Cursor for Preset3 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882C0, 0x0000007FU ,0x00000046U)  */
    mask_write 0XFCE882C0 0x0000007F 0x00000046
		# Register : PL_EQ_TX_MAINCUR_4 @ 0XFCE882C4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_4_ATTR                                         0x50

		# Tx MAIN-Cursor for Preset4 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882C4, 0x0000007FU ,0x00000050U)  */
    mask_write 0XFCE882C4 0x0000007F 0x00000050
		# Register : PL_EQ_TX_MAINCUR_5 @ 0XFCE882C8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_5_ATTR                                         0x48

		# Tx MAIN-Cursor for Preset5 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882C8, 0x0000007FU ,0x00000048U)  */
    mask_write 0XFCE882C8 0x0000007F 0x00000048
		# Register : PL_EQ_TX_MAINCUR_6 @ 0XFCE882CC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_6_ATTR                                         0x46

		# Tx MAIN-Cursor for Preset6 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882CC, 0x0000007FU ,0x00000046U)  */
    mask_write 0XFCE882CC 0x0000007F 0x00000046
		# Register : PL_EQ_TX_MAINCUR_7 @ 0XFCE882D0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_7_ATTR                                         0x3A

		# Tx MAIN-Cursor for Preset7 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882D0, 0x0000007FU ,0x0000003AU)  */
    mask_write 0XFCE882D0 0x0000007F 0x0000003A
		# Register : PL_EQ_TX_MAINCUR_8 @ 0XFCE882D4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_8_ATTR                                         0x3E

		# Tx MAIN-Cursor for Preset8 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882D4, 0x0000007FU ,0x0000003EU)  */
    mask_write 0XFCE882D4 0x0000007F 0x0000003E
		# Register : PL_EQ_TX_MAINCUR_9 @ 0XFCE882D8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_9_ATTR                                         0x44

		# Tx MAIN-Cursor for Preset9 (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882D8, 0x0000007FU ,0x00000044U)  */
    mask_write 0XFCE882D8 0x0000007F 0x00000044
		# Register : PL_EQ_TX_MAINCUR_A @ 0XFCE882DC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_A_ATTR                                         0x36

		# Tx MAIN-Cursor for PresetA (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882DC, 0x0000007FU ,0x00000036U)  */
    mask_write 0XFCE882DC 0x0000007F 0x00000036
		# Register : PL_EQ_TX_MAINCUR_B @ 0XFCE882E0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_B_ATTR                                         0x36

		# Tx MAIN-Cursor for PresetB (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882E0, 0x0000007FU ,0x00000036U)  */
    mask_write 0XFCE882E0 0x0000007F 0x00000036
		# Register : PL_EQ_TX_MAINCUR_C @ 0XFCE882E4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_C_ATTR                                         0x36

		# Tx MAIN-Cursor for PresetC (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882E4, 0x0000007FU ,0x00000036U)  */
    mask_write 0XFCE882E4 0x0000007F 0x00000036
		# Register : PL_EQ_TX_MAINCUR_D @ 0XFCE882E8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_D_ATTR                                         0x36

		# Tx MAIN-Cursor for PresetD (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882E8, 0x0000007FU ,0x00000036U)  */
    mask_write 0XFCE882E8 0x0000007F 0x00000036
		# Register : PL_EQ_TX_MAINCUR_E @ 0XFCE882EC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_E_ATTR                                         0x36

		# Tx MAIN-Cursor for PresetE (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882EC, 0x0000007FU ,0x00000036U)  */
    mask_write 0XFCE882EC 0x0000007F 0x00000036
		# Register : PL_EQ_TX_MAINCUR_F @ 0XFCE882F0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_TX_MAINCUR_F_ATTR                                         0x36

		# Tx MAIN-Cursor for PresetF (Unused in PCIEB5)
		#(OFFSET, MASK, VALUE)      (0XFCE882F0, 0x0000007FU ,0x00000036U)  */
    mask_write 0XFCE882F0 0x0000007F 0x00000036
		# Register : PL_EQ_LF @ 0XFCE882F4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_LF_ATTR                                                   0xC

		# Xilinx GT EQ Low Frequency
		#(OFFSET, MASK, VALUE)      (0XFCE882F4, 0x0000003FU ,0x0000000CU)  */
    mask_write 0XFCE882F4 0x0000003F 0x0000000C
		# Register : PL_EQ_FS @ 0XFCE882F8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_FS_ATTR                                                   0x28

		# Xilinx GT EQ Full Swing
		#(OFFSET, MASK, VALUE)      (0XFCE882F8, 0x0000003FU ,0x00000028U)  */
    mask_write 0XFCE882F8 0x0000003F 0x00000028
		# Register : PL_EQ_LP_TXPRESET @ 0XFCE882FC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_LP_TXPRESET_ATTR                                          0x77777

		# Preset Proposal to be sent to link partner during Phase2/3 that is Xilinx implemementation specific (Main). [3:0] Gen3, [7:4]
		# Gen4, [11:8] 20 GT/s, [15:12] 25 GT/s, [16:19] 32 GT/s
		#(OFFSET, MASK, VALUE)      (0XFCE882FC, 0x000FFFFFU ,0x00077777U)  */
    mask_write 0XFCE882FC 0x000FFFFF 0x00077777
		# Register : PL_EQ_LP_TXPRESET2 @ 0XFCE88300</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_LP_TXPRESET2_ATTR                                         0x77777

		# Preset Proposal to be sent to link partner during Phase2/3 that is Xilinx implemementation specific (Backup). [3:0] Gen3, [7:
		# ] Gen4, [11:8] 20 GT/s, [15:12] 25 GT/s, [16:19] 32 GT/s
		#(OFFSET, MASK, VALUE)      (0XFCE88300, 0x000FFFFFU ,0x00077777U)  */
    mask_write 0XFCE88300 0x000FFFFF 0x00077777
		# Register : PL_EQ_RX_ADAPT_TIMER @ 0XFCE88304</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_RX_ADAPT_TIMER_ATTR                                       0x1E8480

		# Rx Adapatation Time in Phase 2/3. This is the wait time for GTY Rx to adapt during Phase 2/3.
		#(OFFSET, MASK, VALUE)      (0XFCE88304, 0x003FFFFFU ,0x001E8480U)  */
    mask_write 0XFCE88304 0x003FFFFF 0x001E8480
		# Register : PL_EQ_RX_ADAPT_TIMER_SIM @ 0XFCE88308</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_RX_ADAPT_TIMER_SIM_ATTR                                   0x1

		# Rx Adapatation Time in Phase 2/3 in simulation. This is the wait time for GTY Rx to adapt during Phase 2/3.. FEATURE USE DEPR
		# CATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE88308, 0x003FFFFFU ,0x00000001U)  */
    mask_write 0XFCE88308 0x003FFFFF 0x00000001
		# Register : PL_EQ_RX_ADAPT_SIM_ENABLE @ 0XFCE8830C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_RX_ADAPT_SIM_ENABLE_ATTR                                  0x0

		# Enables using PL_EQ_RX_ADAPT_TIMER_SIM when TRUE, else PL_EQ_RX_ADAPT_TIMER is used.. FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE8830C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8830C 0x00000001 0x00000000
		# Register : PL_SELF_TRAIN @ 0XFCE88310</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SELF_TRAIN_ATTR                                              0x0

		# Enabled Loopback Self Link Up when PL_UPSTREAM_FACING = FALSE. To be used by GOQ for Production Test.
		#(OFFSET, MASK, VALUE)      (0XFCE88310, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88310 0x00000001 0x00000000
		# Register : PL_ENABLE_CCIX_EDR @ 0XFCE88314</p>

		# 
		# CPM5_PCIE1_ATTR_PL_ENABLE_CCIX_EDR_ATTR                                         0x0

		# Enable CCIX EDR mode.
		#(OFFSET, MASK, VALUE)      (0XFCE88314, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88314 0x00000001 0x00000000
		# Register : PL_ENABLE_CCIX_EDR_REACH_MODE @ 0XFCE88318</p>

		# 
		# CPM5_PCIE1_ATTR_PL_ENABLE_CCIX_EDR_REACH_MODE_ATTR                              0x0

		# Enable CCIX EDR Reach Mode.PL_ENABLE_CCIX_EDR must be TRUE 00b = Short Reach Capable only 01b = Long Reach Capable only 10b =
		# Short ANDamp; Long Reach Capable 11b = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88318, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88318 0x00000003 0x00000000
		# Register : PL_RECALIBRATION_NEEDED_ON_ESM_RATE01_PROGRAMMING_CHANGE @ 0XFCE8831C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RECALIBRATION_NEEDED_ON_ESM_RATE01_PROGRAMMING_CHANGE_ATTR   0x0

		# Physical requires recalibration if ESM Control Register, ESM Data Rate0/1 fields are changed. If TRUE, else not re-calibratio
		#  is needed if FALSE.
		#(OFFSET, MASK, VALUE)      (0XFCE8831C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8831C 0x00000001 0x00000000
		# Register : PL_CCIX_ESM_CALIBRATION_TIMEOUT @ 0XFCE88320</p>

		# 
		# CPM5_PCIE1_ATTR_PL_CCIX_ESM_CALIBRATION_TIMEOUT_ATTR                            0x0

		# CCIX ESM Calibration Timeout. PL_ENABLE_CCIX_EDR must be TRUE. 000b = 10 us 001b = 50 us 010b = 100 us 011b = 500 us 100b = 1
		# ms 101b = 5 ms 110b = 10 ms 111b = 50 ms
		#(OFFSET, MASK, VALUE)      (0XFCE88320, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88320 0x00000007 0x00000000
		# Register : PL_CCIX_ESM_EXTENDED_EQ_TIMEOUT @ 0XFCE88324</p>

		# 
		# CPM5_PCIE1_ATTR_PL_CCIX_ESM_EXTENDED_EQ_TIMEOUT_ATTR                            0x0

		# ESM Extended Equalization Phase2/3 Timeout. Used to initialize Upstream Port's ESM Control Register, ESM Extended Equalizatio
		#  Phase2 Timeout field or Downstream Port's ESM Control Register, ESM Extended Equalization Phase3 Timeout field. Initialized 
		# ields are used to control Phase2 Timeout to Recovery.Speed (Upstream Port) or Phase3 Timeout to Recovery.Speed (Downstream Po
		# t). PL_ENABLE_CCIX_EDR must be TRUE. 000b = 24 ms / 32 ms 001b = 50 ms / 58 ms 010b = 100 ms / 108 ms 011b = 200 ms / 208 ms 
		# 00b = 400 ms / 408 ms 101b = 600 ms / 608 ms Other Encodings = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88324, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88324 0x00000007 0x00000000
		# Register : PL_LANE0_CCIX_EDR_EQ_CONTROL @ 0XFCE88328</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE0_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#0 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE88328, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE88328 0xFFFFFFFF 0x00003F00
		# Register : PL_LANE1_CCIX_EDR_EQ_CONTROL @ 0XFCE8832C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE1_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#1 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE8832C, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE8832C 0xFFFFFFFF 0x00003F00
		# Register : PL_LANE2_CCIX_EDR_EQ_CONTROL @ 0XFCE88330</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE2_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#2 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE88330, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE88330 0xFFFFFFFF 0x00003F00
		# Register : PL_LANE3_CCIX_EDR_EQ_CONTROL @ 0XFCE88334</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE3_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#3 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE88334, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE88334 0xFFFFFFFF 0x00003F00
		# Register : PL_LANE4_CCIX_EDR_EQ_CONTROL @ 0XFCE88338</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE4_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#4 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE88338, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE88338 0xFFFFFFFF 0x00003F00
		# Register : PL_LANE5_CCIX_EDR_EQ_CONTROL @ 0XFCE8833C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE5_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#5 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE8833C, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE8833C 0xFFFFFFFF 0x00003F00
		# Register : PL_LANE6_CCIX_EDR_EQ_CONTROL @ 0XFCE88340</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE6_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#6 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE88340, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE88340 0xFFFFFFFF 0x00003F00
		# Register : PL_LANE7_CCIX_EDR_EQ_CONTROL @ 0XFCE88344</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LANE7_CCIX_EDR_EQ_CONTROL_ATTR                               0x00003F00

		# Lane#7 CCIX EDR Equalization Control Register: Bit[3:0] - Downstream Port 20G Transmitter Preset Bit[11:8] - Upstream Port 20
		#  Transmitter Preset Bit[19:16] - Downstream Port 25G Transmitter Preset Bit[27:24] - Upstream Port 25G Transmitter Preset
		#(OFFSET, MASK, VALUE)      (0XFCE88344, 0xFFFFFFFFU ,0x00003F00U)  */
    mask_write 0XFCE88344 0xFFFFFFFF 0x00003F00
		# Register : PL_EQ_DEFAULT_CCIX_EDR_TX_PRESET @ 0XFCE88348</p>

		# 
		# CPM5_PCIE1_ATTR_PL_EQ_DEFAULT_CCIX_EDR_TX_PRESET_ATTR                           0x44

		# Default CCIX EDR Tx Preset : This value is used in transmitted TS1s by Endpoint in EQ Phase0,if no EQ TS2 are receied during 
		# Q Phase0. bits[3:0] are for 20G operation, bits[7:4] are for 25G operation. Others bits are reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE88348, 0x0000FFFFU ,0x00000044U)  */
    mask_write 0XFCE88348 0x0000FFFF 0x00000044
		# Register : PL_ESM0_CTRL_SKP_ENABLE @ 0XFCE8834C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_ESM0_CTRL_SKP_ENABLE_ATTR                                    0x0

		# Used to enable CTRL skip in ESM0 speed when ESM) is set to 16GT/s
		#(OFFSET, MASK, VALUE)      (0XFCE8834C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8834C 0x00000001 0x00000000
		# Register : PL_DISABLE_PASID @ 0XFCE88350</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_PASID_ATTR                                           0x0

		# Used to disable passid pre-fix insertion in PL
		#(OFFSET, MASK, VALUE)      (0XFCE88350, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88350 0x00000001 0x00000000
		# Register : PL_ENABLE_OVERRIDE_MARGIN_MAX_NUM_LANES @ 0XFCE88354</p>

		# 
		# CPM5_PCIE1_ATTR_PL_ENABLE_OVERRIDE_MARGIN_MAX_NUM_LANES_ATTR                    0x0

		# Used to override the max lane count for lane margin response
		#(OFFSET, MASK, VALUE)      (0XFCE88354, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88354 0x00000001 0x00000000
		# Register : PL_MARGIN_MAX_NUM_LANES @ 0XFCE88358</p>

		# 
		# CPM5_PCIE1_ATTR_PL_MARGIN_MAX_NUM_LANES_ATTR                                    0xF

		# Value used by lane margin command when override max num lanes attribute is set
		#(OFFSET, MASK, VALUE)      (0XFCE88358, 0x0000001FU ,0x0000000FU)  */
    mask_write 0XFCE88358 0x0000001F 0x0000000F
		# Register : PL_DISABLE_WAIT_FOR_BROADCAST_RESP @ 0XFCE8835C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_WAIT_FOR_BROADCAST_RESP_ATTR                         0x0

		# Disable the wait for response from all the Tx's and Rx's on a lane margin broadcast cmd
		#(OFFSET, MASK, VALUE)      (0XFCE8835C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8835C 0x00000001 0x00000000
		# Register : PL_DISABLE_LANE_MARGIN_STATUS_RST @ 0XFCE88360</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_LANE_MARGIN_STATUS_RST_ATTR                          0x0

		# Chicken bit to reset lane margin status register
		#(OFFSET, MASK, VALUE)      (0XFCE88360, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88360 0x00000001 0x00000000
		# Register : PL_DISABLE_EXIT_LM_GT_WORKAROUND @ 0XFCE88364</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_EXIT_LM_GT_WORKAROUND_ATTR                           0x0

		# Chicken bit to exit step margin when seeing multiple GT responses for the previous cmd
		#(OFFSET, MASK, VALUE)      (0XFCE88364, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88364 0x00000001 0x00000000
		# Register : PL_TS_CLOBBER_TS_IDENTIFIER @ 0XFCE88368</p>

		# 
		# CPM5_PCIE1_ATTR_PL_TS_CLOBBER_TS_IDENTIFIER_ATTR                                0x0

		# Set to 0: TS OS will be clobber by modifiing parity bit, Set:1 TS OS will be clobber by changing 'h4A to 'h1A in rcvr_recover
		# lock_pre and cfg_lws_pre
		#(OFFSET, MASK, VALUE)      (0XFCE88368, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88368 0x00000001 0x00000000
		# Register : PL_LPBK_SLAVE_ENABLE_INFEREI_AT_SPEEDS @ 0XFCE8836C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_LPBK_SLAVE_ENABLE_INFEREI_AT_SPEEDS_ATTR                     0x0

		# Enable infer EI exit for loopbacl slave at all speed(set:0 infer EI is only supported at gen1 speed)
		#(OFFSET, MASK, VALUE)      (0XFCE8836C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8836C 0x00000001 0x00000000
		# Register : PL_ENABLE_GEN4_EIEOS @ 0XFCE88370</p>

		# 
		# CPM5_PCIE1_ATTR_PL_ENABLE_GEN4_EIEOS_ATTR                                       0x1

		# Enable Gen4 EIEOS
		#(OFFSET, MASK, VALUE)      (0XFCE88370, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88370 0x00000001 0x00000001
		# Register : PL_POLARITY_FIX @ 0XFCE88374</p>

		# 
		# CPM5_PCIE1_ATTR_PL_POLARITY_FIX_ATTR                                            0x0

		# Set:0 polarity will get reset when ltssm state goes to Detect, else set:1 polarity does not get reset even on entry to detect
		# state
		#(OFFSET, MASK, VALUE)      (0XFCE88374, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88374 0x00000001 0x00000000
		# Register : PL_CLWA_CNT_RST @ 0XFCE88378</p>

		# 
		# CPM5_PCIE1_ATTR_PL_CLWA_CNT_RST_ATTR                                            0x0

		# Chicken bit to reset the number of clock cycles need to wait in clwa when doing up/down config
		#(OFFSET, MASK, VALUE)      (0XFCE88378, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88378 0x00000001 0x00000000
		# Register : PL_SKP_ANY_LANE_L0S @ 0XFCE8837C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SKP_ANY_LANE_L0S_ATTR                                        0x1

		# When Set:1h L0s exit condition waits for skip OS found on any lane instead of all the lanes receiving SKP OS
		#(OFFSET, MASK, VALUE)      (0XFCE8837C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8837C 0x00000001 0x00000001
		# Register : PL_DET_QUIET_ENABLE_PHYSTATUS_CHECK_ALL_LANES @ 0XFCE88380</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DET_QUIET_ENABLE_PHYSTATUS_CHECK_ALL_LANES_ATTR              0x0

		# Enables waiting for phy_status rcv on all lanes after EI break when in detect quite
		#(OFFSET, MASK, VALUE)      (0XFCE88380, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88380 0x00000001 0x00000000
		# Register : PL_RCVLCK_DISABLE_ADD_DEFAULT_LNK_AUTO_BW @ 0XFCE88384</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RCVLCK_DISABLE_ADD_DEFAULT_LNK_AUTO_BW_ATTR                  0x0

		# Chicken bit, reset the link auto BW change bit to zero on entry to rcvr_recoverylock
		#(OFFSET, MASK, VALUE)      (0XFCE88384, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88384 0x00000001 0x00000000
		# Register : PL_RCVLCK_DISABLE_USP_EXTN_SYNC_CHECK @ 0XFCE88388</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RCVLCK_DISABLE_USP_EXTN_SYNC_CHECK_ATTR                      0x0

		# Chicken bit, enables EXTN sync check for USP when set:0
		#(OFFSET, MASK, VALUE)      (0XFCE88388, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88388 0x00000001 0x00000000
		# Register : PL_DISABLE_TRANS_DETECT_FROM_RECSP_1MS @ 0XFCE8838C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_TRANS_DETECT_FROM_RECSP_1MS_ATTR                     0x1

		# Chicken bit, Set:0 diasbles transition to detect from rec_speed on 1ms TO fo not rcv phy_status
		#(OFFSET, MASK, VALUE)      (0XFCE8838C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8838C 0x00000001 0x00000001
		# Register : PL_DISABLE_EDR_DATA_RATE_CHANGE @ 0XFCE88390</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_EDR_DATA_RATE_CHANGE_ATTR                            0x0

		# Chicken bit, Set:0 diasbles edr data rate change
		#(OFFSET, MASK, VALUE)      (0XFCE88390, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88390 0x00000001 0x00000000
		# Register : PL_OVERRIDE_DEEMPH_LVL_TOZERO_PL2CFG @ 0XFCE88394</p>

		# 
		# CPM5_PCIE1_ATTR_PL_OVERRIDE_DEEMPH_LVL_TOZERO_PL2CFG_ATTR                       0x0

		# Chicken bit, Used to override the de-emph value send to cfg
		#(OFFSET, MASK, VALUE)      (0XFCE88394, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88394 0x00000001 0x00000000
		# Register : PL_SYNC_SELECT_ON_START_BLK @ 0XFCE88398</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SYNC_SELECT_ON_START_BLK_ATTR                                0x0

		# Chicken bit, Set:0 laches and holds to sync header value only when start block is set and ignore all other times
		#(OFFSET, MASK, VALUE)      (0XFCE88398, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88398 0x00000001 0x00000000
		# Register : PL_ENABLE_EQBRIDGE_8G_EQTS2_FIX @ 0XFCE8839C</p>

		# 
		# CPM5_PCIE1_ATTR_PL_ENABLE_EQBRIDGE_8G_EQTS2_FIX_ATTR                            1

		# Set:1 enabled EQ bridge to apply and transmit 8GT EQ TS2 value proposed by EP/USP when DUT is RP/DSP
		#(OFFSET, MASK, VALUE)      (0XFCE8839C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8839C 0x00000001 0x00000001
		# Register : PL_GEN5_EIEOS_PATTERN_DISABLE @ 0XFCE883A0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_GEN5_EIEOS_PATTERN_DISABLE_ATTR                              0x0

		# When set:1b disables the Gen5 EIEOS patterns being send and sends Gen3 EIEOS pattern
		#(OFFSET, MASK, VALUE)      (0XFCE883A0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE883A0 0x00000001 0x00000000
		# Register : PL_GEN5_SEND_TWO_EIEOS_PATTERN_DISABLE @ 0XFCE883A4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_GEN5_SEND_TWO_EIEOS_PATTERN_DISABLE_ATTR                     0x0

		# When set:1b DUT will only one EIEOS patterns at Gen5 and not twoback to back EIEOS
		#(OFFSET, MASK, VALUE)      (0XFCE883A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE883A4 0x00000001 0x00000000
		# Register : PL_GEN5_SKP_OS_PATTERN_DISABLE @ 0XFCE883A8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_GEN5_SKP_OS_PATTERN_DISABLE_ATTR                             0x0

		# When set:1b disables the Gen5 SKP patterns being send and sends Gen3 SKP pattern
		#(OFFSET, MASK, VALUE)      (0XFCE883A8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE883A8 0x00000001 0x00000000
		# Register : PL_GEN5_SDS_OS_PATTERN_DISABLE @ 0XFCE883AC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_GEN5_SDS_OS_PATTERN_DISABLE_ATTR                             0x0

		# When set:1b disables the Gen5 SDS patterns being send and sends Gen3 SDS pattern
		#(OFFSET, MASK, VALUE)      (0XFCE883AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE883AC 0x00000001 0x00000000
		# Register : PL_GEN5_PRE_CODING_ENABLE @ 0XFCE883B0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_GEN5_PRE_CODING_ENABLE_ATTR                                  0x0

		# When set:1b DUT request link patner to enable pre-coding on it TX and de-coding will be enable on DUT RX
		#(OFFSET, MASK, VALUE)      (0XFCE883B0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE883B0 0x00000001 0x00000000
		# Register : PL_GEN5_EQ_IN_LB_DISABLE @ 0XFCE883B4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_GEN5_EQ_IN_LB_DISABLE_ATTR                                   0x1

		# When set:1b disables EQ in LB
		#(OFFSET, MASK, VALUE)      (0XFCE883B4, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE883B4 0x00000001 0x00000001
		# Register : PL_GEN5_EQ_SUPPORTED_MODES @ 0XFCE883B8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_GEN5_EQ_SUPPORTED_MODES_ATTR                                 0x1

		# EQ Supported Modes. Allowed values are 3'b001(Full EQ): Where DUT only supports complete EQ going from G1/G2-ANDgt;G3-ANDgt;G
		# -ANDgt;G5 3'b011(Bypass EQ to Gen5): Where DUT supports both full EQ and Bypass EQ Gen5 (Done does EQ at Gen5) All other enco
		# ings are reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE883B8, 0x00000007U ,0x00000001U)  */
    mask_write 0XFCE883B8 0x00000007 0x00000001
		# Register : PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN5 @ 0XFCE883BC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN5_ATTR                    0x0

		# Downstream Port Auto Speed Change to Gen5 : When FALSE enable Downstream Port to autonomously change speed to Gen4. When TRUE
		# will require software to issue "link retrain". Usually set to TRUE only to overcome VIP modelling limitations.
		#(OFFSET, MASK, VALUE)      (0XFCE883BC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE883BC 0x00000001 0x00000000
		# Register : PL_RX_ADAPT_TIMER_RRL_GEN5 @ 0XFCE883C0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_RRL_GEN5_ATTR                                 0x0

		# Xilinx GT implementation Specific Rx Adaptation Timeout before Recovery.RcvrLock when current speed is Gen5 (in milli seconds
		# . Value of 0h disables the timer. Allowed values are 0h to Fh. Must be set to 0 when PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_TS is F
		# LSE
		#(OFFSET, MASK, VALUE)      (0XFCE883C0, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE883C0 0x0000000F 0x00000000
		# Register : PL_RX_ADAPT_TIMER_CLWS_GEN5 @ 0XFCE883C4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_RX_ADAPT_TIMER_CLWS_GEN5_ATTR                                0x0

		# Xilinx GT implementation Specific Rx Adaptation Timeout state before Configuration.LinkWidthStart when current speed is Gen5 
		# in milli seconds). Value of 0h disables the timer. Allowed values are 0h to Fh
		#(OFFSET, MASK, VALUE)      (0XFCE883C4, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE883C4 0x0000000F 0x00000000
		# Register : PL_SKP_END_DISABLE @ 0XFCE883C8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SKP_END_DISABLE_ATTR                                         0x7

		# Skip end feature disable Bit zero in 16 bit mode, bit one in 32bit mode and bit two in 64 bit mode
		#(OFFSET, MASK, VALUE)      (0XFCE883C8, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE883C8 0x00000007 0x00000007
		# Register : PL_DEBUG_RS_TO_DISABLE @ 0XFCE883CC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DEBUG_RS_TO_DISABLE_ATTR                                     0x1

		# New in B5 used to disdable timeout in Rec Speed. Everest VNC feedback.
		#(OFFSET, MASK, VALUE)      (0XFCE883CC, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE883CC 0x00000001 0x00000001
		# Register : PL_DEBUG_DISABLE_EQ @ 0XFCE883D0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_DEBUG_DISABLE_EQ_ATTR                                        0x0

		# New in B5 used to disdable EQ at all speeds 4'h1-Gen3, 4'h2 Gen4, 4'h4-Gen5
		#(OFFSET, MASK, VALUE)      (0XFCE883D0, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE883D0 0x0000000F 0x00000000
		# Register : PL_USER_SPARE @ 0XFCE883D4</p>

		# 
		# CPM5_PCIE1_ATTR_PL_USER_SPARE_ATTR                                              0x0

		# PL User Spare: bit 0: chicken bit for lpbk at gen5 going to EQ to look only at line under test to send modified compliance pa
		# terns on other lanes. bit 1: chicken bit used to to in to2det ltssm state. bit 2: used to disable reset for txeq and rxeq mod
		# les in rec_speed state bit 3: disable gen1 to gen5 direct speed change send eq ts2 fix bit 4: used to disable insertion od sk
		# s when back to back tlp are being send bit 5: enable skp end only fix, when no skp identifiers are send by GT bit 6: disable 
		# re-coding rst fix when the speed change to not to Gen5 and eqts2 are rcvd bit 7: disable re-timer ext fix in ph2 when connect
		# d component sends the needed default presets bit 8,9: disable eieos and skp back to back transmition when data valid is dropp
		# d. bit 10: Disable Gen1 to Gen5 direct fix bit 11-14: disable com align module for bit 11: Disable detect rst, bit 12: disabl
		#  eios/infer rst, bit 13: disable rec_sped exit rst, bit 14: L1 exit rst bit 15: disable eq entry on no elbc for config
		#(OFFSET, MASK, VALUE)      (0XFCE883D4, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE883D4 0x0000FFFF 0x00000000
		# Register : PL_USER_SPARE2 @ 0XFCE883D8</p>

		# 
		# CPM5_PCIE1_ATTR_PL_USER_SPARE2_ATTR                                             0x0

		# PL User Spare2: Bit 0: Enable skp end of Gen3_1000 mode. Bit 1: Disable config fix for Gen1 to Gen5 direct speed change Bit 2
		#  EDT-1002571 Disable Gen5 compliance pattern EIEOS fix Bit [6-3]: EDT-1002884 Used to disable RP speed change failure fix. Bi
		#  3: Gen2, Bit 4: Gen3, Bit 5: Gen4, Bit 6: Gen5 Bit 7: EDT- 1003265 disable auto speed change in RP when achieved highest spe
		# d Bit 8: EDT-1003406 Disable loopback enatry any lane when Gen5 lane under test is used for per lane Bit 9: EDT-1003752 Disab
		# e loopback PH23 bypass fix
		#(OFFSET, MASK, VALUE)      (0XFCE883D8, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE883D8 0x0000FFFF 0x00000000
		# Register : PL_USER_SPARE3 @ 0XFCE883DC</p>

		# 
		# CPM5_PCIE1_ATTR_PL_USER_SPARE3_ATTR                                             0x0

		# PL User Spare3:
		#(OFFSET, MASK, VALUE)      (0XFCE883DC, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE883DC 0xFFFFFFFF 0x00000000
		# Register : PL_SPARE @ 0XFCE883E0</p>

		# 
		# CPM5_PCIE1_ATTR_PL_SPARE_ATTR                                                   0x0

		# PL Spare :
		#(OFFSET, MASK, VALUE)      (0XFCE883E0, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE883E0 0xFFFFFFFF 0x00000000
		# Register : GT_EQ_PRE_CUR0 @ 0XFCE883E4</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR0_ATTR                                             0x0

		# Map to pre cursor 0
		#(OFFSET, MASK, VALUE)      (0XFCE883E4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE883E4 0x0000001F 0x00000000
		# Register : GT_EQ_PRE_CUR1 @ 0XFCE883E8</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR1_ATTR                                             0x1

		# Map to pre cursor 1
		#(OFFSET, MASK, VALUE)      (0XFCE883E8, 0x0000001FU ,0x00000001U)  */
    mask_write 0XFCE883E8 0x0000001F 0x00000001
		# Register : GT_EQ_PRE_CUR2 @ 0XFCE883EC</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR2_ATTR                                             0x2

		# Map to pre cursor 2
		#(OFFSET, MASK, VALUE)      (0XFCE883EC, 0x0000001FU ,0x00000002U)  */
    mask_write 0XFCE883EC 0x0000001F 0x00000002
		# Register : GT_EQ_PRE_CUR3 @ 0XFCE883F0</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR3_ATTR                                             0x3

		# Map to pre cursor 3
		#(OFFSET, MASK, VALUE)      (0XFCE883F0, 0x0000001FU ,0x00000003U)  */
    mask_write 0XFCE883F0 0x0000001F 0x00000003
		# Register : GT_EQ_PRE_CUR4 @ 0XFCE883F4</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR4_ATTR                                             0x4

		# Map to pre cursor 4
		#(OFFSET, MASK, VALUE)      (0XFCE883F4, 0x0000001FU ,0x00000004U)  */
    mask_write 0XFCE883F4 0x0000001F 0x00000004
		# Register : GT_EQ_PRE_CUR5 @ 0XFCE883F8</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR5_ATTR                                             0x5

		# Map to pre cursor 5
		#(OFFSET, MASK, VALUE)      (0XFCE883F8, 0x0000001FU ,0x00000005U)  */
    mask_write 0XFCE883F8 0x0000001F 0x00000005
		# Register : GT_EQ_PRE_CUR6 @ 0XFCE883FC</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR6_ATTR                                             0x6

		# Map to pre cursor 6
		#(OFFSET, MASK, VALUE)      (0XFCE883FC, 0x0000001FU ,0x00000006U)  */
    mask_write 0XFCE883FC 0x0000001F 0x00000006
		# Register : GT_EQ_PRE_CUR7 @ 0XFCE88400</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR7_ATTR                                             0x7

		# Map to pre cursor 7
		#(OFFSET, MASK, VALUE)      (0XFCE88400, 0x0000001FU ,0x00000007U)  */
    mask_write 0XFCE88400 0x0000001F 0x00000007
		# Register : GT_EQ_PRE_CUR8 @ 0XFCE88404</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR8_ATTR                                             0x8

		# Map to pre cursor 8
		#(OFFSET, MASK, VALUE)      (0XFCE88404, 0x0000001FU ,0x00000008U)  */
    mask_write 0XFCE88404 0x0000001F 0x00000008
		# Register : GT_EQ_PRE_CUR9 @ 0XFCE88408</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR9_ATTR                                             0x9

		# Map to pre cursor 9
		#(OFFSET, MASK, VALUE)      (0XFCE88408, 0x0000001FU ,0x00000009U)  */
    mask_write 0XFCE88408 0x0000001F 0x00000009
		# Register : GT_EQ_PRE_CUR10 @ 0XFCE8840C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR10_ATTR                                            0xA

		# Map to pre cursor 10
		#(OFFSET, MASK, VALUE)      (0XFCE8840C, 0x0000001FU ,0x0000000AU)  */
    mask_write 0XFCE8840C 0x0000001F 0x0000000A
		# Register : GT_EQ_PRE_CUR11 @ 0XFCE88410</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR11_ATTR                                            0xB

		# Map to pre cursor 11
		#(OFFSET, MASK, VALUE)      (0XFCE88410, 0x0000001FU ,0x0000000BU)  */
    mask_write 0XFCE88410 0x0000001F 0x0000000B
		# Register : GT_EQ_PRE_CUR12 @ 0XFCE88414</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR12_ATTR                                            0xC

		# Map to pre cursor 12
		#(OFFSET, MASK, VALUE)      (0XFCE88414, 0x0000001FU ,0x0000000CU)  */
    mask_write 0XFCE88414 0x0000001F 0x0000000C
		# Register : GT_EQ_PRE_CUR13 @ 0XFCE88418</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR13_ATTR                                            0xD

		# Map to pre cursor 13
		#(OFFSET, MASK, VALUE)      (0XFCE88418, 0x0000001FU ,0x0000000DU)  */
    mask_write 0XFCE88418 0x0000001F 0x0000000D
		# Register : GT_EQ_PRE_CUR14 @ 0XFCE8841C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR14_ATTR                                            0xE

		# Map to pre cursor 14
		#(OFFSET, MASK, VALUE)      (0XFCE8841C, 0x0000001FU ,0x0000000EU)  */
    mask_write 0XFCE8841C 0x0000001F 0x0000000E
		# Register : GT_EQ_PRE_CUR15 @ 0XFCE88420</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR15_ATTR                                            0xF

		# Map to pre cursor 15
		#(OFFSET, MASK, VALUE)      (0XFCE88420, 0x0000001FU ,0x0000000FU)  */
    mask_write 0XFCE88420 0x0000001F 0x0000000F
		# Register : GT_EQ_PRE_CUR16 @ 0XFCE88424</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR16_ATTR                                            0x10

		# Map to pre cursor 16
		#(OFFSET, MASK, VALUE)      (0XFCE88424, 0x0000001FU ,0x00000010U)  */
    mask_write 0XFCE88424 0x0000001F 0x00000010
		# Register : GT_EQ_PRE_CUR17 @ 0XFCE88428</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR17_ATTR                                            0x11

		# Map to pre cursor 17
		#(OFFSET, MASK, VALUE)      (0XFCE88428, 0x0000001FU ,0x00000011U)  */
    mask_write 0XFCE88428 0x0000001F 0x00000011
		# Register : GT_EQ_PRE_CUR18 @ 0XFCE8842C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR18_ATTR                                            0x12

		# Map to pre cursor 18
		#(OFFSET, MASK, VALUE)      (0XFCE8842C, 0x0000001FU ,0x00000012U)  */
    mask_write 0XFCE8842C 0x0000001F 0x00000012
		# Register : GT_EQ_PRE_CUR19 @ 0XFCE88430</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR19_ATTR                                            0x13

		# Map to pre cursor 19
		#(OFFSET, MASK, VALUE)      (0XFCE88430, 0x0000001FU ,0x00000013U)  */
    mask_write 0XFCE88430 0x0000001F 0x00000013
		# Register : GT_EQ_PRE_CUR20 @ 0XFCE88434</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR20_ATTR                                            0x14

		# Map to pre cursor 20
		#(OFFSET, MASK, VALUE)      (0XFCE88434, 0x0000001FU ,0x00000014U)  */
    mask_write 0XFCE88434 0x0000001F 0x00000014
		# Register : GT_EQ_PRE_CUR21 @ 0XFCE88438</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR21_ATTR                                            0x15

		# Map to pre cursor 21
		#(OFFSET, MASK, VALUE)      (0XFCE88438, 0x0000001FU ,0x00000015U)  */
    mask_write 0XFCE88438 0x0000001F 0x00000015
		# Register : GT_EQ_PRE_CUR22 @ 0XFCE8843C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR22_ATTR                                            0x16

		# Map to pre cursor 22
		#(OFFSET, MASK, VALUE)      (0XFCE8843C, 0x0000001FU ,0x00000016U)  */
    mask_write 0XFCE8843C 0x0000001F 0x00000016
		# Register : GT_EQ_PRE_CUR23 @ 0XFCE88440</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR23_ATTR                                            0x17

		# Map to pre cursor 23
		#(OFFSET, MASK, VALUE)      (0XFCE88440, 0x0000001FU ,0x00000017U)  */
    mask_write 0XFCE88440 0x0000001F 0x00000017
		# Register : GT_EQ_PRE_CUR24 @ 0XFCE88444</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR24_ATTR                                            0x18

		# Map to pre cursor 24
		#(OFFSET, MASK, VALUE)      (0XFCE88444, 0x0000001FU ,0x00000018U)  */
    mask_write 0XFCE88444 0x0000001F 0x00000018
		# Register : GT_EQ_PRE_CUR25 @ 0XFCE88448</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR25_ATTR                                            0x19

		# Map to pre cursor 25
		#(OFFSET, MASK, VALUE)      (0XFCE88448, 0x0000001FU ,0x00000019U)  */
    mask_write 0XFCE88448 0x0000001F 0x00000019
		# Register : GT_EQ_PRE_CUR26 @ 0XFCE8844C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR26_ATTR                                            0x1A

		# Map to pre cursor 26
		#(OFFSET, MASK, VALUE)      (0XFCE8844C, 0x0000001FU ,0x0000001AU)  */
    mask_write 0XFCE8844C 0x0000001F 0x0000001A
		# Register : GT_EQ_PRE_CUR27 @ 0XFCE88450</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR27_ATTR                                            0x1B

		# Map to pre cursor 27
		#(OFFSET, MASK, VALUE)      (0XFCE88450, 0x0000001FU ,0x0000001BU)  */
    mask_write 0XFCE88450 0x0000001F 0x0000001B
		# Register : GT_EQ_PRE_CUR28 @ 0XFCE88454</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR28_ATTR                                            0x1C

		# Map to pre cursor 28
		#(OFFSET, MASK, VALUE)      (0XFCE88454, 0x0000001FU ,0x0000001CU)  */
    mask_write 0XFCE88454 0x0000001F 0x0000001C
		# Register : GT_EQ_PRE_CUR29 @ 0XFCE88458</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR29_ATTR                                            0x1D

		# Map to pre cursor 29
		#(OFFSET, MASK, VALUE)      (0XFCE88458, 0x0000001FU ,0x0000001DU)  */
    mask_write 0XFCE88458 0x0000001F 0x0000001D
		# Register : GT_EQ_PRE_CUR30 @ 0XFCE8845C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR30_ATTR                                            0x1E

		# Map to pre cursor 30
		#(OFFSET, MASK, VALUE)      (0XFCE8845C, 0x0000001FU ,0x0000001EU)  */
    mask_write 0XFCE8845C 0x0000001F 0x0000001E
		# Register : GT_EQ_PRE_CUR31 @ 0XFCE88460</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_PRE_CUR31_ATTR                                            0x1F

		# Map to pre cursor 31
		#(OFFSET, MASK, VALUE)      (0XFCE88460, 0x0000001FU ,0x0000001FU)  */
    mask_write 0XFCE88460 0x0000001F 0x0000001F
		# Register : GT_EQ_POST_CUR0 @ 0XFCE88464</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR0_ATTR                                            0x0

		# Map to post cursor 0
		#(OFFSET, MASK, VALUE)      (0XFCE88464, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88464 0x0000001F 0x00000000
		# Register : GT_EQ_POST_CUR1 @ 0XFCE88468</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR1_ATTR                                            0x1

		# Map to post cursor 1
		#(OFFSET, MASK, VALUE)      (0XFCE88468, 0x0000001FU ,0x00000001U)  */
    mask_write 0XFCE88468 0x0000001F 0x00000001
		# Register : GT_EQ_POST_CUR2 @ 0XFCE8846C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR2_ATTR                                            0x2

		# Map to post cursor 2
		#(OFFSET, MASK, VALUE)      (0XFCE8846C, 0x0000001FU ,0x00000002U)  */
    mask_write 0XFCE8846C 0x0000001F 0x00000002
		# Register : GT_EQ_POST_CUR3 @ 0XFCE88470</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR3_ATTR                                            0x3

		# Map to post cursor 3
		#(OFFSET, MASK, VALUE)      (0XFCE88470, 0x0000001FU ,0x00000003U)  */
    mask_write 0XFCE88470 0x0000001F 0x00000003
		# Register : GT_EQ_POST_CUR4 @ 0XFCE88474</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR4_ATTR                                            0x4

		# Map to post cursor 4
		#(OFFSET, MASK, VALUE)      (0XFCE88474, 0x0000001FU ,0x00000004U)  */
    mask_write 0XFCE88474 0x0000001F 0x00000004
		# Register : GT_EQ_POST_CUR5 @ 0XFCE88478</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR5_ATTR                                            0x5

		# Map to post cursor 5
		#(OFFSET, MASK, VALUE)      (0XFCE88478, 0x0000001FU ,0x00000005U)  */
    mask_write 0XFCE88478 0x0000001F 0x00000005
		# Register : GT_EQ_POST_CUR6 @ 0XFCE8847C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR6_ATTR                                            0x6

		# Map to post cursor 6
		#(OFFSET, MASK, VALUE)      (0XFCE8847C, 0x0000001FU ,0x00000006U)  */
    mask_write 0XFCE8847C 0x0000001F 0x00000006
		# Register : GT_EQ_POST_CUR7 @ 0XFCE88480</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR7_ATTR                                            0x7

		# Map to post cursor 7
		#(OFFSET, MASK, VALUE)      (0XFCE88480, 0x0000001FU ,0x00000007U)  */
    mask_write 0XFCE88480 0x0000001F 0x00000007
		# Register : GT_EQ_POST_CUR8 @ 0XFCE88484</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR8_ATTR                                            0x8

		# Map to post cursor 8
		#(OFFSET, MASK, VALUE)      (0XFCE88484, 0x0000001FU ,0x00000008U)  */
    mask_write 0XFCE88484 0x0000001F 0x00000008
		# Register : GT_EQ_POST_CUR9 @ 0XFCE88488</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR9_ATTR                                            0x9

		# Map to post cursor 9
		#(OFFSET, MASK, VALUE)      (0XFCE88488, 0x0000001FU ,0x00000009U)  */
    mask_write 0XFCE88488 0x0000001F 0x00000009
		# Register : GT_EQ_POST_CUR10 @ 0XFCE8848C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR10_ATTR                                           0xA

		# Map to post cursor 10
		#(OFFSET, MASK, VALUE)      (0XFCE8848C, 0x0000001FU ,0x0000000AU)  */
    mask_write 0XFCE8848C 0x0000001F 0x0000000A
		# Register : GT_EQ_POST_CUR11 @ 0XFCE88490</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR11_ATTR                                           0xB

		# Map to post cursor 11
		#(OFFSET, MASK, VALUE)      (0XFCE88490, 0x0000001FU ,0x0000000BU)  */
    mask_write 0XFCE88490 0x0000001F 0x0000000B
		# Register : GT_EQ_POST_CUR12 @ 0XFCE88494</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR12_ATTR                                           0xC

		# Map to post cursor 12
		#(OFFSET, MASK, VALUE)      (0XFCE88494, 0x0000001FU ,0x0000000CU)  */
    mask_write 0XFCE88494 0x0000001F 0x0000000C
		# Register : GT_EQ_POST_CUR13 @ 0XFCE88498</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR13_ATTR                                           0xD

		# Map to post cursor 13
		#(OFFSET, MASK, VALUE)      (0XFCE88498, 0x0000001FU ,0x0000000DU)  */
    mask_write 0XFCE88498 0x0000001F 0x0000000D
		# Register : GT_EQ_POST_CUR14 @ 0XFCE8849C</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR14_ATTR                                           0xE

		# Map to post cursor 14
		#(OFFSET, MASK, VALUE)      (0XFCE8849C, 0x0000001FU ,0x0000000EU)  */
    mask_write 0XFCE8849C 0x0000001F 0x0000000E
		# Register : GT_EQ_POST_CUR15 @ 0XFCE884A0</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR15_ATTR                                           0xF

		# Map to post cursor 15
		#(OFFSET, MASK, VALUE)      (0XFCE884A0, 0x0000001FU ,0x0000000FU)  */
    mask_write 0XFCE884A0 0x0000001F 0x0000000F
		# Register : GT_EQ_POST_CUR16 @ 0XFCE884A4</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR16_ATTR                                           0x10

		# Map to post cursor 16
		#(OFFSET, MASK, VALUE)      (0XFCE884A4, 0x0000001FU ,0x00000010U)  */
    mask_write 0XFCE884A4 0x0000001F 0x00000010
		# Register : GT_EQ_POST_CUR17 @ 0XFCE884A8</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR17_ATTR                                           0x11

		# Map to post cursor 17
		#(OFFSET, MASK, VALUE)      (0XFCE884A8, 0x0000001FU ,0x00000011U)  */
    mask_write 0XFCE884A8 0x0000001F 0x00000011
		# Register : GT_EQ_POST_CUR18 @ 0XFCE884AC</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR18_ATTR                                           0x12

		# Map to post cursor 18
		#(OFFSET, MASK, VALUE)      (0XFCE884AC, 0x0000001FU ,0x00000012U)  */
    mask_write 0XFCE884AC 0x0000001F 0x00000012
		# Register : GT_EQ_POST_CUR19 @ 0XFCE884B0</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR19_ATTR                                           0x13

		# Map to post cursor 19
		#(OFFSET, MASK, VALUE)      (0XFCE884B0, 0x0000001FU ,0x00000013U)  */
    mask_write 0XFCE884B0 0x0000001F 0x00000013
		# Register : GT_EQ_POST_CUR20 @ 0XFCE884B4</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR20_ATTR                                           0x14

		# Map to post cursor 20
		#(OFFSET, MASK, VALUE)      (0XFCE884B4, 0x0000001FU ,0x00000014U)  */
    mask_write 0XFCE884B4 0x0000001F 0x00000014
		# Register : GT_EQ_POST_CUR21 @ 0XFCE884B8</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR21_ATTR                                           0x15

		# Map to post cursor 21
		#(OFFSET, MASK, VALUE)      (0XFCE884B8, 0x0000001FU ,0x00000015U)  */
    mask_write 0XFCE884B8 0x0000001F 0x00000015
		# Register : GT_EQ_POST_CUR22 @ 0XFCE884BC</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR22_ATTR                                           0x16

		# Map to post cursor 22
		#(OFFSET, MASK, VALUE)      (0XFCE884BC, 0x0000001FU ,0x00000016U)  */
    mask_write 0XFCE884BC 0x0000001F 0x00000016
		# Register : GT_EQ_POST_CUR23 @ 0XFCE884C0</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR23_ATTR                                           0x17

		# Map to post cursor 23
		#(OFFSET, MASK, VALUE)      (0XFCE884C0, 0x0000001FU ,0x00000017U)  */
    mask_write 0XFCE884C0 0x0000001F 0x00000017
		# Register : GT_EQ_POST_CUR24 @ 0XFCE884C4</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR24_ATTR                                           0x18

		# Map to post cursor 24
		#(OFFSET, MASK, VALUE)      (0XFCE884C4, 0x0000001FU ,0x00000018U)  */
    mask_write 0XFCE884C4 0x0000001F 0x00000018
		# Register : GT_EQ_POST_CUR25 @ 0XFCE884C8</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR25_ATTR                                           0x19

		# Map to post cursor 25
		#(OFFSET, MASK, VALUE)      (0XFCE884C8, 0x0000001FU ,0x00000019U)  */
    mask_write 0XFCE884C8 0x0000001F 0x00000019
		# Register : GT_EQ_POST_CUR26 @ 0XFCE884CC</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR26_ATTR                                           0x1A

		# Map to post cursor 26
		#(OFFSET, MASK, VALUE)      (0XFCE884CC, 0x0000001FU ,0x0000001AU)  */
    mask_write 0XFCE884CC 0x0000001F 0x0000001A
		# Register : GT_EQ_POST_CUR27 @ 0XFCE884D0</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR27_ATTR                                           0x1B

		# Map to post cursor 27
		#(OFFSET, MASK, VALUE)      (0XFCE884D0, 0x0000001FU ,0x0000001BU)  */
    mask_write 0XFCE884D0 0x0000001F 0x0000001B
		# Register : GT_EQ_POST_CUR28 @ 0XFCE884D4</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR28_ATTR                                           0x1C

		# Map to post cursor 28
		#(OFFSET, MASK, VALUE)      (0XFCE884D4, 0x0000001FU ,0x0000001CU)  */
    mask_write 0XFCE884D4 0x0000001F 0x0000001C
		# Register : GT_EQ_POST_CUR29 @ 0XFCE884D8</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR29_ATTR                                           0x1D

		# Map to post cursor 29
		#(OFFSET, MASK, VALUE)      (0XFCE884D8, 0x0000001FU ,0x0000001DU)  */
    mask_write 0XFCE884D8 0x0000001F 0x0000001D
		# Register : GT_EQ_POST_CUR30 @ 0XFCE884DC</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR30_ATTR                                           0x1E

		# Map to post cursor 30
		#(OFFSET, MASK, VALUE)      (0XFCE884DC, 0x0000001FU ,0x0000001EU)  */
    mask_write 0XFCE884DC 0x0000001F 0x0000001E
		# Register : GT_EQ_POST_CUR31 @ 0XFCE884E0</p>

		# 
		# CPM5_PCIE1_ATTR_GT_EQ_POST_CUR31_ATTR                                           0x1F

		# Map to post cursor 31
		#(OFFSET, MASK, VALUE)      (0XFCE884E0, 0x0000001FU ,0x0000001FU)  */
    mask_write 0XFCE884E0 0x0000001F 0x0000001F
		# Register : LL_ACK_TIMEOUT_EN @ 0XFCE884E4</p>

		# 
		# CPM5_PCIE1_ATTR_LL_ACK_TIMEOUT_EN_ATTR                                          0x0

		# Enables the Ack/Nak Latency Timer to use the user-defined LL_ACK_TIMEOUT value (or combined with the built-in value, dependin
		#  on LL_ACK_TIMEOUT_FUNC). If FALSE, the built-in value is used.
		#(OFFSET, MASK, VALUE)      (0XFCE884E4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE884E4 0x00000001 0x00000000
		# Register : LL_ACK_TIMEOUT @ 0XFCE884E8</p>

		# 
		# CPM5_PCIE1_ATTR_LL_ACK_TIMEOUT_ATTR                                             0x0

		# Sets a user-defined timeout for the Ack/Nak Latency Timer to force any pending ACK or NAK DLLPs to be transmitted; refer to L
		# _ACK_TIMEOUT_EN and LL_ACK_TIMEOUT_FUNC to see how this value is used. The unit for this attribute is in symbol times, which 
		# s 4ns at GEN1 speeds, 2ns at GEN2, 1ns at GEN3 and 0.5ns at GEN4 (current speed)
		#(OFFSET, MASK, VALUE)      (0XFCE884E8, 0x000001FFU ,0x00000000U)  */
    mask_write 0XFCE884E8 0x000001FF 0x00000000
		# Register : LL_ACK_TIMEOUT_FUNC @ 0XFCE884EC</p>

		# 
		# CPM5_PCIE1_ATTR_LL_ACK_TIMEOUT_FUNC_ATTR                                        0x0

		# Defines how LL_ACK_TIMEOUT is to be used, if enabled with LL_ACK_TIMEOUT_EN (otherwise, this is not used). 0 = No Effect 1 = 
		# dd LL_ACK_TIMEOUT to the built-in table value. 2 = Subtract LL_ACK_TIMEOUT from the built-in table value. Here LL_ACK_TIMEOUT
		# value should follow the following rules: a) For any Width, Gen1/2/3/4 speed iff MPS ANDgt; 512B : Allowed Range is 1 ANDlt;= 
		# ANGE ANDlt;= 64d b) For any Width, Gen1/2/3/4 speed iff MPS ANDlt;= 512B : Allowed Range is 1 ANDlt;= RANGE ANDlt;= 32d
		#(OFFSET, MASK, VALUE)      (0XFCE884EC, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE884EC 0x00000003 0x00000000
		# Register : LL_REPLAY_TIMEOUT_EN @ 0XFCE884F0</p>

		# 
		# CPM5_PCIE1_ATTR_LL_REPLAY_TIMEOUT_EN_ATTR                                       0x0

		# Enables the Replay Timer to use the user-defined LL_REPLAY_TIMEOUT value (or combined with the built-in value, depending on L
		# _REPLAY_TIMEOUT_FUNC). If FALSE, the built-in value is used.
		#(OFFSET, MASK, VALUE)      (0XFCE884F0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE884F0 0x00000001 0x00000000
		# Register : LL_REPLAY_TIMEOUT @ 0XFCE884F4</p>

		# 
		# CPM5_PCIE1_ATTR_LL_REPLAY_TIMEOUT_ATTR                                          0x0

		# Sets a user-defined timeout for the Replay Timer to force cause the retransmission of unacknowledged TLPs; refer to LL_REPLAY
		# TIMEOUT_EN and LL_REPLAY_TIMEOUT_FUNC to see how this value is used. The unit for this attribute is in symbol times, which is
		# 4ns at GEN1 speeds, 2ns at GEN2, 1ns at GEN3 and 0.5ns at GEN4 (current speed)
		#(OFFSET, MASK, VALUE)      (0XFCE884F4, 0x000001FFU ,0x00000000U)  */
    mask_write 0XFCE884F4 0x000001FF 0x00000000
		# Register : LL_REPLAY_TIMEOUT_FUNC @ 0XFCE884F8</p>

		# 
		# CPM5_PCIE1_ATTR_LL_REPLAY_TIMEOUT_FUNC_ATTR                                     0x0

		# Defines how LL_REPLAY_TIMEOUT is to be used, if enabled with LL_REPLAY_TIMEOUT_EN (otherwise, this is not used). 0 = No Effec
		#  1 = Add LL_REPLAY_TIMEOUT to the built-in table value. 2 = Subtract LL_REPLAY_TIMEOUT from the built-in table value. Here LL
		# REPLAY_TIMEOUT value should follow the following rules: a) For any Width, Gen1/2/3/4 speed iff MPS ANDgt; 512B : Allowed Rang
		#  is 1 ANDlt;= RANGE ANDlt;= 64d b) For any Width, Gen1/2/3/4 speed iff MPS ANDlt;= 512B : Allowed Range is 1 ANDlt;= RANGE AN
		# lt;= 32d
		#(OFFSET, MASK, VALUE)      (0XFCE884F8, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE884F8 0x00000003 0x00000000
		# Register : LL_REPLAY_TO_RAM_PIPELINE @ 0XFCE884FC</p>

		# 
		# CPM5_PCIE1_ATTR_LL_REPLAY_TO_RAM_PIPELINE_ATTR                                  0x0

		# To Replay RAM Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on Hard Block to BRAM path (ad
		# r, wen, ren, wdata). FALSE indicates that there is no pipeline.
		#(OFFSET, MASK, VALUE)      (0XFCE884FC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE884FC 0x00000001 0x00000000
		# Register : LL_REPLAY_FROM_RAM_PIPELINE @ 0XFCE88500</p>

		# 
		# CPM5_PCIE1_ATTR_LL_REPLAY_FROM_RAM_PIPELINE_ATTR                                0x0

		# From Replay RAM Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on BRAM to Hard Block path (
		# data). FALSE indicates that there is no pipeline.
		#(OFFSET, MASK, VALUE)      (0XFCE88500, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88500 0x00000001 0x00000000
		# Register : LL_DISABLE_SCHED_TX_NAK @ 0XFCE88504</p>

		# 
		# CPM5_PCIE1_ATTR_LL_DISABLE_SCHED_TX_NAK_ATTR                                    0x0

		# Disable Scheduling on NAK : When TRUE, all actions related to NAK generation will be performed, except for NAK scehduled for 
		# ransmission. When FALSE, for spec compliant behavior.
		#(OFFSET, MASK, VALUE)      (0XFCE88504, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88504 0x00000001 0x00000000
		# Register : LL_TX_TLP_PARITY_CHK @ 0XFCE88508</p>

		# 
		# CPM5_PCIE1_ATTR_LL_TX_TLP_PARITY_CHK_ATTR                                       0

		# Link Layer Parity Check in Tx Path : When TRUE, checks and reports parity failure on on parity information presented on ll2lm
		# s_axis_tx_tparity[31:0]. No check/reporting if FALSE. Used in conjunction with AXISTEN_IF_TX_PARITY_EN.
		#(OFFSET, MASK, VALUE)      (0XFCE88508, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88508 0x00000001 0x00000000
		# Register : LL_RX_TLP_PARITY_GEN @ 0XFCE8850C</p>

		# 
		# CPM5_PCIE1_ATTR_LL_RX_TLP_PARITY_GEN_ATTR                                       1

		# Link Layer Parity Generation in Rx Path : When TRUE, LL will compute and drive parity on on ll2lm_m_axis_rx_tparity[31:0]. Wh
		# n FALSE, ll2lm_m_axis_rx_tparity[31:0] will be driven to 32'b0. Used in conjunction with AXISTEN_IF_RX_PARITY_EN.
		#(OFFSET, MASK, VALUE)      (0XFCE8850C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8850C 0x00000001 0x00000001
		# Register : LL_UFC_ARBITER_ENABLE @ 0XFCE88510</p>

		# 
		# CPM5_PCIE1_ATTR_LL_UFC_ARBITER_ENABLE_ATTR                                      0x1

		# MultiVC UCF Arbiter Enable. When TRUE enabled, else disabled. Required to be TRUE when CCIX is enabled.
		#(OFFSET, MASK, VALUE)      (0XFCE88510, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88510 0x00000001 0x00000001
		# Register : LL_HOLD_VCX_TXINITFC @ 0XFCE88514</p>

		# 
		# CPM5_PCIE1_ATTR_LL_HOLD_VCX_TXINITFC_ATTR                                       0x0

		# Link Layer Hold VCx TX INITFC: When TRUE holds transmission of INITFC for VC1
		#(OFFSET, MASK, VALUE)      (0XFCE88514, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88514 0x00000001 0x00000000
		# Register : LL_FEATURE_EN_DLLP_EXCHANGE @ 0XFCE88518</p>

		# 
		# CPM5_PCIE1_ATTR_LL_FEATURE_EN_DLLP_EXCHANGE_ATTR                                0x1

		# Link Layer Feature Enable DLLP Exchange: When TRUE enables exchange of Feature DLLP
		#(OFFSET, MASK, VALUE)      (0XFCE88518, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88518 0x00000001 0x00000001
		# Register : LL_FEATURE_EN_FC_SCALING @ 0XFCE8851C</p>

		# 
		# CPM5_PCIE1_ATTR_LL_FEATURE_EN_FC_SCALING_ATTR                                   0x1

		# Link Layer Feature Enable Flow Control Scaling : When TRUE, FC Scaling feature is enabled. When FALSE, FC Scaling feature is 
		# isabled.
		#(OFFSET, MASK, VALUE)      (0XFCE8851C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8851C 0x00000001 0x00000001
		# Register : LL_FEATURE_EN_FC_SCALING_SCALE_FACTOR_4 @ 0XFCE88520</p>

		# 
		# CPM5_PCIE1_ATTR_LL_FEATURE_EN_FC_SCALING_SCALE_FACTOR_4_ATTR                    0x0

		# Link Layer Feature Enable Flow Control Scaling Scale Factor 4 : When TRUE, FC Scaling Scale Factor is 4 is enabled. When FALS
		# , FC Scaling Scale Factor is 1..
		#(OFFSET, MASK, VALUE)      (0XFCE88520, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88520 0x00000001 0x00000000
		# Register : LL_ENHANCED_REPLAY_TIMER_ENABLE @ 0XFCE88524</p>

		# 
		# CPM5_PCIE1_ATTR_LL_ENHANCED_REPLAY_TIMER_ENABLE_ATTR                            0x1

		# Enable Replay Timer 4.0 Spec Timeout : When TRUE, enables the PCIe 4.0 Spec v0.7 replay timer. When FALSE, the replay timer t
		# meouts are based on the ack timeout values (Pre-4.0 v0.7 Spec and 3.1 Spec replay timer timeouts)..
		#(OFFSET, MASK, VALUE)      (0XFCE88524, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88524 0x00000001 0x00000001
		# Register : LL_TX_STALL_ON_ASPM_L1_ENTRY_DISABLE @ 0XFCE88528</p>

		# 
		# CPM5_PCIE1_ATTR_LL_TX_STALL_ON_ASPM_L1_ENTRY_DISABLE_ATTR                       0x0

		# Stall Tx Traffic on Entry into ASPM L1 Disable : When TRUE, Disabled the behehavior, where DLL Stall the TL on entry into ASP
		#  L1. FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE88528, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88528 0x00000001 0x00000000
		# Register : LL_TX_STALL_ON_PPM_L1_ENTRY_DISABLE @ 0XFCE8852C</p>

		# 
		# CPM5_PCIE1_ATTR_LL_TX_STALL_ON_PPM_L1_ENTRY_DISABLE_ATTR                        0x0

		# Stall Tx Traffic on Entry into PPM L1 Disable : When TRUE, Disabled the behehavior, where DLL Stall the TL on entry into PPM 
		# 1. FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE8852C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8852C 0x00000001 0x00000000
		# Register : LL_TX_PARITY_CHECK_CHANGE_DISABLE @ 0XFCE88530</p>

		# 
		# CPM5_PCIE1_ATTR_LL_TX_PARITY_CHECK_CHANGE_DISABLE_ATTR                          0x0

		# Parity Check Change Disable : When TRUE, Parity Check fix is disabled. FEATURE USE DEPRECATION - UNUSED.
		#(OFFSET, MASK, VALUE)      (0XFCE88530, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88530 0x00000001 0x00000000
		# Register : LL_USER_SPARE @ 0XFCE88534</p>

		# 
		# CPM5_PCIE1_ATTR_LL_USER_SPARE_ATTR                                              0x00

		# Link Layer Module User Spare Attributes: 32-bit attribute spares
		#(OFFSET, MASK, VALUE)      (0XFCE88534, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88534 0xFFFFFFFF 0x00000000
		# Register : LL_SPARE @ 0XFCE88538</p>

		# 
		# CPM5_PCIE1_ATTR_LL_SPARE_ATTR                                                   0x0

		# Link Layer Module Spare Attributes: 32-bit attribute spares bit[0] = 0b - Fix for gen1/2 x1/2/4 rx TLP with back-to-back EIOS
		#  1b - Chicken bit set will disable this fix.
		#(OFFSET, MASK, VALUE)      (0XFCE88538, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88538 0xFFFFFFFF 0x00000000
		# Register : IS_SWITCH_PORT @ 0XFCE8853C</p>

		# 
		# CPM5_PCIE1_ATTR_IS_SWITCH_PORT_ATTR                                             0x0

		# Switch Port Control: For Built-in Switch Upstream Port : When set to TRUE and PL_UPSTREAM_FACING must be TRUE. For Built-in S
		# itch Downstream Port : When set to TRUE and PL_UPSTREAM_FACING must be FALSE. TL_PF_ENABLE_REG must be set to 00b and SRIOV_C
		# P_ENABLE must be set to FALSE.
		#(OFFSET, MASK, VALUE)      (0XFCE8853C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8853C 0x00000001 0x00000000
		# Register : IS_ADV_SWT_PORT @ 0XFCE88540</p>

		# 
		# CPM5_PCIE1_ATTR_IS_ADV_SWT_PORT_ATTR                                            0x0

		# Advanced Swith Port Control: Must be used with IS_SWITCH_PORT = TRUE and PL_UPSTREAM_FACING = TRUE
		#(OFFSET, MASK, VALUE)      (0XFCE88540, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88540 0x00000001 0x00000000
		# Register : CFG_REQUEST_INTFC_ENABLE @ 0XFCE88544</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_REQUEST_INTFC_ENABLE_ATTR                                   0x0

		# Cfg Request Interface Enable: When TRUE, enables the Configuration Request Interface, steering Config Request TLPs to the fab
		# ic interface.
		#(OFFSET, MASK, VALUE)      (0XFCE88544, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88544 0x00000001 0x00000000
		# Register : CFG_MGMT2_INTFC_ENABLE @ 0XFCE88548</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_MGMT2_INTFC_ENABLE_ATTR                                     0x0

		# Cfg Mgmt2 Interface Enable: When TRUE, enables the Configuration Mgmt2 Interface (a second cfg_mgmt port).
		#(OFFSET, MASK, VALUE)      (0XFCE88548, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88548 0x00000001 0x00000000
		# Register : CFG_BYPASS_MODE_ENABLE @ 0XFCE8854C</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_BYPASS_MODE_ENABLE_ATTR                                     0x0

		# Cfg Bypass Mode Enable: When set to TRUE, enables Cfg Bypass mode of operation. Cfg Space bypass is configurable as follows: 
		# ) If ((CFG_BYPASS_MODE_ENABLE = TRUE) ANDamp; (IS_SWITCH_PORT = FALSE)) =ANDgt; Internal Cfg Space is completely bypassed (PL
		# and LL status and control signals to pins and Cfg Transactions sent to CfgBypass Interface) 2) If ((CFG_BYPASS_MODE_ENABLE = 
		# RUE) ANDamp; (IS_SWITCH_PORT = TRUE)) =ANDgt; Internal Cfg Space for switch port is enabled (depending on state of PL_UPSTREA
		# _FACING).
		#(OFFSET, MASK, VALUE)      (0XFCE8854C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8854C 0x00000001 0x00000000
		# Register : CFG_BYPASS_BAR_MATCH_ENABLE @ 0XFCE88550</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_BYPASS_BAR_MATCH_ENABLE_ATTR                                0x0

		# Cfg Bypass BAR Match Enable: When set to TRUE, enables AXI bar matching (AXI bar decode). When FALSE, AXI bar matching is dis
		# bled.
		#(OFFSET, MASK, VALUE)      (0XFCE88550, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88550 0x00000001 0x00000000
		# Register : CFG_BYPASS_NUM_DSP @ 0XFCE88554</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_BYPASS_NUM_DSP_ATTR                                         0x0

		# Cfg Bypass Num DSP: Number of AXI DSP decodes.
		#(OFFSET, MASK, VALUE)      (0XFCE88554, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88554 0x0000003F 0x00000000
		# Register : CFG_BYPASS_NUM_USP @ 0XFCE88558</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_BYPASS_NUM_USP_ATTR                                         0x0

		# Cfg Bypass Num USP: Number of AXI USP decodes.
		#(OFFSET, MASK, VALUE)      (0XFCE88558, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88558 0x0000003F 0x00000000
		# Register : RAM_ECC_ERR_CHK_DISABLE @ 0XFCE8855C</p>

		# 
		# CPM5_PCIE1_ATTR_RAM_ECC_ERR_CHK_DISABLE_ATTR                                    0x0

		# RAM ECC Error Check Disable : When TRUE, RAM ECC Error Checking is disabled.
		#(OFFSET, MASK, VALUE)      (0XFCE8855C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8855C 0x00000001 0x00000000
		# Register : PERFUNC_NUM_MSG_ENABLE @ 0XFCE88560</p>

		# 
		# CPM5_PCIE1_ATTR_PERFUNC_NUM_MSG_ENABLE_ATTR                                     0x0

		# Per-Function Number Message Enable : When TRUE, Correctable Error Messages generated as an Endpoint indicate the lowest physi
		# al function number reporting the error. When FALSE, Correctable Error Messages generated as an Endpoint indicate function num
		# er 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88560, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88560 0x00000001 0x00000000
		# Register : TL_PF_ENABLE_REG @ 0XFCE88564</p>

		# 
		# CPM5_PCIE1_ATTR_TL_PF_ENABLE_REG_ATTR                                           0

		# Function Enable: 0000b = Function 0 Enabled. 0001b = Functions 0,1 Enabled. 0010b = Functions 0,1,2 Enabled. 0011b = Function
		#  0,1,2,3 Enabled. 0100b = Functions 0,1,2,3,4 Enabled. 0101b = Functions 0,1,2,3,4,5 Enabled. 0110b = Functions 0,1,2,3,4,5,6
		# Enabled. 0111b = Functions 0,1,2,3,4,5,6,7 Enabled. 1000b = Functions 0 - 8 Enabled (PCIeA5 Only). 1001b = Functions 0 - 9 En
		# bled (PCIeA5 Only). 1010b = Functions 0 - 10 Enabled (PCIeA5 Only). 1011b = Functions 0 - 11 Enabled (PCIeA5 Only). 1100b = F
		# nctions 0 - 12 Enabled (PCIeA5 Only). 1101b = Functions 0 - 13 Enabled (PCIeA5 Only). 1110b = Functions 0 - 14 Enabled (PCIeA
		#  Only). 1111b = Functions 0 - 15 Enabled (PCIeA5 Only).
		#(OFFSET, MASK, VALUE)      (0XFCE88564, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE88564 0x0000000F 0x00000000
		# Register : TL_CREDITS_CD @ 0XFCE88568</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_CD_ATTR                                              0x0

		# Receiver Credit Limit for Completion Data. Unit is credits. Supported values are: 0, 700H, 7FFH, F10H
		#(OFFSET, MASK, VALUE)      (0XFCE88568, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE88568 0x00000FFF 0x00000000
		# Register : TL_CREDITS_CD_NON_SCALE @ 0XFCE8856C</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_CD_NON_SCALE_ATTR                                    0x0

		# Receiver Credit Limit for Completion Data no Scaling. This is applied when LL_FEATURE_EN_FC_SCALING, LL_FEATURE_EN_FC_SCALING
		# SCALE_FACTOR_4 are both TRUE, and link partner does not support FC scaling (i.e. compliant to PCIE3.0 or older spec)). Unit i
		#  credits. Supported values are: 0, 700H, 7FFH
		#(OFFSET, MASK, VALUE)      (0XFCE8856C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8856C 0x00000FFF 0x00000000
		# Register : TL_CREDITS_CD_VC1 @ 0XFCE88570</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_CD_VC1_ATTR                                          0x0

		# Receiver Credit Limit for Completion Data for VC1. Unit is credits. Supported values are: must be set to 000H (infinite).
		#(OFFSET, MASK, VALUE)      (0XFCE88570, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE88570 0x00000FFF 0x00000000
		# Register : TL_CREDITS_CH @ 0XFCE88574</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_CH_ATTR                                              0x0

		# Receiver Credit Limit for Completion Header. Unit is number of TLPs. Supported values are: 0, 40H, 7FH or F0H
		#(OFFSET, MASK, VALUE)      (0XFCE88574, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88574 0x000000FF 0x00000000
		# Register : TL_CREDITS_CH_NON_SCALE @ 0XFCE88578</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_CH_NON_SCALE_ATTR                                    0x0

		# Receiver Credit Limit for Completion Header no Scaling. This is applied when LL_FEATURE_EN_FC_SCALING, LL_FEATURE_EN_FC_SCALI
		# G_SCALE_FACTOR_4 are both TRUE, and link partner does not support FC scaling (i.e. compliant to PCIE3.0 or older spec)). Unit
		# is number of TLPs. Supported values are when no feature DLLP is received: 0, 40H, 7FH
		#(OFFSET, MASK, VALUE)      (0XFCE88578, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88578 0x000000FF 0x00000000
		# Register : TL_CREDITS_CH_VC1 @ 0XFCE8857C</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_CH_VC1_ATTR                                          0x0

		# Receiver Credit Limit for Completion Header for VC1. Unit is number of TLPs. Supported values are: must be set to 00H (infini
		# e).
		#(OFFSET, MASK, VALUE)      (0XFCE8857C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8857C 0x000000FF 0x00000000
		# Register : TL_COMPLETION_RAM_SIZE @ 0XFCE88580</p>

		# 
		# CPM5_PCIE1_ATTR_TL_COMPLETION_RAM_SIZE_ATTR                                     0x3

		# Receive Completion RAM Size: 00b - 8,192 Bytes 01b - 16,384 Bytes 10b - 32,768 Bytes. 11b - 65,536 Bytes
		#(OFFSET, MASK, VALUE)      (0XFCE88580, 0x00000003U ,0x00000003U)  */
    mask_write 0XFCE88580 0x00000003 0x00000003
		# Register : TL_COMPLETION_RAM_NUM_TLPS @ 0XFCE88584</p>

		# 
		# CPM5_PCIE1_ATTR_TL_COMPLETION_RAM_NUM_TLPS_ATTR                                 0x3

		# Receive Completion RAM Max.Number of TLP Capacity: 00b - 64D 01b - 128D 10b - 256D 11b - 1024D
		#(OFFSET, MASK, VALUE)      (0XFCE88584, 0x00000003U ,0x00000003U)  */
    mask_write 0XFCE88584 0x00000003 0x00000003
		# Register : TL_CREDITS_NPD @ 0XFCE88588</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_NPD_ATTR                                             0x4

		# Credit Limit for Non Posted Data. Unit is credits. Supported values are: 4H
		#(OFFSET, MASK, VALUE)      (0XFCE88588, 0x00000FFFU ,0x00000004U)  */
    mask_write 0XFCE88588 0x00000FFF 0x00000004
		# Register : TL_CREDITS_NPD_VC1 @ 0XFCE8858C</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_NPD_VC1_ATTR                                         0x0

		# Credit Limit for Non Posted Data for VC1. Unit is credits. Supported values are: 00H
		#(OFFSET, MASK, VALUE)      (0XFCE8858C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8858C 0x00000FFF 0x00000000
		# Register : TL_NP_FIFO_NUM_TLPS @ 0XFCE88590</p>

		# 
		# CPM5_PCIE1_ATTR_TL_NP_FIFO_NUM_TLPS_ATTR                                        0x0

		# Maximum number of TLP headers that can be stored in the Non-Posted Receive FIFO. 0 = 64 1 = 127
		#(OFFSET, MASK, VALUE)      (0XFCE88590, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88590 0x00000001 0x00000000
		# Register : TL_CREDITS_NPH @ 0XFCE88594</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_NPH_ATTR                                             0x40

		# Receiver Credit Limit for Non Posted Header. Unit is number of TLPs. Supported values are: 40H when TL_NP_FIFO_NUM_TLPS = 0b,
		# 7FH when TL_NP_FIFO_NUM_TLPS = 1b, PF0_PASID_CAP_ON = FALSE NO SUPPORTED when TL_NP_FIFO_NUM_TLPS = 0b, 40H when TL_NP_FIFO_N
		# M_TLPS = 1b, PF0_PASID_CAP_ON = TRUE
		#(OFFSET, MASK, VALUE)      (0XFCE88594, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE88594 0x000000FF 0x00000040
		# Register : TL_CREDITS_NPH_VC1 @ 0XFCE88598</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_NPH_VC1_ATTR                                         0x1

		# Receiver Credit Limit for Non Posted Header for VC1. Unit is number of TLPs. Supported values are: 01H = 01D TLPs
		#(OFFSET, MASK, VALUE)      (0XFCE88598, 0x000000FFU ,0x00000001U)  */
    mask_write 0XFCE88598 0x000000FF 0x00000001
		# Register : TL_CREDITS_PD @ 0XFCE8859C</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_PD_ATTR                                              0x3E0

		# Receiver Credit Limit for Posted Data. Unit is credits. Supported values are: 3E0H when TL_POSTED_RAM_SIZE = 0b, 781H when TL
		# POSTED_RAM_SIZE = 1b, PF0_PASID_CAP_ON = FALSE 3C0H when TL_POSTED_RAM_SIZE = 0b, 702H when TL_POSTED_RAM_SIZE = 1b, PF0_PASI
		# _CAP_ON = TRUE
		#(OFFSET, MASK, VALUE)      (0XFCE8859C, 0x00000FFFU ,0x000003E0U)  */
    mask_write 0XFCE8859C 0x00000FFF 0x000003E0
		# Register : TL_CREDITS_PD_VC1 @ 0XFCE885A0</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_PD_VC1_ATTR                                          0x3E0

		# Receiver Credit Limit for Posted Data for VC1. Unit is credits. Supported values are: 3C0H = 960D - 15,360B (TL_RX_CCIX_FIFO_
		# AM_SIZE = 1b)
		#(OFFSET, MASK, VALUE)      (0XFCE885A0, 0x00000FFFU ,0x000003E0U)  */
    mask_write 0XFCE885A0 0x00000FFF 0x000003E0
		# Register : TL_CREDITS_PH @ 0XFCE885A4</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_PH_ATTR                                              0x20

		# Receiver Credit Limit for Posted Header. Unit is number of TLPs. Supported values are: 20H when TL_POSTED_RAM_SIZE = 0b, 7FH 
		# hen TL_POSTED_RAM_SIZE = 1b
		#(OFFSET, MASK, VALUE)      (0XFCE885A4, 0x000000FFU ,0x00000020U)  */
    mask_write 0XFCE885A4 0x000000FF 0x00000020
		# Register : TL_CREDITS_PH_VC1 @ 0XFCE885A8</p>

		# 
		# CPM5_PCIE1_ATTR_TL_CREDITS_PH_VC1_ATTR                                          0x40

		# Receiver Credit Limit for Posted Header for VC1. Unit is number of TLPs. Supported values are: 40H=64D TLPs
		#(OFFSET, MASK, VALUE)      (0XFCE885A8, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE885A8 0x000000FF 0x00000040
		# Register : TL_RX_COMPLETION_TO_RAM_WRITE_PIPELINE @ 0XFCE885AC</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_COMPLETION_TO_RAM_WRITE_PIPELINE_ATTR                     0x0

		# TL To Completion RAM Write Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on waddr, wdata, 
		# en. FALSE indicates that there is no pipeline. Must be equal to TL_RX_COMPLETION_TO_RAM_READ_PIPELINE selection.
		#(OFFSET, MASK, VALUE)      (0XFCE885AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885AC 0x00000001 0x00000000
		# Register : TL_RX_COMPLETION_TO_RAM_READ_PIPELINE @ 0XFCE885B0</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_COMPLETION_TO_RAM_READ_PIPELINE_ATTR                      0x0

		# TL To Completion RAM Read Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on raddr, ren. FAL
		# E indicates that there is no pipeline. Must be equal to TL_RX_COMPLETION_TO_RAM_WRITE_PIPELINE selection.
		#(OFFSET, MASK, VALUE)      (0XFCE885B0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885B0 0x00000001 0x00000000
		# Register : TL_RX_COMPLETION_FROM_RAM_READ_PIPELINE @ 0XFCE885B4</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_COMPLETION_FROM_RAM_READ_PIPELINE_ATTR                    0x0

		# Completion RAM to TL Read Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on rdata. FALSE in
		# icates that there is no pipeline.
		#(OFFSET, MASK, VALUE)      (0XFCE885B4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885B4 0x00000001 0x00000000
		# Register : TL_POSTED_RAM_SIZE @ 0XFCE885B8</p>

		# 
		# CPM5_PCIE1_ATTR_TL_POSTED_RAM_SIZE_ATTR                                         0x0

		# Receive Posted RAM Size : 0b - 16KB 1b - 32KB
		#(OFFSET, MASK, VALUE)      (0XFCE885B8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885B8 0x00000001 0x00000000
		# Register : TL_RX_POSTED_TO_RAM_WRITE_PIPELINE @ 0XFCE885BC</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_POSTED_TO_RAM_WRITE_PIPELINE_ATTR                         0x0

		# TL to Posted RAM Write Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on waddr, wdata, wen.
		# FALSE indicates that there is no pipeline. Must be equal to TL_RX_POSTED_TO_RAM_READ_PIPELINE selection.
		#(OFFSET, MASK, VALUE)      (0XFCE885BC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885BC 0x00000001 0x00000000
		# Register : TL_RX_POSTED_TO_RAM_READ_PIPELINE @ 0XFCE885C0</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_POSTED_TO_RAM_READ_PIPELINE_ATTR                          0x0

		# TL to Posted RAM Read Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on raddr, ren. FALSE i
		# dicates that there is no pipeline. Must be equal to TL_RX_POSTED_TO_RAM_WRITE_PIPELINE selection.
		#(OFFSET, MASK, VALUE)      (0XFCE885C0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885C0 0x00000001 0x00000000
		# Register : TL_RX_POSTED_FROM_RAM_READ_PIPELINE @ 0XFCE885C4</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_POSTED_FROM_RAM_READ_PIPELINE_ATTR                        0x0

		# Posted RAM To TL Read Pipeline : If TRUE indicates presence of a external CLB flip-flop pipeline stage on rdata. FALSE indica
		# es that there is no pipeline.
		#(OFFSET, MASK, VALUE)      (0XFCE885C4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885C4 0x00000001 0x00000000
		# Register : TL_TX_MUX_STRICT_PRIORITY @ 0XFCE885C8</p>

		# 
		# CPM5_PCIE1_ATTR_TL_TX_MUX_STRICT_PRIORITY_ATTR                                  0x0

		# Transaction Tx mux arbitration scheme between RQ and CC traffic. If TRUE selects strict priority. If FALSE selects round robi
		#  priority.
		#(OFFSET, MASK, VALUE)      (0XFCE885C8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885C8 0x00000001 0x00000000
		# Register : TL_TX_TLP_STRADDLE_ENABLE @ 0XFCE885CC</p>

		# 
		# CPM5_PCIE1_ATTR_TL_TX_TLP_STRADDLE_ENABLE_ATTR                                  0x0

		# Deprecate: Transaction Tx Straddle Enable : When TRUE TL may start new TLP on DW4 if previous TLP ended DW0-3 FEATURE USE DEP
		# ECATION - UNUSED (Always set to FALSE for Griffin, Kestrel, Merlin). When FALSE, TL will start new TLP on DW0 only.
		#(OFFSET, MASK, VALUE)      (0XFCE885CC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885CC 0x00000001 0x00000000
		# Register : TL_TX_TLP_TERMINATE_PARITY @ 0XFCE885D0</p>

		# 
		# CPM5_PCIE1_ATTR_TL_TX_TLP_TERMINATE_PARITY_ATTR                                 0x0

		# Transaction Tx Terminate Parity : When TRUE, TL will check terminate data path parity, When FALSE, TL will not check and term
		# nate data path parity, in this case check and termination will be performed in the LL. When TRUE LL_TX_TLP_PARITY_CHK must be
		# FALSE. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE885D0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885D0 0x00000001 0x00000000
		# Register : TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT @ 0XFCE885D4</p>

		# 
		# CPM5_PCIE1_ATTR_TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT_ATTR                        0x8

		# Transaction Tx Update FC Interval TLP Count : Indicates the minimum number of Posted, Non-Posted or Completion TLPs that must
		# be received before an update FC is scheduled for transmission. Once the required number of TLPs are received, an Update FC is
		# scheduled for transmission and count is reset to the value programmed in TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT[4:0] and the int
		# rnal timer is reset to start counting down from the value indicated by TL_FC_UPDATE_MIN_INTERVAL_TIME[4:0] (if enabled). Prog
		# amming 0d indicates that the feature is disabled.
		#(OFFSET, MASK, VALUE)      (0XFCE885D4, 0x0000001FU ,0x00000008U)  */
    mask_write 0XFCE885D4 0x0000001F 0x00000008
		# Register : TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT_VC1 @ 0XFCE885D8</p>

		# 
		# CPM5_PCIE1_ATTR_TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT_VC1_ATTR                    0x8

		# Transaction Tx Update FC Interval TLP Count for VC1 : Indicates the minimum number of Posted, Non-Posted or Completion TLPs t
		# at must be received before an update FC is scheduled for transmission. Once the required number of TLPs are received, an Upda
		# e FC is scheduled for transmission and count is reset to the value programmed in TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT[4:0] and
		# the internal timer is reset to start counting down from the value indicated by TL_FC_UPDATE_MIN_INTERVAL_TIME[4:0] (if enable
		# ). Programming 0d indicates that the feature is disabled.
		#(OFFSET, MASK, VALUE)      (0XFCE885D8, 0x0000001FU ,0x00000008U)  */
    mask_write 0XFCE885D8 0x0000001F 0x00000008
		# Register : TL_FC_UPDATE_MIN_INTERVAL_TIME @ 0XFCE885DC</p>

		# 
		# CPM5_PCIE1_ATTR_TL_FC_UPDATE_MIN_INTERVAL_TIME_ATTR                             0x2

		# Transaction Tx Update FC Interval Timer : Expressed in units of 1us elapsed time and tracked independently for Posted, Non-Po
		# ted and Completion (if applicable) credit queues. An update FC is scehdule for transmission only after time indicated by valu
		# e of TL_FC_UPDATE_MIN_INTERVAL_TIME[4:0] has elapsed after receeption of a TLP, and number of TLPs indicated by TL_FC_UPDATE_
		# IN_INTERVAL_TLP_COUNT[4:0] have not been received. Once an Update FC is scheduled for transimission, the internal timer is re
		# et to start counting down from the value indicated by TL_FC_UPDATE_MIN_INTERVAL_TIME[4:0] and received TLP count is reset to 
		# tart counting down from value indicated by TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT[4:0] (if enabled). Value of 0d indicates that 
		# he feature is disabled.
		#(OFFSET, MASK, VALUE)      (0XFCE885DC, 0x0000001FU ,0x00000002U)  */
    mask_write 0XFCE885DC 0x0000001F 0x00000002
		# Register : TL_FC_UPDATE_MIN_INTERVAL_TIME_VC1 @ 0XFCE885E0</p>

		# 
		# CPM5_PCIE1_ATTR_TL_FC_UPDATE_MIN_INTERVAL_TIME_VC1_ATTR                         0x2

		# Transaction Tx Update FC Interval Timer for VC1 : Expressed in units of 1us elapsed time and tracked independently for Posted
		#  Non-Posted and Completion (if applicable) credit queues. An update FC is scehdule for transmission only after time indicated
		# by valuye of TL_FC_UPDATE_MIN_INTERVAL_TIME[4:0] has elapsed after receeption of a TLP, and number of TLPs indicated by TL_FC
		# UPDATE_MIN_INTERVAL_TLP_COUNT[4:0] have not been received. Once an Update FC is scheduled for transimission, the internal tim
		# r is reset to start counting down from the value indicated by TL_FC_UPDATE_MIN_INTERVAL_TIME[4:0] and received TLP count is r
		# set to start counting down from value indicated by TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT[4:0] (if enabled). Value of 0d indicat
		# s that the feature is disabled.
		#(OFFSET, MASK, VALUE)      (0XFCE885E0, 0x0000001FU ,0x00000002U)  */
    mask_write 0XFCE885E0 0x0000001F 0x00000002
		# Register : TL_FEATURE_ENABLE_FC_SCALING @ 0XFCE885E4</p>

		# 
		# CPM5_PCIE1_ATTR_TL_FEATURE_ENABLE_FC_SCALING_ATTR                               0x0

		# Transaction Layer Flow Control Scaling : FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE885E4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885E4 0x00000001 0x00000000
		# Register : TL_RX_CCIX_FIFO_RAM_SIZE @ 0XFCE885E8</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_CCIX_FIFO_RAM_SIZE_ATTR                                   0x1

		# Receive Rx CCIX FIFO RAM Size : 0b - Reserved 1b - 16KB (64 TLPs)
		#(OFFSET, MASK, VALUE)      (0XFCE885E8, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE885E8 0x00000001 0x00000001
		# Register : TL_RX_CCIX_FIFO_TO_RAM_WRITE_PIPELINE @ 0XFCE885EC</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_CCIX_FIFO_TO_RAM_WRITE_PIPELINE_ATTR                      0x0

		# TL to RX CCIX FIFO RAM Write Pipeline : If TRUE indicates presence of a external flip-flop pipeline stage on waddr, wdata, we
		# . FALSE indicates that there is no pipeline. Must be equal to TL_RX_CCIX_FIFO_TO_RAM_READ_PIPELINE selection.
		#(OFFSET, MASK, VALUE)      (0XFCE885EC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885EC 0x00000001 0x00000000
		# Register : TL_RX_CCIX_FIFO_TO_RAM_READ_PIPELINE @ 0XFCE885F0</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_CCIX_FIFO_TO_RAM_READ_PIPELINE_ATTR                       0x0

		# TL to RX CCIX FIFO RAM Read Pipeline : If TRUE indicates presence of a external flip-flop pipeline stage on raddr, ren. FALSE
		# indicates that there is no pipeline. Must be equal to TL_RX_CCIX_FIFO_TO_RAM_WRITE_PIPELINE selection.
		#(OFFSET, MASK, VALUE)      (0XFCE885F0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885F0 0x00000001 0x00000000
		# Register : TL_RX_CCIX_FIFO_FROM_RAM_READ_PIPELINE @ 0XFCE885F4</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_CCIX_FIFO_FROM_RAM_READ_PIPELINE_ATTR                     0x0

		# RX CCIX FIFO RAM To TL Read Pipeline : If TRUE indicates presence of a external = flip-flop pipeline stage on rdata. FALSE in
		# icates that there is no pipeline.
		#(OFFSET, MASK, VALUE)      (0XFCE885F4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885F4 0x00000001 0x00000000
		# Register : TL_DISABLE_RX_FLOW_CTL @ 0XFCE885F8</p>

		# 
		# CPM5_PCIE1_ATTR_TL_DISABLE_RX_FLOW_CTL_ATTR                                     0x0

		# Disable Rx Flow Control : When set to 1b, disables internal flow control credit return mechanism, and enables, the tl_rx_\'7b
		# osted,nonposted,completion\'7d_*_released_* (user_spare_in interface). Sould be set to 0b for normal operation.
		#(OFFSET, MASK, VALUE)      (0XFCE885F8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE885F8 0x00000001 0x00000000
		# Register : TL_USER_SPARE @ 0XFCE885FC</p>

		# 
		# CPM5_PCIE1_ATTR_TL_USER_SPARE_ATTR                                              0x0

		# TL User Spare Bits
		#(OFFSET, MASK, VALUE)      (0XFCE885FC, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE885FC 0xFFFFFFFF 0x00000000
		# Register : TL_SPARE @ 0XFCE88600</p>

		# 
		# CPM5_PCIE1_ATTR_TL_SPARE_ATTR                                                   0x0

		# TL Spare Bits bit 0: Rx FIFOs (Posted, Completion and CCIX) pessimism reduction : When 0b log cor or uncor errors are logged 
		# ven if TL does not internally consume the RAM read data (must be used for error injection tests). When1b does not log cor or 
		# ncor errors if TL does not internally use the RAM read data (must be used for customer facing designs). (EDT-1001766)
		#(OFFSET, MASK, VALUE)      (0XFCE88600, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88600 0xFFFFFFFF 0x00000000
		# Register : FT_MODE_EN @ 0XFCE88608</p>

		# 
		# CPM5_PCIE1_ATTR_FT_MODE_EN_ATTR                                                 0x1

		# Flow-Thru mode is enabled for CCIX RX path when set:1, else ccix RX path in store and forward mode
		#(OFFSET, MASK, VALUE)      (0XFCE88608, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88608 0x00000001 0x00000001
		# Register : TL_RX_CCIX_FIFO_DISABLE_ECC_FIX @ 0XFCE8860C</p>

		# 
		# CPM5_PCIE1_ATTR_TL_RX_CCIX_FIFO_DISABLE_ECC_FIX_ATTR                            0x0

		# Chicken bit, to disable a fix for ECC checking in ccix RX FIFO
		#(OFFSET, MASK, VALUE)      (0XFCE8860C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8860C 0x00000001 0x00000000
		# Register : TL_DISABLE_CMPL_FINITE_CREDIT_CHECK @ 0XFCE88610</p>

		# 
		# CPM5_PCIE1_ATTR_TL_DISABLE_CMPL_FINITE_CREDIT_CHECK_ATTR                        0x0

		# Chicken bit, checking for credit when CMPL have finite credits
		#(OFFSET, MASK, VALUE)      (0XFCE88610, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88610 0x00000001 0x00000000
		# Register : TL_DISABLE_OVERFLOW_REPORTING_FIX @ 0XFCE88614</p>

		# 
		# CPM5_PCIE1_ATTR_TL_DISABLE_OVERFLOW_REPORTING_FIX_ATTR                          0x0

		# Chicken bit, disable reporting when RX buffer overflows
		#(OFFSET, MASK, VALUE)      (0XFCE88614, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88614 0x00000001 0x00000000
		# Register : CCIX_TX_TUSER_CTRL_PARITY_CHECK_ENABLE @ 0XFCE88618</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_TX_TUSER_CTRL_PARITY_CHECK_ENABLE_ATTR                     0x0

		# Set:1 enables parity checking for CCIX tuser control bits, default not enabled
		#(OFFSET, MASK, VALUE)      (0XFCE88618, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88618 0x00000001 0x00000000
		# Register : CCIX_TX_TUSER_DATA_PARITY_CHECK_ENABLE @ 0XFCE8861C</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_TX_TUSER_DATA_PARITY_CHECK_ENABLE_ATTR                     0x0

		# Set:1 enables parity checking for CCIX data bits, default not enabled
		#(OFFSET, MASK, VALUE)      (0XFCE8861C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8861C 0x00000001 0x00000000
		# Register : PFx_CLASS_CODE_0 @ 0XFCE88620</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_0_ATTR                                           0x058000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88620, 0x00FFFFFFU ,0x00058000U)  */
    mask_write 0XFCE88620 0x00FFFFFF 0x00058000
		# Register : PFx_CLASS_CODE_1 @ 0XFCE88624</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_1_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88624, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88624 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_2 @ 0XFCE88628</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_2_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88628, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88628 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_3 @ 0XFCE8862C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_3_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE8862C, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8862C 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_4 @ 0XFCE88630</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_4_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88630, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88630 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_5 @ 0XFCE88634</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_5_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88634, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88634 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_6 @ 0XFCE88638</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_6_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88638, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88638 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_7 @ 0XFCE8863C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_7_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE8863C, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8863C 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_8 @ 0XFCE88640</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_8_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88640, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88640 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_9 @ 0XFCE88644</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_9_ATTR                                           0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88644, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88644 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_10 @ 0XFCE88648</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_10_ATTR                                          0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88648, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88648 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_11 @ 0XFCE8864C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_11_ATTR                                          0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE8864C, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8864C 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_12 @ 0XFCE88650</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_12_ATTR                                          0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88650, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88650 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_13 @ 0XFCE88654</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_13_ATTR                                          0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88654, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88654 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_14 @ 0XFCE88658</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_14_ATTR                                          0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE88658, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88658 0x00FFFFFF 0x00000000
		# Register : PFx_CLASS_CODE_15 @ 0XFCE8865C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CLASS_CODE_15_ATTR                                          0x000

		# Class Code: Code identifying basic function, subclass and applicable programming interface. Transferred to the Class Code, Su
		# -Class Code and Programming Interface. VFs must return the same Class code as the corresponding PF.
		#(OFFSET, MASK, VALUE)      (0XFCE8865C, 0x00FFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8865C 0x00FFFFFF 0x00000000
		# Register : PFx_INTERRUPT_PIN_0 @ 0XFCE88660</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_0_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88660, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88660 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_1 @ 0XFCE88664</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_1_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88664, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88664 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_2 @ 0XFCE88668</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_2_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88668, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88668 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_3 @ 0XFCE8866C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_3_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE8866C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8866C 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_4 @ 0XFCE88670</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_4_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88670, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88670 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_5 @ 0XFCE88674</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_5_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88674, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88674 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_6 @ 0XFCE88678</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_6_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88678, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88678 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_7 @ 0XFCE8867C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_7_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE8867C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8867C 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_8 @ 0XFCE88680</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_8_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88680, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88680 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_9 @ 0XFCE88684</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_9_ATTR                                        0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88684, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88684 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_10 @ 0XFCE88688</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_10_ATTR                                       0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88688, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88688 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_11 @ 0XFCE8868C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_11_ATTR                                       0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE8868C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8868C 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_12 @ 0XFCE88690</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_12_ATTR                                       0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88690, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88690 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_13 @ 0XFCE88694</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_13_ATTR                                       0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88694, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88694 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_14 @ 0XFCE88698</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_14_ATTR                                       0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE88698, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88698 0x00000007 0x00000000
		# Register : PFx_INTERRUPT_PIN_15 @ 0XFCE8869C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_INTERRUPT_PIN_15_ATTR                                       0

		# Interrupt Pin Register: Indicates mapping for legacy interrupt messages. Valid values are 0 NONE 1 INTA, 2 INTB, 3 INTC, 4 IN
		# D. Zero indicates no legacy interrupt messages used. Doesnot apply to VFs.
		#(OFFSET, MASK, VALUE)      (0XFCE8869C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8869C 0x00000007 0x00000000
		# Register : PFx_CAPABILITY_POINTER_0 @ 0XFCE886A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_0_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886A0, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886A0 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_1 @ 0XFCE886A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_1_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886A4, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886A4 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_2 @ 0XFCE886A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_2_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886A8, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886A8 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_3 @ 0XFCE886AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_3_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886AC, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886AC 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_4 @ 0XFCE886B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_4_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886B0, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886B0 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_5 @ 0XFCE886B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_5_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886B4, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886B4 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_6 @ 0XFCE886B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_6_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886B8, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886B8 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_7 @ 0XFCE886BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_7_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886BC, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886BC 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_8 @ 0XFCE886C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_8_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886C0, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886C0 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_9 @ 0XFCE886C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_9_ATTR                                   0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886C4, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886C4 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_10 @ 0XFCE886C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_10_ATTR                                  0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886C8, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886C8 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_11 @ 0XFCE886CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_11_ATTR                                  0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886CC, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886CC 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_12 @ 0XFCE886D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_12_ATTR                                  0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886D0, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886D0 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_13 @ 0XFCE886D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_13_ATTR                                  0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886D4, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886D4 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_14 @ 0XFCE886D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_14_ATTR                                  0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886D8, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886D8 0x000000FF 0x00000040
		# Register : PFx_CAPABILITY_POINTER_15 @ 0XFCE886DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_CAPABILITY_POINTER_15_ATTR                                  0x40

		# Capability Pointer: Next capability pointer at 34H in each PF.
		#(OFFSET, MASK, VALUE)      (0XFCE886DC, 0x000000FFU ,0x00000040U)  */
    mask_write 0XFCE886DC 0x000000FF 0x00000040
		# Register : PFx_VENDOR_ID_0 @ 0XFCE886E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_0_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886E0, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886E0 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_1 @ 0XFCE886E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_1_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886E4, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886E4 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_2 @ 0XFCE886E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_2_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886E8, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886E8 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_3 @ 0XFCE886EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_3_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886EC, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886EC 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_4 @ 0XFCE886F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_4_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886F0, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886F0 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_5 @ 0XFCE886F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_5_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886F4, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886F4 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_6 @ 0XFCE886F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_6_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886F8, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886F8 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_7 @ 0XFCE886FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_7_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE886FC, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE886FC 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_8 @ 0XFCE88700</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_8_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE88700, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88700 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_9 @ 0XFCE88704</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_9_ATTR                                            4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE88704, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88704 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_10 @ 0XFCE88708</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_10_ATTR                                           4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE88708, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88708 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_11 @ 0XFCE8870C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_11_ATTR                                           4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE8870C, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE8870C 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_12 @ 0XFCE88710</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_12_ATTR                                           4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE88710, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88710 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_13 @ 0XFCE88714</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_13_ATTR                                           4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE88714, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88714 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_14 @ 0XFCE88718</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_14_ATTR                                           4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE88718, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88718 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_15 @ 0XFCE8871C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_15_ATTR                                           4334

		# Vendor ID : Per Function VendorID
		#(OFFSET, MASK, VALUE)      (0XFCE8871C, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE8871C 0x0000FFFF 0x000010EE
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_0 @ 0XFCE88720</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_0_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88720, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88720 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_1 @ 0XFCE88724</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_1_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88724, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88724 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_2 @ 0XFCE88728</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_2_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88728, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88728 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_3 @ 0XFCE8872C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_3_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8872C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8872C 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_4 @ 0XFCE88730</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_4_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88730, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88730 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_5 @ 0XFCE88734</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_5_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88734, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88734 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_6 @ 0XFCE88738</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_6_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88738, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88738 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_7 @ 0XFCE8873C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_7_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8873C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8873C 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_8 @ 0XFCE88740</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_8_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88740, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88740 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_9 @ 0XFCE88744</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_9_ATTR                              0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88744, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88744 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_10 @ 0XFCE88748</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_10_ATTR                             0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88748, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88748 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_11 @ 0XFCE8874C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_11_ATTR                             0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8874C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8874C 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_12 @ 0XFCE88750</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_12_ATTR                             0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88750, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88750 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_13 @ 0XFCE88754</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_13_ATTR                             0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88754, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88754 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_14 @ 0XFCE88758</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_14_ATTR                             0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88758, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88758 0x00000001 0x00000000
		# Register : PFx_VENDOR_ID_ATTR_OVERRIDE_15 @ 0XFCE8875C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_VENDOR_ID_ATTR_OVERRIDE_15_ATTR                             0x0

		# Vendor ID Override : Per Function VendorID Override. 0b - PFx_VENDOR_ID is used by the function. 1b - cfg_vend_id[15:0] input
		# port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8875C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8875C 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_0 @ 0XFCE88760</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_0_ATTR                                            45119

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88760, 0x0000FFFFU ,0x0000B03FU)  */
    mask_write 0XFCE88760 0x0000FFFF 0x0000B03F
		# Register : PFx_DEVICE_ID_1 @ 0XFCE88764</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_1_ATTR                                            45375

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88764, 0x0000FFFFU ,0x0000B13FU)  */
    mask_write 0XFCE88764 0x0000FFFF 0x0000B13F
		# Register : PFx_DEVICE_ID_2 @ 0XFCE88768</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_2_ATTR                                            45631

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88768, 0x0000FFFFU ,0x0000B23FU)  */
    mask_write 0XFCE88768 0x0000FFFF 0x0000B23F
		# Register : PFx_DEVICE_ID_3 @ 0XFCE8876C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_3_ATTR                                            45887

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE8876C, 0x0000FFFFU ,0x0000B33FU)  */
    mask_write 0XFCE8876C 0x0000FFFF 0x0000B33F
		# Register : PFx_DEVICE_ID_4 @ 0XFCE88770</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_4_ATTR                                            46143

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88770, 0x0000FFFFU ,0x0000B43FU)  */
    mask_write 0XFCE88770 0x0000FFFF 0x0000B43F
		# Register : PFx_DEVICE_ID_5 @ 0XFCE88774</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_5_ATTR                                            46399

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88774, 0x0000FFFFU ,0x0000B53FU)  */
    mask_write 0XFCE88774 0x0000FFFF 0x0000B53F
		# Register : PFx_DEVICE_ID_6 @ 0XFCE88778</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_6_ATTR                                            46655

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88778, 0x0000FFFFU ,0x0000B63FU)  */
    mask_write 0XFCE88778 0x0000FFFF 0x0000B63F
		# Register : PFx_DEVICE_ID_7 @ 0XFCE8877C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_7_ATTR                                            46911

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE8877C, 0x0000FFFFU ,0x0000B73FU)  */
    mask_write 0XFCE8877C 0x0000FFFF 0x0000B73F
		# Register : PFx_DEVICE_ID_8 @ 0XFCE88780</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_8_ATTR                                            47167

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88780, 0x0000FFFFU ,0x0000B83FU)  */
    mask_write 0XFCE88780 0x0000FFFF 0x0000B83F
		# Register : PFx_DEVICE_ID_9 @ 0XFCE88784</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_9_ATTR                                            47423

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88784, 0x0000FFFFU ,0x0000B93FU)  */
    mask_write 0XFCE88784 0x0000FFFF 0x0000B93F
		# Register : PFx_DEVICE_ID_10 @ 0XFCE88788</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_10_ATTR                                           47679

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88788, 0x0000FFFFU ,0x0000BA3FU)  */
    mask_write 0XFCE88788 0x0000FFFF 0x0000BA3F
		# Register : PFx_DEVICE_ID_11 @ 0XFCE8878C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_11_ATTR                                           47935

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE8878C, 0x0000FFFFU ,0x0000BB3FU)  */
    mask_write 0XFCE8878C 0x0000FFFF 0x0000BB3F
		# Register : PFx_DEVICE_ID_12 @ 0XFCE88790</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_12_ATTR                                           48191

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88790, 0x0000FFFFU ,0x0000BC3FU)  */
    mask_write 0XFCE88790 0x0000FFFF 0x0000BC3F
		# Register : PFx_DEVICE_ID_13 @ 0XFCE88794</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_13_ATTR                                           48447

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88794, 0x0000FFFFU ,0x0000BD3FU)  */
    mask_write 0XFCE88794 0x0000FFFF 0x0000BD3F
		# Register : PFx_DEVICE_ID_14 @ 0XFCE88798</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_14_ATTR                                           48703

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE88798, 0x0000FFFFU ,0x0000BE3FU)  */
    mask_write 0XFCE88798 0x0000FFFF 0x0000BE3F
		# Register : PFx_DEVICE_ID_15 @ 0XFCE8879C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_15_ATTR                                           48959

		# Device ID : Per Function Device ID
		#(OFFSET, MASK, VALUE)      (0XFCE8879C, 0x0000FFFFU ,0x0000BF3FU)  */
    mask_write 0XFCE8879C 0x0000FFFF 0x0000BF3F
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_0 @ 0XFCE887A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_0_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887A0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887A0 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_1 @ 0XFCE887A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_1_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887A4 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_2 @ 0XFCE887A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_2_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887A8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887A8 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_3 @ 0XFCE887AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_3_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887AC 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_4 @ 0XFCE887B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_4_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887B0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887B0 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_5 @ 0XFCE887B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_5_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887B4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887B4 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_6 @ 0XFCE887B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_6_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887B8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887B8 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_7 @ 0XFCE887BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_7_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887BC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887BC 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_8 @ 0XFCE887C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_8_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887C0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887C0 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_9 @ 0XFCE887C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_9_ATTR                              0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887C4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887C4 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_10 @ 0XFCE887C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_10_ATTR                             0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887C8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887C8 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_11 @ 0XFCE887CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_11_ATTR                             0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887CC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887CC 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_12 @ 0XFCE887D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_12_ATTR                             0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887D0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887D0 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_13 @ 0XFCE887D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_13_ATTR                             0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887D4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887D4 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_14 @ 0XFCE887D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_14_ATTR                             0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887D8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887D8 0x00000001 0x00000000
		# Register : PFx_DEVICE_ID_ATTR_OVERRIDE_15 @ 0XFCE887DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEVICE_ID_ATTR_OVERRIDE_15_ATTR                             0x0

		# Device ID Override : Per Function DeviceID Override 1b - PFx_DEVICE_ID is used by the function. 0b - cfg_dev_id[15:0] input p
		# rt is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE887DC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE887DC 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_0 @ 0XFCE887E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_0_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887E0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887E0 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_1 @ 0XFCE887E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_1_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887E4, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887E4 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_2 @ 0XFCE887E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_2_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887E8, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887E8 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_3 @ 0XFCE887EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_3_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887EC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887EC 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_4 @ 0XFCE887F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_4_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887F0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887F0 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_5 @ 0XFCE887F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_5_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887F4, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887F4 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_6 @ 0XFCE887F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_6_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887F8, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887F8 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_7 @ 0XFCE887FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_7_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE887FC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE887FC 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_8 @ 0XFCE88800</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_8_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE88800, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88800 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_9 @ 0XFCE88804</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_9_ATTR                                          0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE88804, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88804 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_10 @ 0XFCE88808</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_10_ATTR                                         0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE88808, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88808 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_11 @ 0XFCE8880C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_11_ATTR                                         0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE8880C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8880C 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_12 @ 0XFCE88810</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_12_ATTR                                         0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE88810, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88810 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_13 @ 0XFCE88814</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_13_ATTR                                         0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE88814, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88814 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_14 @ 0XFCE88818</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_14_ATTR                                         0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE88818, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88818 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_15 @ 0XFCE8881C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_15_ATTR                                         0

		# Revision ID : Per Function Revsion ID
		#(OFFSET, MASK, VALUE)      (0XFCE8881C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8881C 0x000000FF 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_0 @ 0XFCE88820</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_0_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88820, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88820 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_1 @ 0XFCE88824</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_1_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88824, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88824 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_2 @ 0XFCE88828</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_2_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88828, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88828 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_3 @ 0XFCE8882C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_3_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8882C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8882C 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_4 @ 0XFCE88830</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_4_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88830, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88830 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_5 @ 0XFCE88834</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_5_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88834, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88834 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_6 @ 0XFCE88838</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_6_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88838, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88838 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_7 @ 0XFCE8883C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_7_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8883C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8883C 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_8 @ 0XFCE88840</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_8_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88840, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88840 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_9 @ 0XFCE88844</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_9_ATTR                            0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88844, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88844 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_10 @ 0XFCE88848</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_10_ATTR                           0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88848, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88848 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_11 @ 0XFCE8884C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_11_ATTR                           0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8884C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8884C 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_12 @ 0XFCE88850</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_12_ATTR                           0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88850, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88850 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_13 @ 0XFCE88854</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_13_ATTR                           0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88854, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88854 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_14 @ 0XFCE88858</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_14_ATTR                           0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE88858, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88858 0x00000001 0x00000000
		# Register : PFx_REVISION_ID_ATTR_OVERRIDE_15 @ 0XFCE8885C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_REVISION_ID_ATTR_OVERRIDE_15_ATTR                           0x0

		# Revision ID Override : Per Function RevisionID Override 1b - PFx_REVISION_ID is used by the function. 0b - cfg_rev_id[15:0] i
		# put port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE8885C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8885C 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_0 @ 0XFCE88860</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_0_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88860, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88860 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_1 @ 0XFCE88864</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_1_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88864, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88864 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_2 @ 0XFCE88868</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_2_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88868, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88868 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_3 @ 0XFCE8886C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_3_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE8886C, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE8886C 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_4 @ 0XFCE88870</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_4_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88870, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88870 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_5 @ 0XFCE88874</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_5_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88874, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88874 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_6 @ 0XFCE88878</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_6_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88878, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88878 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_7 @ 0XFCE8887C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_7_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE8887C, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE8887C 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_8 @ 0XFCE88880</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_8_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88880, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88880 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_9 @ 0XFCE88884</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_9_ATTR                                        7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88884, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88884 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_10 @ 0XFCE88888</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_10_ATTR                                       7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88888, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88888 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_11 @ 0XFCE8888C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_11_ATTR                                       7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE8888C, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE8888C 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_12 @ 0XFCE88890</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_12_ATTR                                       7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88890, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88890 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_13 @ 0XFCE88894</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_13_ATTR                                       7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88894, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88894 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_14 @ 0XFCE88898</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_14_ATTR                                       7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88898, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE88898 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_15 @ 0XFCE8889C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_15_ATTR                                       7

		# Sub-System ID: per Function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE8889C, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE8889C 0x0000FFFF 0x00000007
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_0 @ 0XFCE888A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_0_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888A0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888A0 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_1 @ 0XFCE888A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_1_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888A4 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_2 @ 0XFCE888A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_2_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888A8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888A8 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_3 @ 0XFCE888AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_3_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888AC 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_4 @ 0XFCE888B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_4_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888B0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888B0 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_5 @ 0XFCE888B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_5_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888B4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888B4 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_6 @ 0XFCE888B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_6_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888B8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888B8 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_7 @ 0XFCE888BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_7_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888BC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888BC 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_8 @ 0XFCE888C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_8_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888C0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888C0 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_9 @ 0XFCE888C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_9_ATTR                          0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888C4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888C4 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_10 @ 0XFCE888C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_10_ATTR                         0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888C8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888C8 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_11 @ 0XFCE888CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_11_ATTR                         0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888CC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888CC 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_12 @ 0XFCE888D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_12_ATTR                         0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888D0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888D0 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_13 @ 0XFCE888D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_13_ATTR                         0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888D4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888D4 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_14 @ 0XFCE888D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_14_ATTR                         0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888D8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888D8 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_ID_ATTR_OVERRIDE_15 @ 0XFCE888DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_ID_ATTR_OVERRIDE_15_ATTR                         0x0

		# Sub-System ID Override : Per Function Sub-System ID Override 1b - PFx_SUB_SYSTEM_ID is used by the function. 0b - cfg_subsys_
		# d[15:0] input port is used by the function.
		#(OFFSET, MASK, VALUE)      (0XFCE888DC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE888DC 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_0 @ 0XFCE888E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_0_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888E0, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888E0 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_1 @ 0XFCE888E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_1_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888E4, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888E4 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_2 @ 0XFCE888E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_2_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888E8, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888E8 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_3 @ 0XFCE888EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_3_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888EC, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888EC 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_4 @ 0XFCE888F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_4_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888F0, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888F0 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_5 @ 0XFCE888F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_5_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888F4, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888F4 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_6 @ 0XFCE888F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_6_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888F8, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888F8 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_7 @ 0XFCE888FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_7_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE888FC, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE888FC 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_8 @ 0XFCE88900</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_8_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88900, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88900 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_9 @ 0XFCE88904</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_9_ATTR                                 4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88904, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88904 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_10 @ 0XFCE88908</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_10_ATTR                                4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88908, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88908 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_11 @ 0XFCE8890C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_11_ATTR                                4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE8890C, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE8890C 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_12 @ 0XFCE88910</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_12_ATTR                                4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88910, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88910 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_13 @ 0XFCE88914</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_13_ATTR                                4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88914, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88914 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_14 @ 0XFCE88918</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_14_ATTR                                4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE88918, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE88918 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_15 @ 0XFCE8891C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_15_ATTR                                4334

		# Sub-System Vendor ID: Per function Sub-System ID
		#(OFFSET, MASK, VALUE)      (0XFCE8891C, 0x0000FFFFU ,0x000010EEU)  */
    mask_write 0XFCE8891C 0x0000FFFF 0x000010EE
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_0 @ 0XFCE88920</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_0_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88920, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88920 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_1 @ 0XFCE88924</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_1_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88924, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88924 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_2 @ 0XFCE88928</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_2_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88928, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88928 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_3 @ 0XFCE8892C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_3_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE8892C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8892C 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_4 @ 0XFCE88930</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_4_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88930, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88930 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_5 @ 0XFCE88934</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_5_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88934, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88934 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_6 @ 0XFCE88938</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_6_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88938, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88938 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_7 @ 0XFCE8893C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_7_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE8893C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8893C 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_8 @ 0XFCE88940</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_8_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88940, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88940 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_9 @ 0XFCE88944</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_9_ATTR                   0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88944, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88944 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_10 @ 0XFCE88948</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_10_ATTR                  0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88948, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88948 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_11 @ 0XFCE8894C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_11_ATTR                  0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE8894C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8894C 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_12 @ 0XFCE88950</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_12_ATTR                  0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88950, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88950 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_13 @ 0XFCE88954</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_13_ATTR                  0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88954, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88954 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_14 @ 0XFCE88958</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_14_ATTR                  0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE88958, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88958 0x00000001 0x00000000
		# Register : PFx_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_15 @ 0XFCE8895C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SUB_SYSTEM_VENDOR_ID_ATTR_OVERRIDE_15_ATTR                  0x0

		# Sub-System Vendor ID Override for PFs 1b - PFx_SUB_SYSTEM_VENDOR_ID is used by the function. 0b - cfg_subsys_vend_id[15:0] in
		# ut port is used by all function.
		#(OFFSET, MASK, VALUE)      (0XFCE8895C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8895C 0x00000001 0x00000000
		# Register : VF0_CAPABILITY_POINTER @ 0XFCE88960</p>

		# 
		# CPM5_PCIE1_ATTR_VF0_CAPABILITY_POINTER_ATTR                                     0x60

		# Capability Pointer: Next capability pointer at 34H for all VFs
		#(OFFSET, MASK, VALUE)      (0XFCE88960, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE88960 0x000000FF 0x00000060
		# Register : LEGACY_CFG_EXTEND_INTERFACE_ENABLE @ 0XFCE88964</p>

		# 
		# CPM5_PCIE1_ATTR_LEGACY_CFG_EXTEND_INTERFACE_ENABLE_ATTR                         0x0

		# Configuration Legacy Space Extend Interface Enable: When TRUE, all received Configuration Type0 Transactions, in register add
		# ess range 0xB0-0xBF, for every enabled function, will be steered to the CFGEXT interface.
		#(OFFSET, MASK, VALUE)      (0XFCE88964, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88964 0x00000001 0x00000000
		# Register : EXTENDED_CFG_EXTEND_INTERFACE_ENABLE @ 0XFCE88968</p>

		# 
		# CPM5_PCIE1_ATTR_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE_ATTR                       0x0

		# Configuration Extended Space Extend Interface Enable: When TRUE, all received Configuration Type0 Transactions, in the regist
		# r address range selected by EXTENDED_CFG_LARGE_SIZE_ENABLE, for every enabled function, will be steered to the CFGEXT interfa
		# e.
		#(OFFSET, MASK, VALUE)      (0XFCE88968, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88968 0x00000001 0x00000000
		# Register : LEGACY_CFG_LARGE_SIZE_ENABLE @ 0XFCE8896C</p>

		# 
		# CPM5_PCIE1_ATTR_LEGACY_CFG_LARGE_SIZE_ENABLE_ATTR                               0x0

		# Configuration Legacy Space Large Extend Size Enable: When FALSE, Small Legacy Cfg Extend Size is enabled (B0H-BCH). When TRUE
		#  Large Legacy Cfg Extend Size is enabled (B0H-FCH).
		#(OFFSET, MASK, VALUE)      (0XFCE8896C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8896C 0x00000001 0x00000000
		# Register : EXTENDED_CFG_LARGE_SIZE_ENABLE @ 0XFCE88970</p>

		# 
		# CPM5_PCIE1_ATTR_EXTENDED_CFG_LARGE_SIZE_ENABLE_ATTR                             0x0

		# Configuration Extended Space Large Extend Size Enable: When FALSE, Small Cfg Extend Mode is enabled (Mode0) (E00H-FFCH). When
		# TRUE, Large Cfg Extend Size is enabled (Mode1) (600H-FFCH).
		#(OFFSET, MASK, VALUE)      (0XFCE88970, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88970 0x00000001 0x00000000
		# Register : CMDSTAT_EN_INT_DISABLE @ 0XFCE88974</p>

		# 
		# CPM5_PCIE1_ATTR_CMDSTAT_EN_INT_DISABLE_ATTR                                     0x0

		# Command/Status Register Enable Interrupt Disable: When TRUE, selects pre-Hood/pre-Everest mode of logic gating based on the I
		# terrupt Disable bit in the Command/Status Register. When FALSE, selects Hood/Everest/XDMA/QDMA mode of no logic gating with t
		# e Interrupt Disable bit in the Command/Status Register.
		#(OFFSET, MASK, VALUE)      (0XFCE88974, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88974 0x00000001 0x00000000
		# Register : TL2CFG_IF_PARITY_CHK @ 0XFCE8897C</p>

		# 
		# CPM5_PCIE1_ATTR_TL2CFG_IF_PARITY_CHK_ATTR                                       0x0

		# Data Path Parity Check on TL2CFG TRUE -- parity check is enabled FALSE -- parity check is disabled
		#(OFFSET, MASK, VALUE)      (0XFCE8897C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8897C 0x00000001 0x00000000
		# Register : HEADER_TYPE_OVERRIDE @ 0XFCE88980</p>

		# 
		# CPM5_PCIE1_ATTR_HEADER_TYPE_OVERRIDE_ATTR                                       0x0

		# Header Type Override TRUE - Header Type field bit0 will set to 0b. FALSE - For Root Port and Switches, Header Type bit0 will 
		# e set to 1b
		#(OFFSET, MASK, VALUE)      (0XFCE88980, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88980 0x00000001 0x00000000
		# Register : CFG_SPEC_4_0 @ 0XFCE88984</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_SPEC_4_0_ATTR                                               0x1

		# Cfg 4.0 Spec: Enables PCI Express 4.0 Specification features in the Cfg Space.
		#(OFFSET, MASK, VALUE)      (0XFCE88984, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88984 0x00000001 0x00000001
		# Register : CFG_SPEC_5_0 @ 0XFCE88988</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_SPEC_5_0_ATTR                                               0x1

		# Cfg 5.0 Spec: Enables PCI Express 5.0 Specification features in the Cfg Space.
		#(OFFSET, MASK, VALUE)      (0XFCE88988, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88988 0x00000001 0x00000001
		# Register : CFG_USER_SPARE @ 0XFCE8898C</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_USER_SPARE_ATTR                                             0x0

		# Config Module User Spare Attributes: 32-bit attribute spares bits [1:0]: 00b - default mode; 01b, 10b -- disable 1 pipeline s
		# age of cfg_perfunc_vld, 11b -- disable 2 pipeline stages of cfg_perfunc_vld EDT 1003062
		#(OFFSET, MASK, VALUE)      (0XFCE8898C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8898C 0xFFFFFFFF 0x00000000
		# Register : CFG_SPARE @ 0XFCE88990</p>

		# 
		# CPM5_PCIE1_ATTR_CFG_SPARE_ATTR                                                  0x0

		# Config Module Spare Attributes: 32-bit attribute spares bit[0] = 1b - write request on cfg_mgmt are visible on cfg_wrreq inte
		# face. 0b - write request on cfg_mgmt are not visible on cfg_wrreq interface (attr_enable_wrreq_cfg_mgmt) bit[1] = 1b - Set Re
		# axed Ordering Supported bit in ATS Capability Register (Offset 04h). 0b - Clear Relaxed Ordering Supported bit in ATS Capabil
		# ty Register (Offset 04h). (attr_ats_relaxed_ordering_supported). bit[2] = 0b - MultiFunction L0s enable fix. 1b - Disable fix
		#  bit[3] = 0b - MultiFunction L1 enable fix. 1b - Disable fix. bit[4] = 0b - Extended Tag enable fix. 1b - Disable fix. bit[5]
		# = 0b - dataproducer error msg function id fix. 1b - Disable fix. EDT-1003471. bit[6] = 0b - rx_pkt_proc clear error msg funct
		# on id fix. 1b - Disable fix. EDT-1003471. bit[7] = 0b - rx_pkt_proc error msg function id fix. 1b - Disable fix. EDT-1003471.
		# bit[8] = 0b - Added Link Capabilities 2 register to VFs. 1b - Disable fix. EDT-1003242. bit[9] = 0b - OR 10b tag requester en
		# bles. 1b - Disable fix. EDT-1002789.
		#(OFFSET, MASK, VALUE)      (0XFCE88990, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE88990 0xFFFFFFFF 0x00000000
		# Register : PFx_BAR0_CONTROL_0 @ 0XFCE88994</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_0_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88994, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE88994 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_1 @ 0XFCE88998</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_1_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88998, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE88998 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_2 @ 0XFCE8899C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_2_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8899C, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE8899C 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_3 @ 0XFCE889A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_3_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889A0, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889A0 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_4 @ 0XFCE889A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_4_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889A4, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889A4 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_5 @ 0XFCE889A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_5_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889A8, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889A8 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_6 @ 0XFCE889AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_6_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889AC, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889AC 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_7 @ 0XFCE889B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_7_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889B0, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889B0 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_8 @ 0XFCE889B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_8_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889B4, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889B4 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_9 @ 0XFCE889B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_9_ATTR                                         4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889B8, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889B8 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_10 @ 0XFCE889BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_10_ATTR                                        4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889BC, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889BC 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_11 @ 0XFCE889C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_11_ATTR                                        4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889C0, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889C0 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_12 @ 0XFCE889C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_12_ATTR                                        4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889C4, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889C4 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_13 @ 0XFCE889C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_13_ATTR                                        4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889C8, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889C8 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_14 @ 0XFCE889CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_14_ATTR                                        4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889CC, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889CC 0x00000007 0x00000004
		# Register : PFx_BAR0_CONTROL_15 @ 0XFCE889D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_CONTROL_15_ATTR                                        4

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE889D0, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE889D0 0x00000007 0x00000004
		# Register : PFx_BAR0_APERTURE_SIZE_0 @ 0XFCE889D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_0_ATTR                                   13

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889D4, 0x0000003FU ,0x0000000DU)  */
    mask_write 0XFCE889D4 0x0000003F 0x0000000D
		# Register : PFx_BAR0_APERTURE_SIZE_1 @ 0XFCE889D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_1_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889D8, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889D8 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_2 @ 0XFCE889DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_2_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889DC, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889DC 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_3 @ 0XFCE889E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_3_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889E0, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889E0 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_4 @ 0XFCE889E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_4_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889E4, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889E4 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_5 @ 0XFCE889E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_5_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889E8, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889E8 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_6 @ 0XFCE889EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_6_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889EC, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889EC 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_7 @ 0XFCE889F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_7_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889F0, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889F0 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_8 @ 0XFCE889F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_8_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889F4, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889F4 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_9 @ 0XFCE889F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_9_ATTR                                   10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889F8, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889F8 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_10 @ 0XFCE889FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_10_ATTR                                  10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE889FC, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE889FC 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_11 @ 0XFCE88A00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_11_ATTR                                  10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A00, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE88A00 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_12 @ 0XFCE88A04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_12_ATTR                                  10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A04, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE88A04 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_13 @ 0XFCE88A08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_13_ATTR                                  10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A08, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE88A08 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_14 @ 0XFCE88A0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_14_ATTR                                  10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A0C, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE88A0C 0x0000003F 0x0000000A
		# Register : PFx_BAR0_APERTURE_SIZE_15 @ 0XFCE88A10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR0_APERTURE_SIZE_15_ATTR                                  10

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A10, 0x0000003FU ,0x0000000AU)  */
    mask_write 0XFCE88A10 0x0000003F 0x0000000A
		# Register : PFx_BAR1_CONTROL_0 @ 0XFCE88A14</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_0_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A14, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A14 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_1 @ 0XFCE88A18</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_1_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A18, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A18 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_2 @ 0XFCE88A1C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_2_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A1C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A1C 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_3 @ 0XFCE88A20</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_3_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A20, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A20 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_4 @ 0XFCE88A24</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_4_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A24, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A24 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_5 @ 0XFCE88A28</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_5_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A28, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A28 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_6 @ 0XFCE88A2C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_6_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A2C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A2C 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_7 @ 0XFCE88A30</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_7_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A30, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A30 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_8 @ 0XFCE88A34</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_8_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A34, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A34 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_9 @ 0XFCE88A38</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_9_ATTR                                         0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A38, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A38 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_10 @ 0XFCE88A3C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_10_ATTR                                        0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A3C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A3C 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_11 @ 0XFCE88A40</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_11_ATTR                                        0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A40, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A40 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_12 @ 0XFCE88A44</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_12_ATTR                                        0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A44, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A44 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_13 @ 0XFCE88A48</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_13_ATTR                                        0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A48, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A48 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_14 @ 0XFCE88A4C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_14_ATTR                                        0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A4C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A4C 0x00000007 0x00000000
		# Register : PFx_BAR1_CONTROL_15 @ 0XFCE88A50</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_CONTROL_15_ATTR                                        0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A50, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A50 0x00000007 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_0 @ 0XFCE88A54</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_0_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A54, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A54 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_1 @ 0XFCE88A58</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_1_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A58, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A58 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_2 @ 0XFCE88A5C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_2_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A5C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A5C 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_3 @ 0XFCE88A60</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_3_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A60, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A60 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_4 @ 0XFCE88A64</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_4_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A64, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A64 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_5 @ 0XFCE88A68</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_5_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A68, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A68 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_6 @ 0XFCE88A6C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_6_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A6C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A6C 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_7 @ 0XFCE88A70</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_7_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A70, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A70 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_8 @ 0XFCE88A74</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_8_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A74, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A74 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_9 @ 0XFCE88A78</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_9_ATTR                                   0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A78, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A78 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_10 @ 0XFCE88A7C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_10_ATTR                                  0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A7C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A7C 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_11 @ 0XFCE88A80</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_11_ATTR                                  0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A80, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A80 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_12 @ 0XFCE88A84</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_12_ATTR                                  0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A84, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A84 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_13 @ 0XFCE88A88</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_13_ATTR                                  0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A88, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A88 0x0000001F 0x00000000
		# Register : PFx_BAR1_APERTURE_SIZE_14 @ 0XFCE88A8C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR1_APERTURE_SIZE_14_ATTR                                  0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88A8C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88A8C 0x0000001F 0x00000000
		# Register : PFx_BAR2_CONTROL_0 @ 0XFCE88A94</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_0_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A94, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A94 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_1 @ 0XFCE88A98</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_1_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A98, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A98 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_2 @ 0XFCE88A9C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_2_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88A9C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88A9C 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_3 @ 0XFCE88AA0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_3_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AA0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AA0 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_4 @ 0XFCE88AA4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_4_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AA4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AA4 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_5 @ 0XFCE88AA8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_5_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AA8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AA8 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_6 @ 0XFCE88AAC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_6_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AAC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AAC 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_7 @ 0XFCE88AB0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_7_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AB0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AB0 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_8 @ 0XFCE88AB4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_8_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AB4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AB4 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_9 @ 0XFCE88AB8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_9_ATTR                                         0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AB8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AB8 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_10 @ 0XFCE88ABC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_10_ATTR                                        0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88ABC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88ABC 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_11 @ 0XFCE88AC0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_11_ATTR                                        0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AC0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AC0 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_12 @ 0XFCE88AC4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_12_ATTR                                        0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AC4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AC4 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_13 @ 0XFCE88AC8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_13_ATTR                                        0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AC8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AC8 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_14 @ 0XFCE88ACC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_14_ATTR                                        0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88ACC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88ACC 0x00000007 0x00000000
		# Register : PFx_BAR2_CONTROL_15 @ 0XFCE88AD0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_CONTROL_15_ATTR                                        0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE88AD0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88AD0 0x00000007 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_0 @ 0XFCE88AD4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_0_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AD4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AD4 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_1 @ 0XFCE88AD8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_1_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AD8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AD8 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_2 @ 0XFCE88ADC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_2_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88ADC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88ADC 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_3 @ 0XFCE88AE0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_3_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AE0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AE0 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_4 @ 0XFCE88AE4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_4_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AE4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AE4 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_5 @ 0XFCE88AE8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_5_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AE8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AE8 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_6 @ 0XFCE88AEC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_6_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AEC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AEC 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_7 @ 0XFCE88AF0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_7_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AF0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AF0 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_8 @ 0XFCE88AF4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_8_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AF4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AF4 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_9 @ 0XFCE88AF8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_9_ATTR                                   0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AF8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AF8 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_10 @ 0XFCE88AFC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_10_ATTR                                  0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88AFC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88AFC 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_11 @ 0XFCE88B00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_11_ATTR                                  0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B00, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88B00 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_12 @ 0XFCE88B04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_12_ATTR                                  0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B04, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88B04 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_13 @ 0XFCE88B08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_13_ATTR                                  0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B08, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88B08 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_14 @ 0XFCE88B0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_14_ATTR                                  0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B0C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88B0C 0x0000003F 0x00000000
		# Register : PFx_BAR2_APERTURE_SIZE_15 @ 0XFCE88B10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_15_ATTR                                  0x0

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR2_APERTURE_SIZE_15_ATTR                                  0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B10, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88B10 0x0000003F 0x00000000
		# Register : PFx_BAR3_CONTROL_0 @ 0XFCE88B14</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_0_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B14, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B14 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_1 @ 0XFCE88B18</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_1_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B18, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B18 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_2 @ 0XFCE88B1C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_2_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B1C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B1C 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_3 @ 0XFCE88B20</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_3_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B20, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B20 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_4 @ 0XFCE88B24</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_4_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B24, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B24 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_5 @ 0XFCE88B28</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_5_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B28, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B28 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_6 @ 0XFCE88B2C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_6_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B2C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B2C 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_7 @ 0XFCE88B30</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_7_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B30, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B30 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_8 @ 0XFCE88B34</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_8_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B34, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B34 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_9 @ 0XFCE88B38</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_9_ATTR                                         0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B38, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B38 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_10 @ 0XFCE88B3C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_10_ATTR                                        0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B3C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B3C 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_11 @ 0XFCE88B40</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_11_ATTR                                        0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B40, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B40 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_12 @ 0XFCE88B44</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_12_ATTR                                        0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B44, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B44 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_13 @ 0XFCE88B48</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_13_ATTR                                        0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B48, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B48 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_14 @ 0XFCE88B4C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_14_ATTR                                        0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B4C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B4C 0x00000007 0x00000000
		# Register : PFx_BAR3_CONTROL_15 @ 0XFCE88B50</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_CONTROL_15_ATTR                                        0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B50, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B50 0x00000007 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_0 @ 0XFCE88B54</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_0_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B54, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B54 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_1 @ 0XFCE88B58</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_1_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B58, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B58 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_2 @ 0XFCE88B5C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_2_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B5C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B5C 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_3 @ 0XFCE88B60</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_3_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B60, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B60 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_4 @ 0XFCE88B64</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_4_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B64, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B64 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_5 @ 0XFCE88B68</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_5_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B68, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B68 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_6 @ 0XFCE88B6C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_6_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B6C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B6C 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_7 @ 0XFCE88B70</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_7_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B70, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B70 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_8 @ 0XFCE88B74</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_8_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B74, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B74 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_9 @ 0XFCE88B78</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_9_ATTR                                   0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B78, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B78 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_10 @ 0XFCE88B7C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_10_ATTR                                  0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B7C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B7C 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_11 @ 0XFCE88B80</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_11_ATTR                                  0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B80, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B80 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_12 @ 0XFCE88B84</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_12_ATTR                                  0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B84, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B84 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_13 @ 0XFCE88B88</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_13_ATTR                                  0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B88, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B88 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_14 @ 0XFCE88B8C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_14_ATTR                                  0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B8C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B8C 0x0000001F 0x00000000
		# Register : PFx_BAR3_APERTURE_SIZE_15 @ 0XFCE88B90</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR3_APERTURE_SIZE_15_ATTR                                  0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE88B90, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88B90 0x0000001F 0x00000000
		# Register : PFx_BAR4_CONTROL_0 @ 0XFCE88B94</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_0_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B94, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B94 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_1 @ 0XFCE88B98</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_1_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B98, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B98 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_2 @ 0XFCE88B9C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_2_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88B9C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88B9C 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_3 @ 0XFCE88BA0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_3_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BA0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BA0 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_4 @ 0XFCE88BA4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_4_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BA4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BA4 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_5 @ 0XFCE88BA8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_5_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BA8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BA8 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_6 @ 0XFCE88BAC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_6_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BAC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BAC 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_7 @ 0XFCE88BB0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_7_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BB0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BB0 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_8 @ 0XFCE88BB4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_8_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BB4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BB4 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_9 @ 0XFCE88BB8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_9_ATTR                                         0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BB8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BB8 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_10 @ 0XFCE88BBC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_10_ATTR                                        0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BBC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BBC 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_11 @ 0XFCE88BC0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_11_ATTR                                        0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BC0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BC0 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_12 @ 0XFCE88BC4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_12_ATTR                                        0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BC4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BC4 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_13 @ 0XFCE88BC8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_13_ATTR                                        0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BC8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BC8 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_14 @ 0XFCE88BCC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_14_ATTR                                        0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BCC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BCC 0x00000007 0x00000000
		# Register : PFx_BAR4_CONTROL_15 @ 0XFCE88BD0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_CONTROL_15_ATTR                                        0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88BD0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88BD0 0x00000007 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_0 @ 0XFCE88BD4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_0_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BD4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BD4 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_1 @ 0XFCE88BD8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_1_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BD8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BD8 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_2 @ 0XFCE88BDC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_2_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BDC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BDC 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_3 @ 0XFCE88BE0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_3_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BE0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BE0 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_4 @ 0XFCE88BE4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_4_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BE4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BE4 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_5 @ 0XFCE88BE8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_5_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BE8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BE8 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_6 @ 0XFCE88BEC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_6_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BEC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BEC 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_7 @ 0XFCE88BF0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_7_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BF0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BF0 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_8 @ 0XFCE88BF4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_8_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BF4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BF4 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_9 @ 0XFCE88BF8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_9_ATTR                                   0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BF8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BF8 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_10 @ 0XFCE88BFC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_10_ATTR                                  0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88BFC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88BFC 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_11 @ 0XFCE88C00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_11_ATTR                                  0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88C00, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88C00 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_12 @ 0XFCE88C04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_12_ATTR                                  0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88C04, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88C04 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_13 @ 0XFCE88C08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_13_ATTR                                  0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88C08, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88C08 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_14 @ 0XFCE88C0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_14_ATTR                                  0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88C0C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88C0C 0x0000003F 0x00000000
		# Register : PFx_BAR4_APERTURE_SIZE_15 @ 0XFCE88C10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR4_APERTURE_SIZE_15_ATTR                                  0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE88C10, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE88C10 0x0000003F 0x00000000
		# Register : PFx_BAR5_CONTROL_0 @ 0XFCE88C14</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_0_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C14, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C14 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_1 @ 0XFCE88C18</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_1_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C18, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C18 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_2 @ 0XFCE88C1C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_2_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C1C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C1C 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_3 @ 0XFCE88C20</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_3_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C20, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C20 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_4 @ 0XFCE88C24</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_4_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C24, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C24 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_5 @ 0XFCE88C28</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_5_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C28, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C28 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_6 @ 0XFCE88C2C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_6_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C2C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C2C 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_7 @ 0XFCE88C30</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_7_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C30, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C30 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_8 @ 0XFCE88C34</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_8_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C34, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C34 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_9 @ 0XFCE88C38</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_9_ATTR                                         0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C38, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C38 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_10 @ 0XFCE88C3C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_10_ATTR                                        0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C3C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C3C 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_11 @ 0XFCE88C40</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_11_ATTR                                        0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C40, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C40 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_12 @ 0XFCE88C44</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_12_ATTR                                        0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C44, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C44 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_13 @ 0XFCE88C48</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_13_ATTR                                        0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C48, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C48 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_14 @ 0XFCE88C4C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_14_ATTR                                        0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C4C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C4C 0x00000007 0x00000000
		# Register : PFx_BAR5_CONTROL_15 @ 0XFCE88C50</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_CONTROL_15_ATTR                                        0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C50, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88C50 0x00000007 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_0 @ 0XFCE88C54</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_0_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C54, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C54 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_1 @ 0XFCE88C58</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_1_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C58, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C58 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_2 @ 0XFCE88C5C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_2_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C5C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C5C 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_3 @ 0XFCE88C60</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_3_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C60, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C60 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_4 @ 0XFCE88C64</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_4_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C64, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C64 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_5 @ 0XFCE88C68</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_5_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C68, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C68 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_6 @ 0XFCE88C6C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_6_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C6C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C6C 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_7 @ 0XFCE88C70</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_7_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C70, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C70 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_8 @ 0XFCE88C74</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_8_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C74, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C74 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_9 @ 0XFCE88C78</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_9_ATTR                                   0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C78, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C78 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_10 @ 0XFCE88C7C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_10_ATTR                                  0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C7C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C7C 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_11 @ 0XFCE88C80</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_11_ATTR                                  0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C80, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C80 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_12 @ 0XFCE88C84</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_12_ATTR                                  0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C84, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C84 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_13 @ 0XFCE88C88</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_13_ATTR                                  0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C88, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C88 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_14 @ 0XFCE88C8C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_14_ATTR                                  0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C8C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C8C 0x0000001F 0x00000000
		# Register : PFx_BAR5_APERTURE_SIZE_15 @ 0XFCE88C90</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_BAR5_APERTURE_SIZE_15_ATTR                                  0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE88C90, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88C90 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_0 @ 0XFCE88C94</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_0_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88C94, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88C94 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_1 @ 0XFCE88C98</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_1_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88C98, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88C98 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_2 @ 0XFCE88C9C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_2_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88C9C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88C9C 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_3 @ 0XFCE88CA0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_3_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CA0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CA0 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_4 @ 0XFCE88CA4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_4_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CA4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CA4 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_5 @ 0XFCE88CA8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_5_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CA8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CA8 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_6 @ 0XFCE88CAC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_6_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CAC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CAC 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_7 @ 0XFCE88CB0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_7_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CB0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CB0 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_8 @ 0XFCE88CB4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_8_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CB4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CB4 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_9 @ 0XFCE88CB8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_9_ATTR                                 0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CB8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CB8 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_10 @ 0XFCE88CBC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_10_ATTR                                0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CBC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CBC 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_11 @ 0XFCE88CC0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_11_ATTR                                0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CC0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CC0 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_12 @ 0XFCE88CC4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_12_ATTR                                0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CC4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CC4 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_13 @ 0XFCE88CC8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_13_ATTR                                0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CC8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CC8 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_14 @ 0XFCE88CCC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_14_ATTR                                0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CCC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CCC 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_ENABLE_15 @ 0XFCE88CD0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_ENABLE_15_ATTR                                0x0

		# PFx Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE88CD0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88CD0 0x00000001 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_0 @ 0XFCE88CD4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_0_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CD4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CD4 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_1 @ 0XFCE88CD8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_1_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CD8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CD8 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_2 @ 0XFCE88CDC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_2_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CDC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CDC 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_3 @ 0XFCE88CE0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_3_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CE0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CE0 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_4 @ 0XFCE88CE4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_4_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CE4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CE4 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_5 @ 0XFCE88CE8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_5_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CE8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CE8 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_6 @ 0XFCE88CEC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_6_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CEC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CEC 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_7 @ 0XFCE88CF0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_7_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CF0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CF0 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_8 @ 0XFCE88CF4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_8_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CF4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CF4 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_9 @ 0XFCE88CF8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_9_ATTR                          0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CF8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CF8 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_10 @ 0XFCE88CFC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_10_ATTR                         0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88CFC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88CFC 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_11 @ 0XFCE88D00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_11_ATTR                         0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88D00, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88D00 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_12 @ 0XFCE88D04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_12_ATTR                         0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88D04, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88D04 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_13 @ 0XFCE88D08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_13_ATTR                         0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88D08, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88D08 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_14 @ 0XFCE88D0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_14_ATTR                         0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88D0C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88D0C 0x0000001F 0x00000000
		# Register : PFx_EXPANSION_ROM_APERTURE_SIZE_15 @ 0XFCE88D10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_EXPANSION_ROM_APERTURE_SIZE_15_ATTR                         0x0

		# PFx Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB
		#  00111 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 011
		# 1 = 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE88D10, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE88D10 0x0000001F 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_0 @ 0XFCE88D14</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_0_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D14, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D14 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_1 @ 0XFCE88D18</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_1_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D18, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D18 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_2 @ 0XFCE88D1C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_2_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D1C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D1C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_3 @ 0XFCE88D20</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_3_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D20, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D20 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_4 @ 0XFCE88D24</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_4_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D24, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D24 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_5 @ 0XFCE88D28</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_5_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D28, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D28 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_6 @ 0XFCE88D2C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_6_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D2C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D2C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_7 @ 0XFCE88D30</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_7_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D30, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D30 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_8 @ 0XFCE88D34</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_8_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D34, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D34 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_9 @ 0XFCE88D38</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_9_ATTR                                     0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D38, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D38 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_10 @ 0XFCE88D3C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_10_ATTR                                    0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D3C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D3C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_11 @ 0XFCE88D40</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_11_ATTR                                    0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D40, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D40 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_12 @ 0XFCE88D44</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_12_ATTR                                    0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D44, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D44 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_13 @ 0XFCE88D48</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_13_ATTR                                    0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D48, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D48 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_14 @ 0XFCE88D4C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_14_ATTR                                    0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D4C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D4C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_15 @ 0XFCE88D50</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_15_ATTR                                    0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D50, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D50 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_16 @ 0XFCE88D54</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_16_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D54, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D54 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_17 @ 0XFCE88D58</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_17_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D58, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D58 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_18 @ 0XFCE88D5C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_18_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D5C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D5C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_19 @ 0XFCE88D60</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_19_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D60, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D60 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_20 @ 0XFCE88D64</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_20_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D64, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D64 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_21 @ 0XFCE88D68</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_21_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D68, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D68 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_22 @ 0XFCE88D6C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_22_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D6C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D6C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_23 @ 0XFCE88D70</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_23_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D70, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D70 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_24 @ 0XFCE88D74</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_24_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D74, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D74 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_25 @ 0XFCE88D78</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_25_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D78, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D78 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_26 @ 0XFCE88D7C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_26_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D7C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D7C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_27 @ 0XFCE88D80</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_27_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D80, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D80 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_28 @ 0XFCE88D84</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_28_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D84, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D84 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_29 @ 0XFCE88D88</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_29_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D88, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D88 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_30 @ 0XFCE88D8C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_30_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D8C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D8C 0x000000FF 0x00000000
		# Register : zFx_PCIE_CAP_NEXTPTR_31 @ 0XFCE88D90</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_PCIE_CAP_NEXTPTR_31_ATTR                                    0x0

		# PCIe Capability's Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capab
		# lity.
		#(OFFSET, MASK, VALUE)      (0XFCE88D90, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE88D90 0x000000FF 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_0 @ 0XFCE88D94</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_0_ATTR                             3

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88D94, 0x00000007U ,0x00000003U)  */
    mask_write 0XFCE88D94 0x00000007 0x00000003
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_1 @ 0XFCE88D98</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_1_ATTR                             3

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88D98, 0x00000007U ,0x00000003U)  */
    mask_write 0XFCE88D98 0x00000007 0x00000003
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_2 @ 0XFCE88D9C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_2_ATTR                             3

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88D9C, 0x00000007U ,0x00000003U)  */
    mask_write 0XFCE88D9C 0x00000007 0x00000003
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_3 @ 0XFCE88DA0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_3_ATTR                             3

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DA0, 0x00000007U ,0x00000003U)  */
    mask_write 0XFCE88DA0 0x00000007 0x00000003
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_4 @ 0XFCE88DA4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_4_ATTR                             0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DA4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DA4 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_5 @ 0XFCE88DA8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_5_ATTR                             0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DA8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DA8 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_6 @ 0XFCE88DAC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_6_ATTR                             0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DAC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DAC 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_7 @ 0XFCE88DB0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_7_ATTR                             0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DB0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DB0 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_8 @ 0XFCE88DB4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_8_ATTR                             0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DB4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DB4 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_9 @ 0XFCE88DB8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_9_ATTR                             0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DB8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DB8 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_10 @ 0XFCE88DBC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_10_ATTR                            0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DBC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DBC 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_11 @ 0XFCE88DC0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_11_ATTR                            0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DC0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DC0 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_12 @ 0XFCE88DC4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_12_ATTR                            0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DC4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DC4 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_13 @ 0XFCE88DC8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_13_ATTR                            0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DC8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DC8 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_14 @ 0XFCE88DCC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_14_ATTR                            0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DCC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DCC 0x00000007 0x00000000
		# Register : PFx_DEV_CAP_MAX_PAYLOAD_SIZE_15 @ 0XFCE88DD0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DEV_CAP_MAX_PAYLOAD_SIZE_15_ATTR                            0x0

		# Capability Max Payload Size. This field indicates the maximum payload size that the Function can support for TLPs. Defined en
		# odings are: 000b - 128 bytes max payload size 001b - 256 bytes max payload size 010b - 512 bytes max payload size 011b - 1024
		# bytes max payload size
		#(OFFSET, MASK, VALUE)      (0XFCE88DD0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DD0 0x00000007 0x00000000
		# Register : PF0_DEV_CAP_EXT_TAG_SUPPORTED @ 0XFCE88DD4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP_EXT_TAG_SUPPORTED_ATTR                              0

		# Extended Tags support. FALSE - 5-bit tag, TRUE - 8-bit tag
		#(OFFSET, MASK, VALUE)      (0XFCE88DD4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88DD4 0x00000001 0x00000000
		# Register : PF0_DEV_CAP_ENDPOINT_L0S_LATENCY @ 0XFCE88DD8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP_ENDPOINT_L0S_LATENCY_ATTR                           0x0

		# Endpoint L0s Acceptable Latency. Records the latency the endpoint can withstand on transitions from L0s state to L0. Valid se
		# tings are: 0h less than 64ns, 1h 64 to 128ns, 2h 128 to 256ns, 3h 256 to 512ns, 4h 512ns to 1us, 5h 1 to 2us, 6h 2 to 4 us, 7
		#  more than 4us. For Endpoints only. Must be 0h for other devices.
		#(OFFSET, MASK, VALUE)      (0XFCE88DD8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DD8 0x00000007 0x00000000
		# Register : PF0_DEV_CAP_ENDPOINT_L1_LATENCY @ 0XFCE88DDC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP_ENDPOINT_L1_LATENCY_ATTR                            0x0

		# Endpoint L1 Acceptable Latency. Records the latency that the endpoint can withstand on transitions from L1 state to L0 (if L1
		# state supported). Valid settings are: 0h less than 1us, 1h 1 to 2us, 2h 2 to 4us, 3h 4 to 8us, 4h 8 to 16us, 5h 16 to 32us, 6
		#  32 to 64us, 7h more than 64us. For Endpoints only. Must be 0h for other devices.
		#(OFFSET, MASK, VALUE)      (0XFCE88DDC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88DDC 0x00000007 0x00000000
		# Register : PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE @ 0XFCE88DE0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE_ATTR                   1

		# Function Level Reset : Set TRUE when device has Function-Level Reset capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88DE0, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88DE0 0x00000001 0x00000001
		# Register : PF0_LINK_CAP_ASPM_SUPPORT @ 0XFCE88DE4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_ASPM_SUPPORT_ATTR                                  0

		# Active State PM Support. Indicates the level of active state power management supported by the selected PCI Express Link, enc
		# ded as follows: 00b = No ASPM, 01b = L0s supported, 10b = L1 supported, 11b = L0s and L1 entry supported. Supported encodings
		# are 00b, 01b and 10b. PF0_LINK_CAP_ASPM_SUPPORT = 11b is not supported. When PL_LINK_CAP_MAX_LINK_SPEED 0100 (Gen3) or 1000 (
		# en4), PF0_LINK_CAP_ASPM_SUPPORT must be set to either 00b or 10b.
		#(OFFSET, MASK, VALUE)      (0XFCE88DE4, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88DE4 0x00000003 0x00000000
		# Register : PF0_LINK_CONTROL_RCB @ 0XFCE88DE8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CONTROL_RCB_ATTR                                       0x0

		# Read Completion Boundary (RCB). Root Port (PL_UPSTREAM_FACING is FALSE and IS_SWITCH_PORT = FALSE) 0b = 0b 64B RCB or 1b = 12
		# B RCB. Not applicable for all other Port configurations.
		#(OFFSET, MASK, VALUE)      (0XFCE88DE8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88DE8 0x00000001 0x00000000
		# Register : PF0_LINK_STATUS_SLOT_CLOCK_CONFIG @ 0XFCE88DEC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_STATUS_SLOT_CLOCK_CONFIG_ATTR                          1

		# Slot Clock Configuration. "TRUE" if devce uses clock provided on slot connector, else "FALSE" if the device uses an independe
		# t clock irrespective of the presence of a reference on the connector.
		#(OFFSET, MASK, VALUE)      (0XFCE88DEC, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88DEC 0x00000001 0x00000001
		# Register : PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 @ 0XFCE88DF0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1_ATTR                  0x7

		# Sets the exit latency from L0s state to be applied (at 2.5G) where a common clock is used. Transferred to the Link Capabiliti
		# s register.
		#(OFFSET, MASK, VALUE)      (0XFCE88DF0, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88DF0 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 @ 0XFCE88DF4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2_ATTR                  0x7

		# Sets the exit latency from L0s state to be applied (at 5G) where a common clock is used. Transferred to the Link Capabilities
		# register.
		#(OFFSET, MASK, VALUE)      (0XFCE88DF4, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88DF4 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 @ 0XFCE88DF8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3_ATTR                  0x7

		# Sets the exit latency from L0s state to be applied (at 8G) where a common clock is used. Transferred to the Link Capabilities
		# register.
		#(OFFSET, MASK, VALUE)      (0XFCE88DF8, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88DF8 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN4 @ 0XFCE88DFC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN4_ATTR                  0x7

		# Sets the exit latency from L0s state to be applied (at 16G) where a common clock is used. Transferred to the Link Capabilitie
		#  register.
		#(OFFSET, MASK, VALUE)      (0XFCE88DFC, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88DFC 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN5 @ 0XFCE88E00</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN5_ATTR                  0x7

		# Sets the exit latency from L0s state to be applied (at 32G) where a common clock is used. Transferred to the Link Capabilitie
		#  register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E00, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E00 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 @ 0XFCE88E18</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1_ATTR                   0x7

		# Sets the exit latency from L1 state to be applied (at 2.5G) where a common clock is used. Transferred to the Link Capabilitie
		#  register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E18, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E18 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 @ 0XFCE88E1C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2_ATTR                   0x7

		# Sets the exit latency from L1 state to be applied (at 5G) where a common clock is used. Transferred to the Link Capabilities 
		# egister.
		#(OFFSET, MASK, VALUE)      (0XFCE88E1C, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E1C 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 @ 0XFCE88E20</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3_ATTR                   0x7

		# Sets the exit latency from L1 state to be applied (at 8G) where a common clock is used. Transferred to the Link Capabilities 
		# egister.
		#(OFFSET, MASK, VALUE)      (0XFCE88E20, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E20 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN4 @ 0XFCE88E24</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN4_ATTR                   0x7

		# Sets the exit latency from L1 state to be applied (at 16G) where a common clock is used. Transferred to the Link Capabilities
		# register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E24, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E24 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN5 @ 0XFCE88E28</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN5_ATTR                   0x7

		# Sets the exit latency from L1 state to be applied (at 32G) where a common clock is used. Transferred to the Link Capabilities
		# register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E28, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E28 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 @ 0XFCE88E2C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1_ATTR                          0x7

		# Sets the exit latency from L1 state to be applied (at 2.5G) where separate clocks are used. Transferred to the Link Capabilit
		# es register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E2C, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E2C 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 @ 0XFCE88E30</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2_ATTR                          0x7

		# Sets the exit latency from L1 state to be applied (at 5G) where separate clocks are used. Transferred to the Link Capabilitie
		#  register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E30, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E30 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 @ 0XFCE88E34</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3_ATTR                          0x7

		# Sets the exit latency from L1 state to be applied (at 8G) where separate clocks are used. Transferred to the Link Capabilitie
		#  register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E34, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E34 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_GEN4 @ 0XFCE88E38</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_GEN4_ATTR                          0x7

		# Sets the exit latency from L1 state to be applied (at 16G) where separate clocks are used. Transferred to the Link Capabiliti
		# s register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E38, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E38 0x00000007 0x00000007
		# Register : PF0_LINK_CAP_L1_EXIT_LATENCY_GEN5 @ 0XFCE88E3C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LINK_CAP_L1_EXIT_LATENCY_GEN5_ATTR                          0x7

		# Sets the exit latency from L1 state to be applied (at 32G) where separate clocks are used. Transferred to the Link Capabiliti
		# s register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E3C, 0x00000007U ,0x00000007U)  */
    mask_write 0XFCE88E3C 0x00000007 0x00000007
		# Register : PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE @ 0XFCE88E40</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE_ATTR                           0x1

		# Completion Timeout Disable Capable: A TRUE sets Bit 4, indicates that the associated Function supports the capability to turn
		# off its Completion timeout.
		#(OFFSET, MASK, VALUE)      (0XFCE88E40, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88E40 0x00000001 0x00000001
		# Register : PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT @ 0XFCE88E44</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT_ATTR                  0x1

		# 32-bit AtomicOp Completer Supported: if TRUE sets Bit 7, includes FetchAdd, Swap, and CAS AtomicOps optional capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88E44, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88E44 0x00000001 0x00000001
		# Register : PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT @ 0XFCE88E48</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT_ATTR                  0x1

		# 64-bit AtomicOp Completer Supported: If TRUE sets Bit 8, includes FetchAdd, Swap, and CAS AtomicOps optional capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88E48, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88E48 0x00000001 0x00000001
		# Register : PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT @ 0XFCE88E4C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT_ATTR             0x1

		# 128-bit CAS Completer Supported: If TRUE sets Bit 9, enables optional capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88E4C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88E4C 0x00000001 0x00000001
		# Register : PF0_DEV_CAP2_LTR_SUPPORT @ 0XFCE88E50</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_LTR_SUPPORT_ATTR                                   0x1

		# LTR Mechanism Supported: If TRUE sets Bit 11, indicates support for the optional Latency Tolerance Reporting (LTR) mechanism.
		# FEATURE USE DEPRECATION - UNUSED (Always set to FALSE for Griffin, Kestrel, Merlin)
		#(OFFSET, MASK, VALUE)      (0XFCE88E50, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE88E50 0x00000001 0x00000001
		# Register : PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT @ 0XFCE88E54</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT_ATTR                         0x0

		# TPH Completer Supported: Sets Bit 12, value indicates Completer support for TPH. Supported Encodings are: 0b = TPH and Extend
		# d TPH Completer not supported. 1b = TPH Completer supported.
		#(OFFSET, MASK, VALUE)      (0XFCE88E54, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E54 0x00000001 0x00000000
		# Register : PF0_DEV_CAP2_OBFF_SUPPORT @ 0XFCE88E58</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_OBFF_SUPPORT_ATTR                                  0x0

		# OBFF Supported: Sets Bits 19:18, 00b - OBFF Not Supported 01b - 11b - Reserved (OBFF functionality not supported)
		#(OFFSET, MASK, VALUE)      (0XFCE88E58, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCE88E58 0x00000003 0x00000000
		# Register : PF0_DEV_CAP2_ARI_FORWARD_ENABLE @ 0XFCE88E5C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_ARI_FORWARD_ENABLE_ATTR                            0x0

		# ARI Forwarding Supported : This bit must be set to TRUE if Root Port supports this optional capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88E5C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E5C 0x00000001 0x00000000
		# Register : PF0_DEV_CONTROL2_PERMIT_IDO_REQ_EN @ 0XFCE88E60</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CONTROL2_PERMIT_IDO_REQ_EN_ATTR                         0x0

		# Permit IDO Requester Enable: Permit IO Req by making Device Control2 IO Reqester Enable bit RW (HW does not support IDO)
		#(OFFSET, MASK, VALUE)      (0XFCE88E60, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E60 0x00000001 0x00000000
		# Register : PF0_DEV_CONTROL2_PERMIT_IDO_CPL_EN @ 0XFCE88E64</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CONTROL2_PERMIT_IDO_CPL_EN_ATTR                         0x0

		# Permit IDO Completer Enable: Permit IO Req by making Device Control2 IO Completer Enable bit RW (HW does not support IDO)
		#(OFFSET, MASK, VALUE)      (0XFCE88E64, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E64 0x00000001 0x00000000
		# Register : PF0_ACS_VIOLATION_ERR_SUPPORT @ 0XFCE88E68</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_ACS_VIOLATION_ERR_SUPPORT_ATTR                              0x0

		# ACS Violation Error Support: When TRUE, ACS Violation Error can be set by a cfg_mgmt_debug_access write to the Advanced Error
		# Reporting Uncorrectable Error Status register.
		#(OFFSET, MASK, VALUE)      (0XFCE88E68, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E68 0x00000001 0x00000000
		# Register : PF0_ERR_COR_SUBCLASS_CAPABLE @ 0XFCE88E6C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_ERR_COR_SUBCLASS_CAPABLE_ATTR                               0x0

		# ERR COR Subclass Capable: When TRUE, sets the Device Capabilities Register bit ERR COR Subclass Capable to 1.
		#(OFFSET, MASK, VALUE)      (0XFCE88E6C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E6C 0x00000001 0x00000000
		# Register : PF0_IMMEDIATE_READINESS @ 0XFCE88E70</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_IMMEDIATE_READINESS_ATTR                                    0x0

		# Immediate Readiness: When TRUE, sets the PCI Config Space Header Status Register bit 0 Immediate Readiness to 1.
		#(OFFSET, MASK, VALUE)      (0XFCE88E70, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E70 0x00000001 0x00000000
		# Register : PF0_DRS_SUPPORT @ 0XFCE88E74</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DRS_SUPPORT_ATTR                                            0x0

		# Device Readiness Status Supported: When TRUE, sets the Link Capabilities 2 Register bit DRS Supported to 1.
		#(OFFSET, MASK, VALUE)      (0XFCE88E74, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E74 0x00000001 0x00000000
		# Register : PF0_FRS_SUPPORT @ 0XFCE88E78</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_FRS_SUPPORT_ATTR                                            0x0

		# Function Readiness Status Supported: When TRUE, sets the Device Capabilities 2 Register bit FRS Supported to 1.
		#(OFFSET, MASK, VALUE)      (0XFCE88E78, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88E78 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_NEXTPTR_0 @ 0XFCE88E7C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_0_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E7C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E7C 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_1 @ 0XFCE88E80</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_1_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E80, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E80 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_2 @ 0XFCE88E84</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_2_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E84, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E84 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_3 @ 0XFCE88E88</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_3_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E88, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E88 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_4 @ 0XFCE88E8C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_4_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E8C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E8C 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_5 @ 0XFCE88E90</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_5_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E90, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E90 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_6 @ 0XFCE88E94</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_6_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E94, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E94 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_7 @ 0XFCE88E98</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_7_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E98, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E98 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_8 @ 0XFCE88E9C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_8_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88E9C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88E9C 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_9 @ 0XFCE88EA0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_9_ATTR                                      112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88EA0, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88EA0 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_10 @ 0XFCE88EA4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_10_ATTR                                     112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88EA4, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88EA4 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_11 @ 0XFCE88EA8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_11_ATTR                                     112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88EA8, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88EA8 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_12 @ 0XFCE88EAC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_12_ATTR                                     112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88EAC, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88EAC 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_13 @ 0XFCE88EB0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_13_ATTR                                     112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88EB0, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88EB0 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_14 @ 0XFCE88EB4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_14_ATTR                                     112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88EB4, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88EB4 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_NEXTPTR_15 @ 0XFCE88EB8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_NEXTPTR_15_ATTR                                     112

		# MSI Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabili
		# y.
		#(OFFSET, MASK, VALUE)      (0XFCE88EB8, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88EB8 0x000000FF 0x00000070
		# Register : PFx_MSI_CAP_PERVECMASKCAP_0 @ 0XFCE88EBC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_0_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EBC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EBC 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_1 @ 0XFCE88EC0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_1_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EC0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EC0 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_2 @ 0XFCE88EC4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_2_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EC4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EC4 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_3 @ 0XFCE88EC8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_3_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EC8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EC8 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_4 @ 0XFCE88ECC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_4_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88ECC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88ECC 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_5 @ 0XFCE88ED0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_5_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88ED0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88ED0 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_6 @ 0XFCE88ED4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_6_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88ED4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88ED4 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_7 @ 0XFCE88ED8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_7_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88ED8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88ED8 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_8 @ 0XFCE88EDC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_8_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EDC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EDC 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_9 @ 0XFCE88EE0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_9_ATTR                                0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EE0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EE0 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_10 @ 0XFCE88EE4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_10_ATTR                               0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EE4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EE4 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_11 @ 0XFCE88EE8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_11_ATTR                               0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EE8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EE8 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_12 @ 0XFCE88EEC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_12_ATTR                               0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EEC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EEC 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_13 @ 0XFCE88EF0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_13_ATTR                               0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EF0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EF0 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_14 @ 0XFCE88EF4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_14_ATTR                               0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EF4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EF4 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_PERVECMASKCAP_15 @ 0XFCE88EF8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_PERVECMASKCAP_15_ATTR                               0x0

		# MSI Capability's Per Vector Masking bit : When set to TRUE to indicate that the device has per-vector masking capability.
		#(OFFSET, MASK, VALUE)      (0XFCE88EF8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE88EF8 0x00000001 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_0 @ 0XFCE88EFC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_0_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88EFC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88EFC 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_1 @ 0XFCE88F00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_1_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F00, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F00 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_2 @ 0XFCE88F04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_2_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F04, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F04 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_3 @ 0XFCE88F08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_3_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F08, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F08 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_4 @ 0XFCE88F0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_4_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F0C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F0C 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_5 @ 0XFCE88F10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_5_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F10, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F10 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_6 @ 0XFCE88F14</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_6_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F14, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F14 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_7 @ 0XFCE88F18</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_7_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F18, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F18 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_8 @ 0XFCE88F1C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_8_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F1C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F1C 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_9 @ 0XFCE88F20</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_9_ATTR                                  0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F20, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F20 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_10 @ 0XFCE88F24</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_10_ATTR                                 0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F24, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F24 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_11 @ 0XFCE88F28</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_11_ATTR                                 0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F28, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F28 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_12 @ 0XFCE88F2C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_12_ATTR                                 0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F2C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F2C 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_13 @ 0XFCE88F30</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_13_ATTR                                 0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F30, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F30 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_14 @ 0XFCE88F34</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_14_ATTR                                 0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F34, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F34 0x00000007 0x00000000
		# Register : PFx_MSI_CAP_MULTIMSGCAP_15 @ 0XFCE88F38</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_MSI_CAP_MULTIMSGCAP_15_ATTR                                 0

		# Multiple Message Capable Sets Bits [19:17] in the Control register. Each MSI function may request up to 32 unique messages. S
		# stem software may read this field to determine the number of messages requested. Number of messages requested are encoded as 
		# ollows: 0h= 1 vector 1h= 2 vectors 2h= 4.vectors 3h= 8 vectors 4h= 16 vectors 5h= 32 vectors 6h, 7h = Rsvd
		#(OFFSET, MASK, VALUE)      (0XFCE88F38, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88F38 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_NEXTPTR_0 @ 0XFCE88F3C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_0_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F3C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F3C 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_1 @ 0XFCE88F40</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_1_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F40, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F40 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_2 @ 0XFCE88F44</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_2_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F44, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F44 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_3 @ 0XFCE88F48</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_3_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F48, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F48 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_4 @ 0XFCE88F4C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_4_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F4C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F4C 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_5 @ 0XFCE88F50</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_5_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F50, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F50 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_6 @ 0XFCE88F54</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_6_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F54, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F54 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_7 @ 0XFCE88F58</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_7_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F58, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F58 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_8 @ 0XFCE88F5C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_8_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F5C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F5C 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_9 @ 0XFCE88F60</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_9_ATTR                                     112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F60, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F60 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_10 @ 0XFCE88F64</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_10_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F64, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F64 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_11 @ 0XFCE88F68</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_11_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F68, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F68 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_12 @ 0XFCE88F6C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_12_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F6C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F6C 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_13 @ 0XFCE88F70</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_13_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F70, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F70 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_14 @ 0XFCE88F74</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_14_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F74, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F74 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_15 @ 0XFCE88F78</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_15_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F78, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F78 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_16 @ 0XFCE88F7C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_16_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F7C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F7C 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_17 @ 0XFCE88F80</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_17_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F80, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F80 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_18 @ 0XFCE88F84</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_18_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F84, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F84 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_19 @ 0XFCE88F88</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_19_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F88, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F88 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_20 @ 0XFCE88F8C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_20_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F8C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F8C 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_21 @ 0XFCE88F90</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_21_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F90, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F90 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_22 @ 0XFCE88F94</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_22_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F94, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F94 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_23 @ 0XFCE88F98</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_23_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F98, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F98 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_24 @ 0XFCE88F9C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_24_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88F9C, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88F9C 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_25 @ 0XFCE88FA0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_25_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88FA0, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88FA0 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_26 @ 0XFCE88FA4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_26_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88FA4, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88FA4 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_27 @ 0XFCE88FA8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_27_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88FA8, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88FA8 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_28 @ 0XFCE88FAC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_28_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88FAC, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88FAC 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_29 @ 0XFCE88FB0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_29_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88FB0, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88FB0 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_30 @ 0XFCE88FB4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_30_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88FB4, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88FB4 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_NEXTPTR_31 @ 0XFCE88FB8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_NEXTPTR_31_ATTR                                    112

		# MSI-X Capability Next Capability Offset pointer to the next item in the capabilities list, or 00h if this is the final capabi
		# ity.
		#(OFFSET, MASK, VALUE)      (0XFCE88FB8, 0x000000FFU ,0x00000070U)  */
    mask_write 0XFCE88FB8 0x000000FF 0x00000070
		# Register : zFx_MSIX_CAP_PBA_BIR_0 @ 0XFCE88FBC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_0_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FBC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FBC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_1 @ 0XFCE88FC0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_1_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FC0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FC0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_2 @ 0XFCE88FC4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_2_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FC4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FC4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_3 @ 0XFCE88FC8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_3_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FC8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FC8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_4 @ 0XFCE88FCC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_4_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FCC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FCC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_5 @ 0XFCE88FD0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_5_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FD0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FD0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_6 @ 0XFCE88FD4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_6_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FD4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FD4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_7 @ 0XFCE88FD8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_7_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FD8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FD8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_8 @ 0XFCE88FDC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_8_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FDC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FDC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_9 @ 0XFCE88FE0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_9_ATTR                                     0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FE0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FE0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_10 @ 0XFCE88FE4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_10_ATTR                                    0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FE4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FE4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_11 @ 0XFCE88FE8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_11_ATTR                                    0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FE8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FE8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_12 @ 0XFCE88FEC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_12_ATTR                                    0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FEC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FEC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_13 @ 0XFCE88FF0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_13_ATTR                                    0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FF0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FF0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_14 @ 0XFCE88FF4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_14_ATTR                                    0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FF4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FF4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_15 @ 0XFCE88FF8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_15_ATTR                                    0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FF8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FF8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_16 @ 0XFCE88FFC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_16_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE88FFC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE88FFC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_17 @ 0XFCE89000</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_17_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89000, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89000 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_18 @ 0XFCE89004</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_18_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89004, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89004 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_19 @ 0XFCE89008</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_19_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89008, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89008 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_20 @ 0XFCE8900C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_20_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8900C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8900C 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_21 @ 0XFCE89010</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_21_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89010, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89010 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_22 @ 0XFCE89014</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_22_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89014, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89014 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_23 @ 0XFCE89018</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_23_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89018, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89018 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_24 @ 0XFCE8901C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_24_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8901C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8901C 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_25 @ 0XFCE89020</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_25_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89020, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89020 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_26 @ 0XFCE89024</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_26_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89024, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89024 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_27 @ 0XFCE89028</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_27_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89028, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89028 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_28 @ 0XFCE8902C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_28_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8902C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8902C 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_29 @ 0XFCE89030</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_29_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89030, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89030 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_30 @ 0XFCE89034</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_30_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89034, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89034 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_BIR_31 @ 0XFCE89038</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_BIR_31_ATTR                                    0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89038, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89038 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_0 @ 0XFCE8903C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_0_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8903C, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE8903C 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_1 @ 0XFCE89040</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_1_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89040, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89040 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_2 @ 0XFCE89044</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_2_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89044, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89044 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_3 @ 0XFCE89048</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_3_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89048, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89048 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_4 @ 0XFCE8904C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_4_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8904C, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE8904C 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_5 @ 0XFCE89050</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_5_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89050, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89050 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_6 @ 0XFCE89054</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_6_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89054, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89054 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_7 @ 0XFCE89058</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_7_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89058, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89058 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_8 @ 0XFCE8905C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_8_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8905C, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE8905C 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_9 @ 0XFCE89060</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_9_ATTR                                  10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89060, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89060 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_10 @ 0XFCE89064</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_10_ATTR                                 10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89064, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89064 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_11 @ 0XFCE89068</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_11_ATTR                                 10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89068, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89068 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_12 @ 0XFCE8906C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_12_ATTR                                 10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8906C, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE8906C 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_13 @ 0XFCE89070</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_13_ATTR                                 10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89070, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89070 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_14 @ 0XFCE89074</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_14_ATTR                                 10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89074, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89074 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_15 @ 0XFCE89078</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_15_ATTR                                 10

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89078, 0x1FFFFFFFU ,0x0000000AU)  */
    mask_write 0XFCE89078 0x1FFFFFFF 0x0000000A
		# Register : zFx_MSIX_CAP_PBA_OFFSET_16 @ 0XFCE8907C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_16_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8907C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8907C 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_17 @ 0XFCE89080</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_17_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89080, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89080 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_18 @ 0XFCE89084</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_18_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89084, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89084 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_19 @ 0XFCE89088</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_19_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89088, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89088 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_20 @ 0XFCE8908C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_20_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8908C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8908C 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_21 @ 0XFCE89090</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_21_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89090, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89090 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_22 @ 0XFCE89094</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_22_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89094, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89094 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_23 @ 0XFCE89098</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_23_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89098, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89098 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_24 @ 0XFCE8909C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_24_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8909C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8909C 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_25 @ 0XFCE890A0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_25_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890A0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE890A0 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_26 @ 0XFCE890A4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_26_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890A4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE890A4 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_27 @ 0XFCE890A8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_27_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890A8, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE890A8 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_28 @ 0XFCE890AC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_28_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890AC, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE890AC 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_29 @ 0XFCE890B0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_29_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890B0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE890B0 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_30 @ 0XFCE890B4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_30_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890B4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE890B4 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_PBA_OFFSET_31 @ 0XFCE890B8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_PBA_OFFSET_31_ATTR                                 0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890B8, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE890B8 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_0 @ 0XFCE890BC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_0_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890BC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890BC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_1 @ 0XFCE890C0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_1_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890C0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890C0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_2 @ 0XFCE890C4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_2_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890C4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890C4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_3 @ 0XFCE890C8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_3_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890C8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890C8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_4 @ 0XFCE890CC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_4_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890CC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890CC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_5 @ 0XFCE890D0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_5_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890D0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890D0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_6 @ 0XFCE890D4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_6_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890D4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890D4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_7 @ 0XFCE890D8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_7_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890D8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890D8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_8 @ 0XFCE890DC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_8_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890DC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890DC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_9 @ 0XFCE890E0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_9_ATTR                                   0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890E0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890E0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_10 @ 0XFCE890E4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_10_ATTR                                  0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890E4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890E4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_11 @ 0XFCE890E8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_11_ATTR                                  0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890E8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_12 @ 0XFCE890EC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_12_ATTR                                  0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890EC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890EC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_13 @ 0XFCE890F0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_13_ATTR                                  0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890F0 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_14 @ 0XFCE890F4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_14_ATTR                                  0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890F4 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_15 @ 0XFCE890F8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_15_ATTR                                  0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890F8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890F8 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_16 @ 0XFCE890FC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_16_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE890FC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE890FC 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_17 @ 0XFCE89100</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_17_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89100, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89100 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_18 @ 0XFCE89104</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_18_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89104, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89104 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_19 @ 0XFCE89108</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_19_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89108, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89108 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_20 @ 0XFCE8910C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_20_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8910C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8910C 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_21 @ 0XFCE89110</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_21_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89110, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89110 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_22 @ 0XFCE89114</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_22_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89114, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89114 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_23 @ 0XFCE89118</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_23_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89118, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89118 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_24 @ 0XFCE8911C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_24_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8911C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8911C 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_25 @ 0XFCE89120</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_25_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89120, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89120 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_26 @ 0XFCE89124</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_26_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89124, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89124 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_27 @ 0XFCE89128</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_27_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89128, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89128 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_28 @ 0XFCE8912C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_28_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8912C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8912C 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_29 @ 0XFCE89130</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_29_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89130, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89130 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_30 @ 0XFCE89134</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_30_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89134, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89134 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_BIR_31 @ 0XFCE89138</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_BIR_31_ATTR                                  0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89138, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89138 0x00000007 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_0 @ 0XFCE8913C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_0_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8913C, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE8913C 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_1 @ 0XFCE89140</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_1_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89140, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89140 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_2 @ 0XFCE89144</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_2_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89144, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89144 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_3 @ 0XFCE89148</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_3_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89148, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89148 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_4 @ 0XFCE8914C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_4_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8914C, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE8914C 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_5 @ 0XFCE89150</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_5_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89150, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89150 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_6 @ 0XFCE89154</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_6_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89154, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89154 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_7 @ 0XFCE89158</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_7_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89158, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89158 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_8 @ 0XFCE8915C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_8_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8915C, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE8915C 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_9 @ 0XFCE89160</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_9_ATTR                                8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89160, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89160 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_10 @ 0XFCE89164</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_10_ATTR                               8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89164, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89164 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_11 @ 0XFCE89168</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_11_ATTR                               8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89168, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89168 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_12 @ 0XFCE8916C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_12_ATTR                               8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8916C, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE8916C 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_13 @ 0XFCE89170</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_13_ATTR                               8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89170, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89170 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_14 @ 0XFCE89174</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_14_ATTR                               8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89174, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89174 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_15 @ 0XFCE89178</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_15_ATTR                               8

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89178, 0x1FFFFFFFU ,0x00000008U)  */
    mask_write 0XFCE89178 0x1FFFFFFF 0x00000008
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_16 @ 0XFCE8917C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_16_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8917C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8917C 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_17 @ 0XFCE89180</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_17_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89180, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89180 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_18 @ 0XFCE89184</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_18_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89184, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89184 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_19 @ 0XFCE89188</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_19_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89188, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89188 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_20 @ 0XFCE8918C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_20_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8918C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8918C 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_21 @ 0XFCE89190</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_21_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89190, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89190 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_22 @ 0XFCE89194</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_22_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89194, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89194 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_23 @ 0XFCE89198</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_23_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE89198, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89198 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_24 @ 0XFCE8919C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_24_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8919C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8919C 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_25 @ 0XFCE891A0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_25_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE891A0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE891A0 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_26 @ 0XFCE891A4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_26_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE891A4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE891A4 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_27 @ 0XFCE891A8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_27_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE891A8, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE891A8 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_28 @ 0XFCE891AC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_28_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE891AC, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE891AC 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_29 @ 0XFCE891B0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_29_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE891B0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE891B0 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_OFFSET_30 @ 0XFCE891B4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_OFFSET_30_ATTR                               0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE891B4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE891B4 0x1FFFFFFF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_0 @ 0XFCE891BC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_0_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891BC, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891BC 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_1 @ 0XFCE891C0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_1_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891C0, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891C0 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_2 @ 0XFCE891C4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_2_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891C4, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891C4 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_3 @ 0XFCE891C8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_3_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891C8, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891C8 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_4 @ 0XFCE891CC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_4_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891CC, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891CC 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_5 @ 0XFCE891D0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_5_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891D0, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891D0 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_6 @ 0XFCE891D4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_6_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891D4, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891D4 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_7 @ 0XFCE891D8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_7_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891D8, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891D8 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_8 @ 0XFCE891DC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_8_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891DC, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891DC 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_9 @ 0XFCE891E0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_9_ATTR                                  0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891E0, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891E0 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_10 @ 0XFCE891E4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_10_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891E4, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891E4 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_11 @ 0XFCE891E8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_11_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891E8, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891E8 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_12 @ 0XFCE891EC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_12_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891EC, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891EC 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_13 @ 0XFCE891F0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_13_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891F0, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891F0 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_14 @ 0XFCE891F4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_14_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891F4, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891F4 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_15 @ 0XFCE891F8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_15_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891F8, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891F8 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_16 @ 0XFCE891FC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_16_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE891FC, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE891FC 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_17 @ 0XFCE89200</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_17_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89200, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89200 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_18 @ 0XFCE89204</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_18_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89204, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89204 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_19 @ 0XFCE89208</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_19_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89208, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89208 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_20 @ 0XFCE8920C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_20_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8920C, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8920C 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_21 @ 0XFCE89210</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_21_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89210, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89210 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_22 @ 0XFCE89214</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_22_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89214, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89214 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_23 @ 0XFCE89218</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_23_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89218, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89218 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_24 @ 0XFCE8921C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_24_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8921C, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8921C 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_25 @ 0XFCE89220</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_25_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89220, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89220 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_26 @ 0XFCE89224</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_26_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89224, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89224 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_27 @ 0XFCE89228</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_27_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89228, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89228 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_28 @ 0XFCE8922C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_28_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8922C, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8922C 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_29 @ 0XFCE89230</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_29_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89230, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89230 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_30 @ 0XFCE89234</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_30_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89234, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89234 0x000007FF 0x00000000
		# Register : zFx_MSIX_CAP_TABLE_SIZE_31 @ 0XFCE89238</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_31_ATTR                                 0x0

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_CAP_TABLE_SIZE_31_ATTR                                 0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE89238, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE89238 0x000007FF 0x00000000
		# Register : MSIX_INTERLOCK_ENABLE @ 0XFCE8923C</p>

		# 
		# CPM5_PCIE1_ATTR_MSIX_INTERLOCK_ENABLE_ATTR                                      0x0

		# MSI-X Interlock Enable. Enables the MSIX Interlock.
		#(OFFSET, MASK, VALUE)      (0XFCE8923C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8923C 0x00000001 0x00000000
		# Register : zFx_MSIX_VECTOR_COUNT_0 @ 0XFCE89240</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_0_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89240, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89240 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_1 @ 0XFCE89244</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_1_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89244, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89244 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_2 @ 0XFCE89248</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_2_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89248, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89248 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_3 @ 0XFCE8924C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_3_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8924C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8924C 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_4 @ 0XFCE89250</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_4_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89250, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89250 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_5 @ 0XFCE89254</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_5_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89254, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89254 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_6 @ 0XFCE89258</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_6_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89258, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89258 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_7 @ 0XFCE8925C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_7_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8925C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8925C 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_8 @ 0XFCE89260</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_8_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89260, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89260 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_9 @ 0XFCE89264</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_9_ATTR                                    0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89264, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89264 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_10 @ 0XFCE89268</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_10_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89268, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89268 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_11 @ 0XFCE8926C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_11_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8926C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8926C 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_12 @ 0XFCE89270</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_12_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89270, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89270 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_13 @ 0XFCE89274</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_13_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89274, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89274 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_14 @ 0XFCE89278</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_14_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89278, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89278 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_15 @ 0XFCE8927C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_15_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8927C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8927C 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_16 @ 0XFCE89280</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_16_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89280, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89280 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_17 @ 0XFCE89284</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_17_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89284, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89284 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_18 @ 0XFCE89288</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_18_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89288, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89288 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_19 @ 0XFCE8928C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_19_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8928C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8928C 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_20 @ 0XFCE89290</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_20_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89290, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89290 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_21 @ 0XFCE89294</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_21_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89294, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89294 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_22 @ 0XFCE89298</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_22_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE89298, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89298 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_23 @ 0XFCE8929C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_23_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8929C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8929C 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_24 @ 0XFCE892A0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_24_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892A0, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892A0 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_25 @ 0XFCE892A4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_25_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892A4, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892A4 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_26 @ 0XFCE892A8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_26_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892A8, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892A8 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_27 @ 0XFCE892AC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_27_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892AC, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892AC 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_28 @ 0XFCE892B0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_28_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892B0, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892B0 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_29 @ 0XFCE892B4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_29_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892B4, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892B4 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_30 @ 0XFCE892B8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_30_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892B8, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892B8 0x0000FFFF 0x00000004
		# Register : zFx_MSIX_VECTOR_COUNT_31 @ 0XFCE892BC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_MSIX_VECTOR_COUNT_31_ATTR                                   0x4

		# MSI-X Vector Count per Function : Vectors per Function (per PF and VFG). 0001h - 4 0002h - 8 0003h - 16 0004h - 32 0005h - 64
		# 0006h - 128 0007h - 256 0008h - 512 0009h - 1024 000Ah - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE892BC, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE892BC 0x0000FFFF 0x00000004
		# Register : PF0_PM_CAP_ID @ 0XFCE892C0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CAP_ID_ATTR                                              0x1

		# PM Capability ID: Identifies that the capability structure is for Power Management. Applies to all PFs
		#(OFFSET, MASK, VALUE)      (0XFCE892C0, 0x000000FFU ,0x00000001U)  */
    mask_write 0XFCE892C0 0x000000FF 0x00000001
		# Register : PFx_PM_CAP_NEXTPTR_0 @ 0XFCE892C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_0_ATTR                                       72

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892C4, 0x000000FFU ,0x00000048U)  */
    mask_write 0XFCE892C4 0x000000FF 0x00000048
		# Register : PFx_PM_CAP_NEXTPTR_1 @ 0XFCE892C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_1_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892C8, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892C8 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_2 @ 0XFCE892CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_2_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892CC, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892CC 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_3 @ 0XFCE892D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_3_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892D0, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892D0 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_4 @ 0XFCE892D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_4_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892D4, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892D4 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_5 @ 0XFCE892D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_5_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892D8, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892D8 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_6 @ 0XFCE892DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_6_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892DC, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892DC 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_7 @ 0XFCE892E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_7_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892E0, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892E0 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_8 @ 0XFCE892E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_8_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892E4, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892E4 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_9 @ 0XFCE892E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_9_ATTR                                       96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892E8, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892E8 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_10 @ 0XFCE892EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_10_ATTR                                      96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892EC, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892EC 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_11 @ 0XFCE892F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_11_ATTR                                      96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892F0, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892F0 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_12 @ 0XFCE892F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_12_ATTR                                      96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892F4, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892F4 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_13 @ 0XFCE892F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_13_ATTR                                      96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892F8, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892F8 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_14 @ 0XFCE892FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_14_ATTR                                      96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE892FC, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE892FC 0x000000FF 0x00000060
		# Register : PFx_PM_CAP_NEXTPTR_15 @ 0XFCE89300</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PM_CAP_NEXTPTR_15_ATTR                                      96

		# PM Capability Next Cap Pointer: Contains pointer to the next PCI Capability Structure.
		#(OFFSET, MASK, VALUE)      (0XFCE89300, 0x000000FFU ,0x00000060U)  */
    mask_write 0XFCE89300 0x000000FF 0x00000060
		# Register : PF0_PM_CAP_PMESUPPORT_D3HOT @ 0XFCE89304</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CAP_PMESUPPORT_D3HOT_ATTR                                0x1

		# PME Support for D3hot State: Sets Bit 14 of PMC Register when TRUE. All functions assume value programmed into PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE89304, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89304 0x00000001 0x00000001
		# Register : PF0_PM_CAP_PMESUPPORT_D3COLD @ 0XFCE89308</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CAP_PMESUPPORT_D3COLD_ATTR                               0x1

		# PME Support for D3cold State: Sets Bit 15 of PMC Register when TRUE. All functions assume value programmed into PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE89308, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89308 0x00000001 0x00000001
		# Register : PF0_PM_CAP_PMESUPPORT_D1 @ 0XFCE8930C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CAP_PMESUPPORT_D1_ATTR                                   0x1

		# PME Support for D1 State: Sets Bit 12 of PMC Register when TRUE. All functions assume value programmed into PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE8930C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8930C 0x00000001 0x00000001
		# Register : PF0_PM_CAP_PMESUPPORT_D0 @ 0XFCE89310</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CAP_PMESUPPORT_D0_ATTR                                   0x1

		# PME Support for D0 State: Sets Bit 11 of PMC Register when TRUE. All functions assume value programmed into PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE89310, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89310 0x00000001 0x00000001
		# Register : PF0_PM_CAP_SUPP_D1_STATE @ 0XFCE89314</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CAP_SUPP_D1_STATE_ATTR                                   0x1

		# D1_Support for D0 State: Sets Bit 9 of PMC Register when TRUE. All functions assume value programmed into PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE89314, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89314 0x00000001 0x00000001
		# Register : PF0_PM_CAP_VER_ID @ 0XFCE89318</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CAP_VER_ID_ATTR                                          0x3

		# Version of PM Spacification: Indicates the version of the PCI Bus Power Management Specifications that the Function implement
		# . Applies to all PFs
		#(OFFSET, MASK, VALUE)      (0XFCE89318, 0x00000007U ,0x00000003U)  */
    mask_write 0XFCE89318 0x00000007 0x00000003
		# Register : PF0_PM_CSR_NOSOFTRESET @ 0XFCE8931C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PM_CSR_NOSOFTRESET_ATTR                                     0x1

		# No_Soft_Reset: Power Management CSR [3] "No Soft Reset" bit. All functions assume value programmed into PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE8931C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8931C 0x00000001 0x00000001
		# Register : PM_ENABLE_L23_ENTRY @ 0XFCE89320</p>

		# 
		# CPM5_PCIE1_ATTR_PM_ENABLE_L23_ENTRY_ATTR                                        0x0

		# Root Port Enter L23 Enable : When set to FALSE, Block will not transition the Physical link state to L2/L3 when its link part
		# er enters the L23_Ready power management state. When (optionally) set to TRUE, the Blockwill transition Physical link state t
		#  L2/L3 Idle when the link partner enters L23_Ready. Once the Block enters L2/L3 Idle, a reset is needed to transition it out 
		# f L2/L3 Idle.
		#(OFFSET, MASK, VALUE)      (0XFCE89320, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89320 0x00000001 0x00000000
		# Register : PM_IMMEDIATE_READINESS_ON_RETURN_TO_D0 @ 0XFCE89324</p>

		# 
		# CPM5_PCIE1_ATTR_PM_IMMEDIATE_READINESS_ON_RETURN_TO_D0_ATTR                     0x0

		# Immediate Readiness on Return to L0 : When (optionally) set to TRUE, advertises Immediate Readiness on Return to L0. Set to F
		# LSE on default.
		#(OFFSET, MASK, VALUE)      (0XFCE89324, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89324 0x00000001 0x00000000
		# Register : DNSTREAM_LINK_NUM @ 0XFCE89328</p>

		# 
		# CPM5_PCIE1_ATTR_DNSTREAM_LINK_NUM_ATTR                                          0x0

		# Used in downstream facing mode only. Specified the link number that this device will advertise in TS1 and TS2 during link tra
		# ning.
		#(OFFSET, MASK, VALUE)      (0XFCE89328, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE89328 0x000000FF 0x00000000
		# Register : ROOT_CAP_CRS_SW_VISIBILITY @ 0XFCE8932C</p>

		# 
		# CPM5_PCIE1_ATTR_ROOT_CAP_CRS_SW_VISIBILITY_ATTR                                 0x0

		# When TRUE, sets the Root Capability CRS Software Visibility bit to indicate that the Root port is capable of returning receiv
		# d Configuration Request Retry Status (CRS) Completion Status to software. When FALSE, the Root Capability CRS Software Visibi
		# ity bit is set to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8932C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8932C 0x00000001 0x00000000
		# Register : AER_CAP_PERMIT_ROOTERR_UPDATE @ 0XFCE89330</p>

		# 
		# CPM5_PCIE1_ATTR_AER_CAP_PERMIT_ROOTERR_UPDATE_ATTR                              0x0

		# When TRUE, enables updates for Root AER registers Root Error Status and Error Source ID. When FALSE, disables updates to the 
		# oot AER registers Root Error Status and Error Source ID. When FALSE, disables these register updates.
		#(OFFSET, MASK, VALUE)      (0XFCE89330, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89330 0x00000001 0x00000000
		# Register : LINK_CONTROL2_SELECTABLE_DEEMPH @ 0XFCE89334</p>

		# 
		# CPM5_PCIE1_ATTR_LINK_CONTROL2_SELECTABLE_DEEMPH_ATTR                            0x0

		# Link Control2 Selectable Deemph: Allows configurablity of Link Control2 Selectable Deemph
		#(OFFSET, MASK, VALUE)      (0XFCE89334, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89334 0x00000001 0x00000000
		# Register : AUTO_FLR_RESPONSE @ 0XFCE89338</p>

		# 
		# CPM5_PCIE1_ATTR_AUTO_FLR_RESPONSE_ATTR                                          0x0

		# FEATURE USE DEPRECATION - UNUSED. When FALSE: cfg_flr_done behavior is that a 0 -ANDgt; 1 edge and valid function number on t
		# e input is used to signal that flr is complete for that function. When TRUE: cfg_flr_done inputs are tied to 1, so there is n
		#  user response required.
		#(OFFSET, MASK, VALUE)      (0XFCE89338, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89338 0x00000001 0x00000000
		# Register : DELAYED_FLR @ 0XFCE8933C</p>

		# 
		# CPM5_PCIE1_ATTR_DELAYED_FLR_ATTR                                                0x1

		# When FALSE: Original FLR behavior. When TRUE : New FLR behavior. Resetting of registers in the target function is delayed unt
		# l after user response (cfg_flr_done, cfg_vf_flr_done) is r received..
		#(OFFSET, MASK, VALUE)      (0XFCE8933C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8933C 0x00000001 0x00000001
		# Register : PFx_DSN_CAP_NEXTPTR_0 @ 0XFCE89340</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_0_ATTR                                      448

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89340, 0x00000FFFU ,0x000001C0U)  */
    mask_write 0XFCE89340 0x00000FFF 0x000001C0
		# Register : PFx_DSN_CAP_NEXTPTR_1 @ 0XFCE89344</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_1_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89344, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89344 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_2 @ 0XFCE89348</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_2_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89348, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89348 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_3 @ 0XFCE8934C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_3_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE8934C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8934C 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_4 @ 0XFCE89350</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_4_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89350, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89350 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_5 @ 0XFCE89354</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_5_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89354, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89354 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_6 @ 0XFCE89358</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_6_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89358, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89358 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_7 @ 0XFCE8935C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_7_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE8935C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8935C 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_8 @ 0XFCE89360</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_8_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89360, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89360 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_9 @ 0XFCE89364</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_9_ATTR                                      1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89364, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89364 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_10 @ 0XFCE89368</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_10_ATTR                                     1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89368, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89368 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_11 @ 0XFCE8936C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_11_ATTR                                     1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE8936C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8936C 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_12 @ 0XFCE89370</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_12_ATTR                                     1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89370, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89370 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_13 @ 0XFCE89374</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_13_ATTR                                     1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89374, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89374 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_14 @ 0XFCE89378</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_14_ATTR                                     1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89378, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89378 0x00000FFF 0x00000450
		# Register : PFx_DSN_CAP_NEXTPTR_15 @ 0XFCE8937C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DSN_CAP_NEXTPTR_15_ATTR                                     1104

		# Device Serial Number Capability Next Pointer: Offset pointer to the next item in the capabilities list, or 000h if this is th
		#  final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE8937C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8937C 0x00000FFF 0x00000450
		# Register : DSN_CAP_ENABLE @ 0XFCE89380</p>

		# 
		# CPM5_PCIE1_ATTR_DSN_CAP_ENABLE_ATTR                                             0

		# DSN Structure Enable: When TRUE, enables DSN. When FALSE, hides the capability completely
		#(OFFSET, MASK, VALUE)      (0XFCE89380, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89380 0x00000001 0x00000000
		# Register : PF0_PTM_CAP_ENABLE @ 0XFCE89384</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_CAP_ENABLE_ATTR                                         0x0

		# PTM Capability Structure Enable: When TRUE, enables the Precision Time Management Extended Capability Structure. When FALSE, 
		# isables the Capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89384, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89384 0x00000001 0x00000000
		# Register : PF0_PTM_CAP_VER @ 0XFCE89388</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_CAP_VER_ATTR                                            0x1

		# PTM Capability Version
		#(OFFSET, MASK, VALUE)      (0XFCE89388, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89388 0x0000000F 0x00000001
		# Register : PF0_PTM_CAP_NEXTPTR @ 0XFCE8938C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_CAP_NEXTPTR_ATTR                                        0x0

		# PTM Next Capability Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE8938C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8938C 0x00000FFF 0x00000000
		# Register : PF0_PTM_REQUESTER_CAPABLE @ 0XFCE89390</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_REQUESTER_CAPABLE_ATTR                                  0x0

		# PTM Requester Capable
		#(OFFSET, MASK, VALUE)      (0XFCE89390, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89390 0x00000001 0x00000000
		# Register : PF0_PTM_RESPONDER_CAPABLE @ 0XFCE89394</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_RESPONDER_CAPABLE_ATTR                                  0x0

		# PTM Responder Capable
		#(OFFSET, MASK, VALUE)      (0XFCE89394, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89394 0x00000001 0x00000000
		# Register : PF0_PTM_ROOT_CAPABLE @ 0XFCE89398</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_ROOT_CAPABLE_ATTR                                       0x0

		# PTM Root Capable
		#(OFFSET, MASK, VALUE)      (0XFCE89398, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89398 0x00000001 0x00000000
		# Register : PF0_PTM_EPTM_CAPABLE @ 0XFCE8939C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_EPTM_CAPABLE_ATTR                                       0x0

		# PTM Enhanced PTM Capable
		#(OFFSET, MASK, VALUE)      (0XFCE8939C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8939C 0x00000001 0x00000000
		# Register : PF0_PTM_LOCAL_CLOCK_GRANULARITY @ 0XFCE893A0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PTM_LOCAL_CLOCK_GRANULARITY_ATTR                            0x0

		# PTM Local Clock Granularity
		#(OFFSET, MASK, VALUE)      (0XFCE893A0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE893A0 0x000000FF 0x00000000
		# Register : PF0_DMWR_REQUESTER_SUPPORTED @ 0XFCE893A4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DMWR_REQUESTER_SUPPORTED_ATTR                               0x0

		# DMWr Requester Supported
		#(OFFSET, MASK, VALUE)      (0XFCE893A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE893A4 0x00000001 0x00000000
		# Register : PF0_DMWR_COMPLETER_SUPPORTED @ 0XFCE893A8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DMWR_COMPLETER_SUPPORTED_ATTR                               0x0

		# DMWr Completer Supported
		#(OFFSET, MASK, VALUE)      (0XFCE893A8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE893A8 0x00000001 0x00000000
		# Register : PF0_DMWR_ROUTING_SUPPORTED @ 0XFCE893AC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DMWR_ROUTING_SUPPORTED_ATTR                                 0x0

		# DMWr Routing Supported
		#(OFFSET, MASK, VALUE)      (0XFCE893AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE893AC 0x00000001 0x00000000
		# Register : PF0_VC_CAP_VER @ 0XFCE893B0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_VC_CAP_VER_ATTR                                             0x1

		# VC Capability Version
		#(OFFSET, MASK, VALUE)      (0XFCE893B0, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE893B0 0x0000000F 0x00000001
		# Register : PF0_VC_CAP_NEXTPTR @ 0XFCE893B4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_VC_CAP_NEXTPTR_ATTR                                         928

		# VC Next Capability Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE893B4, 0x00000FFFU ,0x000003A0U)  */
    mask_write 0XFCE893B4 0x00000FFF 0x000003A0
		# Register : PF0_VC_CAP_ENABLE @ 0XFCE893B8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_VC_CAP_ENABLE_ATTR                                          0x1

		# VC Capability Structure Enable: When TRUE, enabled VC0-TCx operation. When FALSE, hides the capability completely (VC0-TC0 op
		# ration).
		#(OFFSET, MASK, VALUE)      (0XFCE893B8, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE893B8 0x00000001 0x00000001
		# Register : PF0_VC_ARB_TBL_OFFSET @ 0XFCE893BC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_VC_ARB_TBL_OFFSET_ATTR                                      0x0

		# VC Arbitration Table Offset
		#(OFFSET, MASK, VALUE)      (0XFCE893BC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE893BC 0x000000FF 0x00000000
		# Register : PF0_VC_ARB_CAPABILITY @ 0XFCE893C0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_VC_ARB_CAPABILITY_ATTR                                      0x0

		# VC Arbitration Capability
		#(OFFSET, MASK, VALUE)      (0XFCE893C0, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE893C0 0x0000000F 0x00000000
		# Register : PF0_VC_EXTENDED_COUNT @ 0XFCE893C4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_VC_EXTENDED_COUNT_ATTR                                      0x0

		# VC Extended Count
		#(OFFSET, MASK, VALUE)      (0XFCE893C4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE893C4 0x00000001 0x00000000
		# Register : PF0_VC_LOW_PRIORITY_EXTENDED_COUNT @ 0XFCE893C8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_VC_LOW_PRIORITY_EXTENDED_COUNT_ATTR                         0x0

		# VC Low Priority Extended Count
		#(OFFSET, MASK, VALUE)      (0XFCE893C8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE893C8 0x00000001 0x00000000
		# Register : PF0_SECONDARY_PCIE_CAP_NEXTPTR @ 0XFCE893CC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_SECONDARY_PCIE_CAP_NEXTPTR_ATTR                             928

		# Secondary PCIe Next Capability Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE893CC, 0x00000FFFU ,0x000003A0U)  */
    mask_write 0XFCE893CC 0x00000FFF 0x000003A0
		# Register : PFx_AER_CAP_NEXTPTR_0 @ 0XFCE893D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_0_ATTR                                      448

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893D0, 0x00000FFFU ,0x000001C0U)  */
    mask_write 0XFCE893D0 0x00000FFF 0x000001C0
		# Register : PFx_AER_CAP_NEXTPTR_1 @ 0XFCE893D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_1_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893D4, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893D4 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_2 @ 0XFCE893D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_2_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893D8, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893D8 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_3 @ 0XFCE893DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_3_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893DC, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893DC 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_4 @ 0XFCE893E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_4_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893E0, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893E0 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_5 @ 0XFCE893E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_5_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893E4, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893E4 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_6 @ 0XFCE893E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_6_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893E8, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893E8 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_7 @ 0XFCE893EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_7_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893EC, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893EC 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_8 @ 0XFCE893F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_8_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893F0, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893F0 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_9 @ 0XFCE893F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_9_ATTR                                      1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893F4, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893F4 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_10 @ 0XFCE893F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_10_ATTR                                     1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893F8, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893F8 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_11 @ 0XFCE893FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_11_ATTR                                     1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE893FC, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE893FC 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_12 @ 0XFCE89400</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_12_ATTR                                     1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89400, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89400 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_13 @ 0XFCE89404</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_13_ATTR                                     1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89404, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89404 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_14 @ 0XFCE89408</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_14_ATTR                                     1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE89408, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89408 0x00000FFF 0x00000450
		# Register : PFx_AER_CAP_NEXTPTR_15 @ 0XFCE8940C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_AER_CAP_NEXTPTR_15_ATTR                                     1104

		# AER Next Capability Offset pointer to the next item in the capabilities list, or 000h if this is the final capability.
		#(OFFSET, MASK, VALUE)      (0XFCE8940C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8940C 0x00000FFF 0x00000450
		# Register : PF0_AER_CAP_ECRC_GEN_AND_CHECK_CAPABLE @ 0XFCE89410</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_AER_CAP_ECRC_GEN_AND_CHECK_CAPABLE_ATTR                     0

		# ECRC Generation and Check capable. Value transferred to bits 7 and 9 of the AER Capabilities and Control Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89410, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89410 0x00000001 0x00000000
		# Register : FORCE_ANFE_POISONED_CFGWR @ 0XFCE89414</p>

		# 
		# CPM5_PCIE1_ATTR_FORCE_ANFE_POISONED_CFGWR_ATTR                                  0x0

		# Force ANFE Poisoned CfgWr Behavior: Force error reporting of CfgWr with Poisoned Bit set as an ANFE Behavior. FALSE gives Unc
		# rrectable Error Behavior, TRUE gives ANFE Behavior. Default value is FALSE for PCIe 4.0 Spec-defined behavior.
		#(OFFSET, MASK, VALUE)      (0XFCE89414, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89414 0x00000001 0x00000000
		# Register : FORCE_ANFE_POISONED_AXI_REQUEST @ 0XFCE89418</p>

		# 
		# CPM5_PCIE1_ATTR_FORCE_ANFE_POISONED_AXI_REQUEST_ATTR                            0x0

		# Force ANFE Poisoned AXI Request Behavior: Force error reporting of AXI Requests with Poisoned Bit set as an ANFE Behavior. FA
		# SE gives Uncorrectable Error Behavior, TRUE gives ANFE Behavior. Default value is FALSE.
		#(OFFSET, MASK, VALUE)      (0XFCE89418, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89418 0x00000001 0x00000000
		# Register : FORCE_ANFE_POISONED_AXI_COMPLETION @ 0XFCE8941C</p>

		# 
		# CPM5_PCIE1_ATTR_FORCE_ANFE_POISONED_AXI_COMPLETION_ATTR                         0x0

		# Force ANFE Poisoned AXI Completion Behavior: Force error reporting of AXI Completions with Poisoned Bit set as an ANFE Behavi
		# r. FALSE gives Uncorrectable Error Behavior, TRUE gives ANFE Behavior. Default value is FALSE.
		#(OFFSET, MASK, VALUE)      (0XFCE8941C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8941C 0x00000001 0x00000000
		# Register : ARI_CAP_ENABLE @ 0XFCE89420</p>

		# 
		# CPM5_PCIE1_ATTR_ARI_CAP_ENABLE_ATTR                                             0

		# Enable ARI Capability: when FALSE: Enables legacy interpretation of PCI RID \'7b8b Bus#, 5b device#, 3b Function#\'7d; when T
		# UE: alternate interpretation of PCI RID \'7b8b Bus#, 8b Function#\'7d.
		#(OFFSET, MASK, VALUE)      (0XFCE89420, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89420 0x00000001 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_0 @ 0XFCE89424</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_0_ATTR                                      448

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89424, 0x00000FFFU ,0x000001C0U)  */
    mask_write 0XFCE89424 0x00000FFF 0x000001C0
		# Register : zFx_ARI_CAP_NEXTPTR_1 @ 0XFCE89428</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_1_ATTR                                      1104

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89428, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89428 0x00000FFF 0x00000450
		# Register : zFx_ARI_CAP_NEXTPTR_2 @ 0XFCE8942C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_2_ATTR                                      1104

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8942C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8942C 0x00000FFF 0x00000450
		# Register : zFx_ARI_CAP_NEXTPTR_3 @ 0XFCE89430</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_3_ATTR                                      1104

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89430, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89430 0x00000FFF 0x00000450
		# Register : zFx_ARI_CAP_NEXTPTR_4 @ 0XFCE89434</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_4_ATTR                                      0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89434, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89434 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_5 @ 0XFCE89438</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_5_ATTR                                      0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89438, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89438 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_6 @ 0XFCE8943C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_6_ATTR                                      0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8943C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8943C 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_7 @ 0XFCE89440</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_7_ATTR                                      0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89440, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89440 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_8 @ 0XFCE89444</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_8_ATTR                                      0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89444, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89444 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_9 @ 0XFCE89448</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_9_ATTR                                      0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89448, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89448 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_10 @ 0XFCE8944C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_10_ATTR                                     0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8944C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8944C 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_11 @ 0XFCE89450</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_11_ATTR                                     0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89450, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89450 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_12 @ 0XFCE89454</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_12_ATTR                                     0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89454, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89454 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_13 @ 0XFCE89458</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_13_ATTR                                     0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89458, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89458 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_14 @ 0XFCE8945C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_14_ATTR                                     0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8945C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8945C 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_15 @ 0XFCE89460</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_15_ATTR                                     0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89460, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89460 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_16 @ 0XFCE89464</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_16_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89464, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89464 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_17 @ 0XFCE89468</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_17_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89468, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89468 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_18 @ 0XFCE8946C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_18_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8946C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8946C 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_19 @ 0XFCE89470</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_19_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89470, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89470 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_20 @ 0XFCE89474</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_20_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89474, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89474 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_21 @ 0XFCE89478</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_21_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89478, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89478 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_22 @ 0XFCE8947C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_22_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8947C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8947C 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_23 @ 0XFCE89480</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_23_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89480, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89480 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_24 @ 0XFCE89484</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_24_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89484, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89484 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_25 @ 0XFCE89488</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_25_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89488, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89488 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_26 @ 0XFCE8948C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_26_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8948C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8948C 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_27 @ 0XFCE89490</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_27_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89490, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89490 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_28 @ 0XFCE89494</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_28_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89494, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89494 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_29 @ 0XFCE89498</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_29_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE89498, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89498 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_30 @ 0XFCE8949C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_30_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE8949C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8949C 0x00000FFF 0x00000000
		# Register : zFx_ARI_CAP_NEXTPTR_31 @ 0XFCE894A0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ARI_CAP_NEXTPTR_31_ATTR                                     0x0

		# ARI Next Capability Offset: Bits 31:20 ARI Extended Capability Header Register.
		#(OFFSET, MASK, VALUE)      (0XFCE894A0, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE894A0 0x00000FFF 0x00000000
		# Register : PF0_ARI_CAP_VER @ 0XFCE894A4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_ARI_CAP_VER_ATTR                                            0x1

		# ARI Capability Version: Bits 19:16 ARI Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE894A4, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE894A4 0x0000000F 0x00000001
		# Register : PFx_ARI_CAP_NEXT_FUNC_0 @ 0XFCE894A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_0_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894A8, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894A8 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_1 @ 0XFCE894AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_1_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894AC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894AC 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_2 @ 0XFCE894B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_2_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894B0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894B0 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_3 @ 0XFCE894B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_3_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894B4, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894B4 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_4 @ 0XFCE894B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_4_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894B8, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894B8 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_5 @ 0XFCE894BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_5_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894BC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894BC 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_6 @ 0XFCE894C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_6_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894C0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894C0 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_7 @ 0XFCE894C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_7_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894C4, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894C4 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_8 @ 0XFCE894C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_8_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894C8, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894C8 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_9 @ 0XFCE894CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_9_ATTR                                    0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894CC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894CC 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_10 @ 0XFCE894D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_10_ATTR                                   0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894D0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894D0 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_11 @ 0XFCE894D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_11_ATTR                                   0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894D4, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894D4 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_12 @ 0XFCE894D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_12_ATTR                                   0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894D8, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894D8 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_13 @ 0XFCE894DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_13_ATTR                                   0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894DC, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894DC 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_14 @ 0XFCE894E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_14_ATTR                                   0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894E0, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894E0 0x000000FF 0x00000000
		# Register : PFx_ARI_CAP_NEXT_FUNC_15 @ 0XFCE894E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_ARI_CAP_NEXT_FUNC_15_ATTR                                   0

		# ARI Next Function: Bits 15:8 ARI Capability and Control Registers. Points to the next Physical Function in the device.
		#(OFFSET, MASK, VALUE)      (0XFCE894E4, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE894E4 0x000000FF 0x00000000
		# Register : PF0_LTR_CAP_NEXTPTR @ 0XFCE894E8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LTR_CAP_NEXTPTR_ATTR                                        0x0

		# LTR Next Capability Offset: Bits 31:20 LTR Extended Capability Header Register. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE894E8, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE894E8 0x00000FFF 0x00000000
		# Register : PF0_LTR_CAP_VER @ 0XFCE894EC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LTR_CAP_VER_ATTR                                            0x1

		# LTR Capability Version: Bits 19:16 LTR Extended Capability Header Register. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE894EC, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE894EC 0x0000000F 0x00000001
		# Register : PF0_LTR_CAP_MAX_SNOOP_LAT @ 0XFCE894F0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LTR_CAP_MAX_SNOOP_LAT_ATTR                                  0x0

		# LTR Capability Max Snoop Latency: Bits 9:0 LTR Max Snoop/Max No-Snoop Latency Register. The use model is for system software 
		# o set this field, and non-default values should not be set under normal operating conditions. FEATURE USE DEPRECATION - UNUSE
		# 
		#(OFFSET, MASK, VALUE)      (0XFCE894F0, 0x000003FFU ,0x00000000U)  */
    mask_write 0XFCE894F0 0x000003FF 0x00000000
		# Register : PF0_LTR_CAP_MAX_NOSNOOP_LAT @ 0XFCE894F4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_LTR_CAP_MAX_NOSNOOP_LAT_ATTR                                0x0

		# LTR Capability Max No Snoop Latency: Bits 25:16 LTR Max Snoop/Max No-Snoop Latency Register. The use model is for system soft
		# are to set this field, and non-default values should not be set under normal operating conditions. FEATURE USE DEPRECATION - 
		# NUSED
		#(OFFSET, MASK, VALUE)      (0XFCE894F4, 0x000003FFU ,0x00000000U)  */
    mask_write 0XFCE894F4 0x000003FF 0x00000000
		# Register : LTR_TX_MESSAGE_ON_LTR_ENABLE @ 0XFCE894F8</p>

		# 
		# CPM5_PCIE1_ATTR_LTR_TX_MESSAGE_ON_LTR_ENABLE_ATTR                               0x0

		# When this bit is set to TRUE, the core will automatically transmit an LTR message whenever the LTR Mechanism Enable bit in th
		#  Device Control 2 Register changes from 0 to 1, with the parameters specified in the LTR Snoop/No-Snoop Latency Register. Whe
		#  this bit is TRUE, the core will also transmit an LTR message whenever the LTR Mechanism Enable bit is cleared, if the follow
		# ng conditions are both true: 1. The core sent at least one LTR message since the LTR Mechanism Enable bit was last set. 2. Th
		#  most recent LTR message transmitted by the core had as least one of the Requirement bits set. The core will set the Requirem
		# nt bits in this LTR message to 0. When this bit is 0, the core will not, by itself, send any LTR messages in response to stat
		#  changes of the LTR Mechanism Enable bit. User may monitor the state of the cfg_ltr_enable output of the core and transmit LT
		#  messages through the AXI interface, in response to its state changes. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE894F8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE894F8 0x00000001 0x00000000
		# Register : LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE @ 0XFCE894FC</p>

		# 
		# CPM5_PCIE1_ATTR_LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE_ATTR                  0x0

		# When this bit is set to TRUE, the core will automatically transmit an LTR message when all the Functions in the core have tra
		# sitioned to a non-D0 power state, provided that the following conditions are both true: 1. The core sent at least one LTR mes
		# age since the Data Link layer last transitioned from down to up state. 2. The most recent LTR message transmitted by the core
		# had as least one of the Requirement bits set. The core will set the Requirement bits in this LTR message to 0. When this bit 
		# 2 is 0, the core will not, by itself, send any LTR messages in response to Function Power State changes. User may monitor the
		# cfg_function_power_state outputs of the core and transmit LTR messages through the AXI interface, in response to changes in t
		# eir states. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE894FC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE894FC 0x00000001 0x00000000
		# Register : LTR_TX_MESSAGE_MINIMUM_INTERVAL @ 0XFCE89500</p>

		# 
		# CPM5_PCIE1_ATTR_LTR_TX_MESSAGE_MINIMUM_INTERVAL_ATTR                            0x250

		# This attribute specifies the minimum spacing between LTR messages transmitted by the core in units of microseconds. The PCI E
		# press Specifications recommend sending no more than two LTR messages within a 500 microsecond interval. The core will wait fo
		#  the minimum delay specified by this field after sending an LTR message, before transmitting a new LTR message. FEATURE USE D
		# PRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89500, 0x000003FFU ,0x00000250U)  */
    mask_write 0XFCE89500 0x000003FF 0x00000250
		# Register : SRIOV_CAP_ENABLE @ 0XFCE89504</p>

		# 
		# CPM5_PCIE1_ATTR_SRIOV_CAP_ENABLE_ATTR                                           0

		# Enable SRIOV Capability: Single Root I/O Virtualization (SR-IOV) feature is enabled per Physical Function. bit 0 - PF0, bit 1
		# - PF1, bit 2 - PF2, bit 3 - PF3 and so on to bit 15 - PF15. [PF8-15 in PCIeA only.] ARI_CAP_ENABLE must be set to TRUE when S
		# IOV_CAP_ENABLE is non-zero.
		#(OFFSET, MASK, VALUE)      (0XFCE89504, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89504 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_CAP_NEXTPTR_0 @ 0XFCE89508</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_0_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89508, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89508 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_1 @ 0XFCE8950C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_1_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8950C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8950C 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_2 @ 0XFCE89510</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_2_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89510, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89510 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_3 @ 0XFCE89514</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_3_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89514, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89514 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_4 @ 0XFCE89518</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_4_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89518, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89518 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_5 @ 0XFCE8951C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_5_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8951C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8951C 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_6 @ 0XFCE89520</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_6_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89520, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89520 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_7 @ 0XFCE89524</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_7_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89524, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89524 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_8 @ 0XFCE89528</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_8_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89528, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89528 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_9 @ 0XFCE8952C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_9_ATTR                                    1104

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8952C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE8952C 0x00000FFF 0x00000450
		# Register : PFx_SRIOV_CAP_NEXTPTR_10 @ 0XFCE89530</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_10_ATTR                                   0x0

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89530, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89530 0x00000FFF 0x00000000
		# Register : PFx_SRIOV_CAP_NEXTPTR_11 @ 0XFCE89534</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_11_ATTR                                   0x0

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89534, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89534 0x00000FFF 0x00000000
		# Register : PFx_SRIOV_CAP_NEXTPTR_12 @ 0XFCE89538</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_12_ATTR                                   0x0

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89538, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89538 0x00000FFF 0x00000000
		# Register : PFx_SRIOV_CAP_NEXTPTR_13 @ 0XFCE8953C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_13_ATTR                                   0x0

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8953C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8953C 0x00000FFF 0x00000000
		# Register : PFx_SRIOV_CAP_NEXTPTR_14 @ 0XFCE89540</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_14_ATTR                                   0x0

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89540, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89540 0x00000FFF 0x00000000
		# Register : PFx_SRIOV_CAP_NEXTPTR_15 @ 0XFCE89544</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_NEXTPTR_15_ATTR                                   0x0

		# SRIOV Next Capability Offset: Bits 31:20 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89544, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89544 0x00000FFF 0x00000000
		# Register : PFx_SRIOV_CAP_VER_0 @ 0XFCE89548</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_0_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89548, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89548 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_1 @ 0XFCE8954C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_1_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8954C, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE8954C 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_2 @ 0XFCE89550</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_2_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89550, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89550 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_3 @ 0XFCE89554</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_3_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89554, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89554 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_4 @ 0XFCE89558</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_4_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89558, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89558 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_5 @ 0XFCE8955C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_5_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8955C, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE8955C 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_6 @ 0XFCE89560</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_6_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89560, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89560 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_7 @ 0XFCE89564</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_7_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89564, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89564 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_8 @ 0XFCE89568</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_8_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89568, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89568 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_9 @ 0XFCE8956C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_9_ATTR                                        1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8956C, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE8956C 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_10 @ 0XFCE89570</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_10_ATTR                                       1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89570, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89570 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_11 @ 0XFCE89574</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_11_ATTR                                       1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89574, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89574 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_12 @ 0XFCE89578</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_12_ATTR                                       1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89578, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89578 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_13 @ 0XFCE8957C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_13_ATTR                                       1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8957C, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE8957C 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_14 @ 0XFCE89580</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_14_ATTR                                       1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89580, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89580 0x0000000F 0x00000001
		# Register : PFx_SRIOV_CAP_VER_15 @ 0XFCE89584</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_VER_15_ATTR                                       1

		# SRIOV Capability Version: Bits 19:16 SRIOV Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE89584, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89584 0x0000000F 0x00000001
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_0 @ 0XFCE89588</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_0_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE89588, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89588 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_1 @ 0XFCE8958C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_1_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE8958C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8958C 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_2 @ 0XFCE89590</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_2_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE89590, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89590 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_3 @ 0XFCE89594</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_3_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE89594, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89594 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_4 @ 0XFCE89598</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_4_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE89598, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89598 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_5 @ 0XFCE8959C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_5_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE8959C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8959C 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_6 @ 0XFCE895A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_6_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895A0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895A0 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_7 @ 0XFCE895A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_7_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895A4 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_8 @ 0XFCE895A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_8_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895A8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895A8 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_9 @ 0XFCE895AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_9_ATTR                       0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895AC 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_10 @ 0XFCE895B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_10_ATTR                      0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895B0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895B0 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_11 @ 0XFCE895B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_11_ATTR                      0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895B4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895B4 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_12 @ 0XFCE895B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_12_ATTR                      0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895B8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895B8 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_13 @ 0XFCE895BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_13_ATTR                      0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895BC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895BC 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_14 @ 0XFCE895C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_14_ATTR                      0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895C0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895C0 0x00000001 0x00000000
		# Register : PFx_SRIOV_ARI_CAPBL_HIER_PRESERVED_15 @ 0XFCE895C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_ARI_CAPBL_HIER_PRESERVED_15_ATTR                      0x0

		# ARI Capable Hierarchy Preserved : If set to TRUE, the ARI Capable Hierarchy bit is preserved across certain power state trans
		# tions.
		#(OFFSET, MASK, VALUE)      (0XFCE895C4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE895C4 0x00000001 0x00000000
		# Register : PFx_SRIOV_CAP_INITIAL_VF_0 @ 0XFCE895C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_0_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895C8, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895C8 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_1 @ 0XFCE895CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_1_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895CC, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895CC 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_2 @ 0XFCE895D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_2_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895D0, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895D0 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_3 @ 0XFCE895D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_3_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895D4, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895D4 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_4 @ 0XFCE895D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_4_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895D8, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895D8 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_5 @ 0XFCE895DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_5_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895DC, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895DC 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_6 @ 0XFCE895E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_6_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895E0, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895E0 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_7 @ 0XFCE895E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_7_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895E4, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895E4 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_8 @ 0XFCE895E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_8_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895E8, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895E8 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_9 @ 0XFCE895EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_9_ATTR                                 4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895EC, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895EC 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_10 @ 0XFCE895F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_10_ATTR                                4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895F0, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895F0 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_11 @ 0XFCE895F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_11_ATTR                                4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895F4, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895F4 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_12 @ 0XFCE895F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_12_ATTR                                4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895F8, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895F8 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_13 @ 0XFCE895FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_13_ATTR                                4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE895FC, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE895FC 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_14 @ 0XFCE89600</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_14_ATTR                                4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89600, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89600 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_INITIAL_VF_15 @ 0XFCE89604</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_INITIAL_VF_15_ATTR                                4

		# Initial Number of VFs: Initial number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be pow
		# r of 2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89604, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89604 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_0 @ 0XFCE89608</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_0_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89608, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89608 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_1 @ 0XFCE8960C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_1_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE8960C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8960C 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_2 @ 0XFCE89610</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_2_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89610, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89610 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_3 @ 0XFCE89614</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_3_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89614, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89614 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_4 @ 0XFCE89618</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_4_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89618, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89618 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_5 @ 0XFCE8961C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_5_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE8961C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8961C 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_6 @ 0XFCE89620</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_6_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89620, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89620 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_7 @ 0XFCE89624</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_7_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89624, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89624 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_8 @ 0XFCE89628</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_8_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89628, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89628 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_9 @ 0XFCE8962C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_9_ATTR                                   4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE8962C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8962C 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_10 @ 0XFCE89630</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_10_ATTR                                  4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89630, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89630 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_11 @ 0XFCE89634</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_11_ATTR                                  4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89634, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89634 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_12 @ 0XFCE89638</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_12_ATTR                                  4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89638, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89638 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_13 @ 0XFCE8963C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_13_ATTR                                  4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE8963C, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE8963C 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_14 @ 0XFCE89640</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_14_ATTR                                  4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89640, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89640 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_CAP_TOTAL_VF_15 @ 0XFCE89644</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_CAP_TOTAL_VF_15_ATTR                                  4

		# Total Number of VFs: Total number of VFs configured for PF0. Must be equal to PF0_SRIOV_CAP_INITIAL_VF. Count must be power o
		#  2 for PF0_SRIOV_VF_STRIDE ANDgt; 1.
		#(OFFSET, MASK, VALUE)      (0XFCE89644, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89644 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_FUNC_DEP_LINK_0 @ 0XFCE89648</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_0_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89648, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89648 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_1 @ 0XFCE8964C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_1_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8964C, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8964C 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_2 @ 0XFCE89650</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_2_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89650, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89650 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_3 @ 0XFCE89654</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_3_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89654, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89654 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_4 @ 0XFCE89658</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_4_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89658, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89658 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_5 @ 0XFCE8965C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_5_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8965C, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8965C 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_6 @ 0XFCE89660</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_6_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89660, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89660 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_7 @ 0XFCE89664</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_7_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89664, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89664 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_8 @ 0XFCE89668</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_8_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89668, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89668 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_9 @ 0XFCE8966C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_9_ATTR                                  0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8966C, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8966C 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_10 @ 0XFCE89670</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_10_ATTR                                 0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89670, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89670 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_11 @ 0XFCE89674</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_11_ATTR                                 0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89674, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89674 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_12 @ 0XFCE89678</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_12_ATTR                                 0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89678, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89678 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_13 @ 0XFCE8967C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_13_ATTR                                 0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE8967C, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8967C 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_14 @ 0XFCE89680</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_14_ATTR                                 0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89680, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89680 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FUNC_DEP_LINK_15 @ 0XFCE89684</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FUNC_DEP_LINK_15_ATTR                                 0

		# Physical Function Dependency Link: This field is used to specify dependencies between PFs. The programming model for a Device
		# may have vendor specific dependencies between sets of Functions. The Function Dependency Link field is used to describe these
		# dependencies. Upper 8 bits are reserved/unused.
		#(OFFSET, MASK, VALUE)      (0XFCE89684, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89684 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_0 @ 0XFCE89688</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_0_ATTR                                4

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE89688, 0x0000FFFFU ,0x00000004U)  */
    mask_write 0XFCE89688 0x0000FFFF 0x00000004
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_1 @ 0XFCE8968C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_1_ATTR                                7

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE8968C, 0x0000FFFFU ,0x00000007U)  */
    mask_write 0XFCE8968C 0x0000FFFF 0x00000007
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_2 @ 0XFCE89690</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_2_ATTR                                10

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE89690, 0x0000FFFFU ,0x0000000AU)  */
    mask_write 0XFCE89690 0x0000FFFF 0x0000000A
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_3 @ 0XFCE89694</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_3_ATTR                                13

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE89694, 0x0000FFFFU ,0x0000000DU)  */
    mask_write 0XFCE89694 0x0000FFFF 0x0000000D
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_4 @ 0XFCE89698</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_4_ATTR                                16

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE89698, 0x0000FFFFU ,0x00000010U)  */
    mask_write 0XFCE89698 0x0000FFFF 0x00000010
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_5 @ 0XFCE8969C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_5_ATTR                                19

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE8969C, 0x0000FFFFU ,0x00000013U)  */
    mask_write 0XFCE8969C 0x0000FFFF 0x00000013
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_6 @ 0XFCE896A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_6_ATTR                                22

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896A0, 0x0000FFFFU ,0x00000016U)  */
    mask_write 0XFCE896A0 0x0000FFFF 0x00000016
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_7 @ 0XFCE896A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_7_ATTR                                25

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896A4, 0x0000FFFFU ,0x00000019U)  */
    mask_write 0XFCE896A4 0x0000FFFF 0x00000019
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_8 @ 0XFCE896A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_8_ATTR                                28

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896A8, 0x0000FFFFU ,0x0000001CU)  */
    mask_write 0XFCE896A8 0x0000FFFF 0x0000001C
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_9 @ 0XFCE896AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_9_ATTR                                31

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896AC, 0x0000FFFFU ,0x0000001FU)  */
    mask_write 0XFCE896AC 0x0000FFFF 0x0000001F
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_10 @ 0XFCE896B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_10_ATTR                               34

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896B0, 0x0000FFFFU ,0x00000022U)  */
    mask_write 0XFCE896B0 0x0000FFFF 0x00000022
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_11 @ 0XFCE896B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_11_ATTR                               37

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896B4, 0x0000FFFFU ,0x00000025U)  */
    mask_write 0XFCE896B4 0x0000FFFF 0x00000025
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_12 @ 0XFCE896B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_12_ATTR                               40

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896B8, 0x0000FFFFU ,0x00000028U)  */
    mask_write 0XFCE896B8 0x0000FFFF 0x00000028
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_13 @ 0XFCE896BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_13_ATTR                               43

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896BC, 0x0000FFFFU ,0x0000002BU)  */
    mask_write 0XFCE896BC 0x0000FFFF 0x0000002B
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_14 @ 0XFCE896C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_14_ATTR                               46

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896C0, 0x0000FFFFU ,0x0000002EU)  */
    mask_write 0XFCE896C0 0x0000FFFF 0x0000002E
		# Register : PFx_SRIOV_FIRST_VF_OFFSET_15 @ 0XFCE896C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_FIRST_VF_OFFSET_15_ATTR                               49

		# Offset of First VF : Allowed values for the first SR-IOV PF are: 16D. For all subsequent SR-IOV enabled PFs value allowed is 
		# um (PFx_SRIOV_CAP_TOTAL_VF + PFx_SRIOV_FIRST_VF_OFFSET -1) taken for the preious SR-IOV PF. 0h if the PF does not support SR-
		# OV.
		#(OFFSET, MASK, VALUE)      (0XFCE896C4, 0x0000FFFFU ,0x00000031U)  */
    mask_write 0XFCE896C4 0x0000FFFF 0x00000031
		# Register : PFx_SRIOV_VF_DEVICE_ID_0 @ 0XFCE896C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_0_ATTR                                   49215

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896C8, 0x0000FFFFU ,0x0000C03FU)  */
    mask_write 0XFCE896C8 0x0000FFFF 0x0000C03F
		# Register : PFx_SRIOV_VF_DEVICE_ID_1 @ 0XFCE896CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_1_ATTR                                   49471

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896CC, 0x0000FFFFU ,0x0000C13FU)  */
    mask_write 0XFCE896CC 0x0000FFFF 0x0000C13F
		# Register : PFx_SRIOV_VF_DEVICE_ID_2 @ 0XFCE896D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_2_ATTR                                   49727

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896D0, 0x0000FFFFU ,0x0000C23FU)  */
    mask_write 0XFCE896D0 0x0000FFFF 0x0000C23F
		# Register : PFx_SRIOV_VF_DEVICE_ID_3 @ 0XFCE896D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_3_ATTR                                   49983

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896D4, 0x0000FFFFU ,0x0000C33FU)  */
    mask_write 0XFCE896D4 0x0000FFFF 0x0000C33F
		# Register : PFx_SRIOV_VF_DEVICE_ID_4 @ 0XFCE896D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_4_ATTR                                   50239

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896D8, 0x0000FFFFU ,0x0000C43FU)  */
    mask_write 0XFCE896D8 0x0000FFFF 0x0000C43F
		# Register : PFx_SRIOV_VF_DEVICE_ID_5 @ 0XFCE896DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_5_ATTR                                   50495

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896DC, 0x0000FFFFU ,0x0000C53FU)  */
    mask_write 0XFCE896DC 0x0000FFFF 0x0000C53F
		# Register : PFx_SRIOV_VF_DEVICE_ID_6 @ 0XFCE896E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_6_ATTR                                   50751

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896E0, 0x0000FFFFU ,0x0000C63FU)  */
    mask_write 0XFCE896E0 0x0000FFFF 0x0000C63F
		# Register : PFx_SRIOV_VF_DEVICE_ID_7 @ 0XFCE896E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_7_ATTR                                   51007

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896E4, 0x0000FFFFU ,0x0000C73FU)  */
    mask_write 0XFCE896E4 0x0000FFFF 0x0000C73F
		# Register : PFx_SRIOV_VF_DEVICE_ID_8 @ 0XFCE896E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_8_ATTR                                   51263

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896E8, 0x0000FFFFU ,0x0000C83FU)  */
    mask_write 0XFCE896E8 0x0000FFFF 0x0000C83F
		# Register : PFx_SRIOV_VF_DEVICE_ID_9 @ 0XFCE896EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_9_ATTR                                   51519

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896EC, 0x0000FFFFU ,0x0000C93FU)  */
    mask_write 0XFCE896EC 0x0000FFFF 0x0000C93F
		# Register : PFx_SRIOV_VF_DEVICE_ID_10 @ 0XFCE896F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_10_ATTR                                  51775

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896F0, 0x0000FFFFU ,0x0000CA3FU)  */
    mask_write 0XFCE896F0 0x0000FFFF 0x0000CA3F
		# Register : PFx_SRIOV_VF_DEVICE_ID_11 @ 0XFCE896F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_11_ATTR                                  52031

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896F4, 0x0000FFFFU ,0x0000CB3FU)  */
    mask_write 0XFCE896F4 0x0000FFFF 0x0000CB3F
		# Register : PFx_SRIOV_VF_DEVICE_ID_12 @ 0XFCE896F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_12_ATTR                                  52287

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896F8, 0x0000FFFFU ,0x0000CC3FU)  */
    mask_write 0XFCE896F8 0x0000FFFF 0x0000CC3F
		# Register : PFx_SRIOV_VF_DEVICE_ID_13 @ 0XFCE896FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_13_ATTR                                  52543

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE896FC, 0x0000FFFFU ,0x0000CD3FU)  */
    mask_write 0XFCE896FC 0x0000FFFF 0x0000CD3F
		# Register : PFx_SRIOV_VF_DEVICE_ID_14 @ 0XFCE89700</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_14_ATTR                                  52799

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE89700, 0x0000FFFFU ,0x0000CE3FU)  */
    mask_write 0XFCE89700 0x0000FFFF 0x0000CE3F
		# Register : PFx_SRIOV_VF_DEVICE_ID_15 @ 0XFCE89704</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_VF_DEVICE_ID_15_ATTR                                  53055

		# VF Device ID assigned to device: This field contains the Device ID that should be presented for every VF
		#(OFFSET, MASK, VALUE)      (0XFCE89704, 0x0000FFFFU ,0x0000CF3FU)  */
    mask_write 0XFCE89704 0x0000FFFF 0x0000CF3F
		# Register : PF0_SRIOV_VF_STRIDE @ 0XFCE89708</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_SRIOV_VF_STRIDE_ATTR                                        0x0

		# VF Stride: This field contains the VF Stride of 1,2,4,8 or16. Should be equal or greather than number of PFs enabled.
		#(OFFSET, MASK, VALUE)      (0XFCE89708, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE89708 0x0000FFFF 0x00000000
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_0 @ 0XFCE8970C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_0_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE8970C, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE8970C 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_1 @ 0XFCE89710</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_1_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89710, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89710 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_2 @ 0XFCE89714</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_2_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89714, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89714 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_3 @ 0XFCE89718</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_3_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89718, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89718 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_4 @ 0XFCE8971C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_4_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE8971C, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE8971C 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_5 @ 0XFCE89720</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_5_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89720, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89720 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_6 @ 0XFCE89724</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_6_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89724, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89724 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_7 @ 0XFCE89728</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_7_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89728, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89728 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_8 @ 0XFCE8972C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_8_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE8972C, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE8972C 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_9 @ 0XFCE89730</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_9_ATTR                            0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89730, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89730 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_10 @ 0XFCE89734</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_10_ATTR                           0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89734, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89734 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_11 @ 0XFCE89738</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_11_ATTR                           0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89738, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89738 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_12 @ 0XFCE8973C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_12_ATTR                           0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE8973C, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE8973C 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_13 @ 0XFCE89740</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_13_ATTR                           0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89740, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89740 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_14 @ 0XFCE89744</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_14_ATTR                           0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89744, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89744 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_SUPPORTED_PAGE_SIZE_15 @ 0XFCE89748</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_SUPPORTED_PAGE_SIZE_15_ATTR                           0x00000553

		# Page Size Supported By Device: This field indicates the page sizes supported by the PF. This PF supports a page size of 2n+12
		# if bit n is Set
		#(OFFSET, MASK, VALUE)      (0XFCE89748, 0xFFFFFFFFU ,0x00000553U)  */
    mask_write 0XFCE89748 0xFFFFFFFF 0x00000553
		# Register : PFx_SRIOV_BAR0_CONTROL_0 @ 0XFCE8974C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_0_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8974C, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE8974C 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_1 @ 0XFCE89750</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_1_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89750, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89750 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_2 @ 0XFCE89754</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_2_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89754, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89754 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_3 @ 0XFCE89758</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_3_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89758, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89758 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_4 @ 0XFCE8975C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_4_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8975C, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE8975C 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_5 @ 0XFCE89760</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_5_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89760, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89760 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_6 @ 0XFCE89764</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_6_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89764, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89764 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_7 @ 0XFCE89768</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_7_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89768, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89768 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_8 @ 0XFCE8976C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_8_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8976C, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE8976C 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_9 @ 0XFCE89770</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_9_ATTR                                   4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89770, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89770 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_10 @ 0XFCE89774</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_10_ATTR                                  4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89774, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89774 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_11 @ 0XFCE89778</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_11_ATTR                                  4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89778, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89778 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_12 @ 0XFCE8977C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_12_ATTR                                  4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8977C, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE8977C 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_13 @ 0XFCE89780</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_13_ATTR                                  4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89780, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89780 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_14 @ 0XFCE89784</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_14_ATTR                                  4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89784, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89784 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_CONTROL_15 @ 0XFCE89788</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_CONTROL_15_ATTR                                  4

		# VF BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89788, 0x00000007U ,0x00000004U)  */
    mask_write 0XFCE89788 0x00000007 0x00000004
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_0 @ 0XFCE8978C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_0_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8978C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8978C 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_1 @ 0XFCE89790</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_1_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89790, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89790 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_2 @ 0XFCE89794</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_2_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89794, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89794 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_3 @ 0XFCE89798</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_3_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89798, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89798 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_4 @ 0XFCE8979C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_4_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8979C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8979C 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_5 @ 0XFCE897A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_5_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897A0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897A0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_6 @ 0XFCE897A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_6_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897A4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897A4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_7 @ 0XFCE897A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_7_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897A8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897A8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_8 @ 0XFCE897AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_8_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897AC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897AC 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_9 @ 0XFCE897B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_9_ATTR                             0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897B0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897B0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_10 @ 0XFCE897B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_10_ATTR                            0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897B4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897B4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_11 @ 0XFCE897B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_11_ATTR                            0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897B8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897B8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_12 @ 0XFCE897BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_12_ATTR                            0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897BC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897BC 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_13 @ 0XFCE897C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_13_ATTR                            0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897C0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897C0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_14 @ 0XFCE897C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_14_ATTR                            0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897C4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897C4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR0_APERTURE_SIZE_15 @ 0XFCE897C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR0_APERTURE_SIZE_15_ATTR                            0x0

		# VF BAR0 Aperture: Specifies the aperture of the 32-bit BAR 0 or 64-bit BAR 0-1.The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE897C8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE897C8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_0 @ 0XFCE897CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_0_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897CC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897CC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_1 @ 0XFCE897D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_1_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897D0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897D0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_2 @ 0XFCE897D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_2_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897D4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897D4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_3 @ 0XFCE897D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_3_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897D8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897D8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_4 @ 0XFCE897DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_4_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897DC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897DC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_5 @ 0XFCE897E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_5_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897E0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897E0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_6 @ 0XFCE897E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_6_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897E4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897E4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_7 @ 0XFCE897E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_7_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897E8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_8 @ 0XFCE897EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_8_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897EC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897EC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_9 @ 0XFCE897F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_9_ATTR                                   0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897F0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_10 @ 0XFCE897F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_10_ATTR                                  0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897F4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_11 @ 0XFCE897F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_11_ATTR                                  0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897F8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897F8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_12 @ 0XFCE897FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_12_ATTR                                  0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE897FC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE897FC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_13 @ 0XFCE89800</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_13_ATTR                                  0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89800, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89800 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_14 @ 0XFCE89804</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_14_ATTR                                  0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89804, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89804 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_CONTROL_15 @ 0XFCE89808</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_CONTROL_15_ATTR                                  0

		# VF BAR1 Control - Specifies the configuration of BAR 1 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89808, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89808 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_0 @ 0XFCE8980C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_0_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8980C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8980C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_1 @ 0XFCE89810</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_1_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89810, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89810 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_2 @ 0XFCE89814</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_2_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89814, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89814 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_3 @ 0XFCE89818</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_3_ATTR                             0x0

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_3_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89818, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89818 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_4 @ 0XFCE8981C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_4_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8981C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8981C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_5 @ 0XFCE89820</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_5_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89820, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89820 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_6 @ 0XFCE89824</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_6_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89824, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89824 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_7 @ 0XFCE89828</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_7_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89828, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89828 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_8 @ 0XFCE8982C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_8_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8982C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8982C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_9 @ 0XFCE89830</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_9_ATTR                             0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89830, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89830 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_10 @ 0XFCE89834</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_10_ATTR                            0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89834, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89834 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_11 @ 0XFCE89838</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_11_ATTR                            0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89838, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89838 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_12 @ 0XFCE8983C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_12_ATTR                            0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8983C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8983C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_13 @ 0XFCE89840</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_13_ATTR                            0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89840, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89840 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_14 @ 0XFCE89844</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_14_ATTR                            0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89844, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89844 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR1_APERTURE_SIZE_15 @ 0XFCE89848</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR1_APERTURE_SIZE_15_ATTR                            0x0

		# VF BAR1 Aperture: Specifies the aperture of BAR 1 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89848, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89848 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_0 @ 0XFCE8984C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_0_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8984C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8984C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_1 @ 0XFCE89850</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_1_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89850, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89850 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_2 @ 0XFCE89854</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_2_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89854, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89854 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_3 @ 0XFCE89858</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_3_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89858, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89858 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_4 @ 0XFCE8985C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_4_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8985C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8985C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_5 @ 0XFCE89860</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_5_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89860, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89860 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_6 @ 0XFCE89864</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_6_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89864, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89864 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_7 @ 0XFCE89868</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_7_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89868, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89868 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_8 @ 0XFCE8986C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_8_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8986C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8986C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_9 @ 0XFCE89870</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_9_ATTR                                   0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89870, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89870 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_10 @ 0XFCE89874</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_10_ATTR                                  0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89874, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89874 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_11 @ 0XFCE89878</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_11_ATTR                                  0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89878, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89878 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_12 @ 0XFCE8987C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_12_ATTR                                  0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8987C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8987C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_13 @ 0XFCE89880</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_13_ATTR                                  0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89880, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89880 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_14 @ 0XFCE89884</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_14_ATTR                                  0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89884, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89884 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_CONTROL_15 @ 0XFCE89888</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_CONTROL_15_ATTR                                  0

		# VF BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-prefetchable 111: 
		# art of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89888, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89888 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_0 @ 0XFCE8988C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_0_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8988C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8988C 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_1 @ 0XFCE89890</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_1_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89890, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89890 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_2 @ 0XFCE89894</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_2_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89894, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89894 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_3 @ 0XFCE89898</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_3_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89898, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89898 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_4 @ 0XFCE8989C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_4_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8989C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8989C 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_5 @ 0XFCE898A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_5_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898A0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898A0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_6 @ 0XFCE898A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_6_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898A4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898A4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_7 @ 0XFCE898A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_7_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898A8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898A8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_8 @ 0XFCE898AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_8_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898AC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898AC 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_9 @ 0XFCE898B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_9_ATTR                             0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898B0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898B0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_10 @ 0XFCE898B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_10_ATTR                            0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898B4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898B4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_11 @ 0XFCE898B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_11_ATTR                            0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898B8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898B8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_12 @ 0XFCE898BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_12_ATTR                            0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898BC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898BC 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_13 @ 0XFCE898C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_13_ATTR                            0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898C0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898C0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_14 @ 0XFCE898C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_14_ATTR                            0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898C4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898C4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR2_APERTURE_SIZE_15 @ 0XFCE898C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR2_APERTURE_SIZE_15_ATTR                            0x0

		# VF BAR2 Aperture: Specifies the aperture of the 32-bit BAR 2 or 64-bit BAR2-3. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE898C8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE898C8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_0 @ 0XFCE898CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_0_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898CC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898CC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_1 @ 0XFCE898D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_1_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898D0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898D0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_2 @ 0XFCE898D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_2_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898D4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898D4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_3 @ 0XFCE898D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_3_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898D8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898D8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_4 @ 0XFCE898DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_4_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898DC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898DC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_5 @ 0XFCE898E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_5_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898E0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898E0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_6 @ 0XFCE898E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_6_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898E4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898E4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_7 @ 0XFCE898E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_7_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898E8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_8 @ 0XFCE898EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_8_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898EC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898EC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_9 @ 0XFCE898F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_9_ATTR                                   0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898F0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_10 @ 0XFCE898F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_10_ATTR                                  0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898F4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_11 @ 0XFCE898F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_11_ATTR                                  0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898F8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898F8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_12 @ 0XFCE898FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_12_ATTR                                  0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE898FC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE898FC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_13 @ 0XFCE89900</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_13_ATTR                                  0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89900, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89900 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_14 @ 0XFCE89904</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_14_ATTR                                  0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89904, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89904 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_CONTROL_15 @ 0XFCE89908</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_CONTROL_15_ATTR                                  0

		# VF BAR3 Control - Specifies the configuration of BAR 3 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89908, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89908 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_0 @ 0XFCE8990C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_0_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8990C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8990C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_1 @ 0XFCE89910</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_1_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89910, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89910 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_2 @ 0XFCE89914</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_2_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89914, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89914 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_3 @ 0XFCE89918</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_3_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89918, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89918 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_4 @ 0XFCE8991C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_4_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8991C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8991C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_5 @ 0XFCE89920</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_5_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89920, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89920 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_6 @ 0XFCE89924</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_6_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89924, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89924 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_7 @ 0XFCE89928</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_7_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89928, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89928 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_8 @ 0XFCE8992C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_8_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8992C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8992C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_9 @ 0XFCE89930</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_9_ATTR                             0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89930, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89930 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_10 @ 0XFCE89934</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_10_ATTR                            0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89934, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89934 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_11 @ 0XFCE89938</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_11_ATTR                            0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89938, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89938 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_12 @ 0XFCE8993C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_12_ATTR                            0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8993C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8993C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_13 @ 0XFCE89940</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_13_ATTR                            0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89940, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89940 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_14 @ 0XFCE89944</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_14_ATTR                            0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89944, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89944 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR3_APERTURE_SIZE_15 @ 0XFCE89948</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR3_APERTURE_SIZE_15_ATTR                            0x0

		# VF BAR3 Aperture: Specifies the aperture of BAR 3 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89948, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89948 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_0 @ 0XFCE8994C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_0_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8994C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8994C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_1 @ 0XFCE89950</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_1_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89950, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89950 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_2 @ 0XFCE89954</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_2_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89954, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89954 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_3 @ 0XFCE89958</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_3_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89958, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89958 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_4 @ 0XFCE8995C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_4_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8995C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8995C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_5 @ 0XFCE89960</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_5_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89960, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89960 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_6 @ 0XFCE89964</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_6_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89964, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89964 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_7 @ 0XFCE89968</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_7_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89968, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89968 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_8 @ 0XFCE8996C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_8_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8996C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8996C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_9 @ 0XFCE89970</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_9_ATTR                                   0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89970, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89970 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_10 @ 0XFCE89974</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_10_ATTR                                  0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89974, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89974 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_11 @ 0XFCE89978</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_11_ATTR                                  0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89978, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89978 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_12 @ 0XFCE8997C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_12_ATTR                                  0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8997C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8997C 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_13 @ 0XFCE89980</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_13_ATTR                                  0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89980, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89980 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_14 @ 0XFCE89984</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_14_ATTR                                  0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89984, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89984 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_CONTROL_15 @ 0XFCE89988</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_CONTROL_15_ATTR                                  0

		# VF BAR4 Control - Specifies the configuration of BAR 4. The various encodings are: 000: Disabled 001-011: Reserved 100: 32-bi
		#  memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 4-5, non-prefetchable 111: 
		# art of 64-bit memory BAR 4-5, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89988, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89988 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_0 @ 0XFCE8998C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_0_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8998C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8998C 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_1 @ 0XFCE89990</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_1_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89990, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89990 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_2 @ 0XFCE89994</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_2_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89994, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89994 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_3 @ 0XFCE89998</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_3_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE89998, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE89998 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_4 @ 0XFCE8999C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_4_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8999C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8999C 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_5 @ 0XFCE899A0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_5_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899A0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899A0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_6 @ 0XFCE899A4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_6_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899A4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899A4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_7 @ 0XFCE899A8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_7_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899A8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899A8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_8 @ 0XFCE899AC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_8_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899AC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899AC 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_9 @ 0XFCE899B0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_9_ATTR                             0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899B0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899B0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_10 @ 0XFCE899B4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_10_ATTR                            0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899B4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899B4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_11 @ 0XFCE899B8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_11_ATTR                            0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899B8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899B8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_12 @ 0XFCE899BC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_12_ATTR                            0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899BC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899BC 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_13 @ 0XFCE899C0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_13_ATTR                            0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899C0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899C0 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_14 @ 0XFCE899C4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_14_ATTR                            0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899C4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899C4 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR4_APERTURE_SIZE_15 @ 0XFCE899C8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR4_APERTURE_SIZE_15_ATTR                            0x0

		# VF BAR4 Aperture: Specifies the aperture of the 32-bit BAR 4 or 64-bit BAR4-5. The encodings are: 000000-000101 = 4 Kbytes 00
		# 110 = 8 Kbytes 000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 
		# bytes 001101 = 1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 
		# 4 Mbytes 010100 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 01
		# 010 = 8 Gbytes 011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 
		# bytes 100001= 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64
		# Tbytes 101000 = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011= 1 Pbytes 101100= 2 Pbytes 101101 = 4 Pbytes 101110
		# = 8 Pbytes 101111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbyt
		# s 110101= 1 Ebytes 110110= 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE899C8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE899C8 0x0000003F 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_0 @ 0XFCE899CC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_0_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899CC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899CC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_1 @ 0XFCE899D0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_1_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899D0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899D0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_2 @ 0XFCE899D4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_2_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899D4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899D4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_3 @ 0XFCE899D8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_3_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899D8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899D8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_4 @ 0XFCE899DC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_4_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899DC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899DC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_5 @ 0XFCE899E0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_5_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899E0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899E0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_6 @ 0XFCE899E4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_6_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899E4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899E4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_7 @ 0XFCE899E8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_7_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899E8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_8 @ 0XFCE899EC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_8_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899EC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899EC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_9 @ 0XFCE899F0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_9_ATTR                                   0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899F0 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_10 @ 0XFCE899F4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_10_ATTR                                  0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899F4 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_11 @ 0XFCE899F8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_11_ATTR                                  0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899F8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899F8 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_12 @ 0XFCE899FC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_12_ATTR                                  0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE899FC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE899FC 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_13 @ 0XFCE89A00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_13_ATTR                                  0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89A00, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89A00 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_14 @ 0XFCE89A04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_14_ATTR                                  0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89A04, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89A04 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_CONTROL_15 @ 0XFCE89A08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_CONTROL_15_ATTR                                  0

		# VF BAR5 Control - Specifies the configuration of BAR 5 when it is configured as a 32-bit BAR. The various encodings are: 000:
		# Disabled 001-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE89A08, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89A08 0x00000007 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_0 @ 0XFCE89A0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_0_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A0C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A0C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_1 @ 0XFCE89A10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_1_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A10, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A10 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_2 @ 0XFCE89A14</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_2_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A14, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A14 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_3 @ 0XFCE89A18</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_3_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A18, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A18 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_4 @ 0XFCE89A1C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_4_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A1C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A1C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_5 @ 0XFCE89A20</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_5_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A20, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A20 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_6 @ 0XFCE89A24</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_6_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A24, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A24 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_7 @ 0XFCE89A28</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_7_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A28, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A28 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_8 @ 0XFCE89A2C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_8_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A2C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A2C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_9 @ 0XFCE89A30</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_9_ATTR                             0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A30, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A30 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_10 @ 0XFCE89A34</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_10_ATTR                            0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A34, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A34 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_11 @ 0XFCE89A38</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_11_ATTR                            0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A38, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A38 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_12 @ 0XFCE89A3C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_12_ATTR                            0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A3C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A3C 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_13 @ 0XFCE89A40</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_13_ATTR                            0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A40, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A40 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_14 @ 0XFCE89A44</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_14_ATTR                            0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A44, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A44 0x0000001F 0x00000000
		# Register : PFx_SRIOV_BAR5_APERTURE_SIZE_15 @ 0XFCE89A48</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_SRIOV_BAR5_APERTURE_SIZE_15_ATTR                            0x0

		# VF BAR5 Aperture: Specifies the aperture of BAR 5 when it is configured as a 32-bit BAR. The valid encodings are: 000000-0001
		# 1 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 011
		# 0 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 
		#  64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 11000 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE89A48, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89A48 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_ON_0 @ 0XFCE89A4C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_0_ATTR                                           0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A4C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A4C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_1 @ 0XFCE89A50</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_1_ATTR                                           0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A50, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A50 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_2 @ 0XFCE89A54</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_2_ATTR                                           0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A54, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A54 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_3 @ 0XFCE89A58</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_3_ATTR                                           0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A58, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A58 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_4 @ 0XFCE89A5C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_4_ATTR                                           0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A5C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A5C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_5 @ 0XFCE89A60</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_5_ATTR                                           0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A60, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A60 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_6 @ 0XFCE89A64</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_6_ATTR                                           0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A64, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A64 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_7 @ 0XFCE89A68</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_7_ATTR                                           0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A68, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A68 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_8 @ 0XFCE89A6C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_8_ATTR                                           0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A6C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A6C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_9 @ 0XFCE89A70</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_9_ATTR                                           0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A70, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A70 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_10 @ 0XFCE89A74</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_10_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A74, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A74 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_11 @ 0XFCE89A78</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_11_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A78, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A78 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_12 @ 0XFCE89A7C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_12_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A7C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A7C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_13 @ 0XFCE89A80</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_13_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A80, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A80 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_14 @ 0XFCE89A84</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_14_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A84, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A84 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_15 @ 0XFCE89A88</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_15_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A88, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A88 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_16 @ 0XFCE89A8C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_16_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A8C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A8C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_17 @ 0XFCE89A90</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_17_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A90, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A90 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_18 @ 0XFCE89A94</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_18_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A94, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A94 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_19 @ 0XFCE89A98</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_19_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A98, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A98 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_20 @ 0XFCE89A9C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_20_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89A9C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89A9C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_21 @ 0XFCE89AA0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_21_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AA0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AA0 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_22 @ 0XFCE89AA4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_22_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AA4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AA4 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_23 @ 0XFCE89AA8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_23_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AA8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AA8 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_24 @ 0XFCE89AAC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_24_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AAC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AAC 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_25 @ 0XFCE89AB0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_25_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AB0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AB0 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_26 @ 0XFCE89AB4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_26_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AB4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AB4 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_27 @ 0XFCE89AB8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_27_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AB8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AB8 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_28 @ 0XFCE89ABC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_28_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89ABC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89ABC 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_29 @ 0XFCE89AC0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_29_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AC0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AC0 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_30 @ 0XFCE89AC4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_30_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AC4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AC4 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_ON_31 @ 0XFCE89AC8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_ON_31_ATTR                                          0x0

		# ATS Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89AC8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89AC8 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_0 @ 0XFCE89ACC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_0_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89ACC, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89ACC 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_1 @ 0XFCE89AD0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_1_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AD0, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AD0 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_2 @ 0XFCE89AD4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_2_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AD4, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AD4 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_3 @ 0XFCE89AD8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_3_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AD8, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AD8 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_4 @ 0XFCE89ADC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_4_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89ADC, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89ADC 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_5 @ 0XFCE89AE0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_5_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AE0, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AE0 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_6 @ 0XFCE89AE4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_6_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AE4, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AE4 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_7 @ 0XFCE89AE8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_7_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AE8, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AE8 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_8 @ 0XFCE89AEC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_8_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AEC, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AEC 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_9 @ 0XFCE89AF0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_9_ATTR                                      0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AF0, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AF0 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_10 @ 0XFCE89AF4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_10_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AF4, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AF4 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_11 @ 0XFCE89AF8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_11_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AF8, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AF8 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_12 @ 0XFCE89AFC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_12_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89AFC, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89AFC 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_13 @ 0XFCE89B00</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_13_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B00, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B00 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_14 @ 0XFCE89B04</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_14_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B04, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B04 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_15 @ 0XFCE89B08</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_15_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B08, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B08 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_16 @ 0XFCE89B0C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_16_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B0C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B0C 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_17 @ 0XFCE89B10</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_17_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B10, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B10 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_18 @ 0XFCE89B14</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_18_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B14, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B14 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_19 @ 0XFCE89B18</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_19_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B18, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B18 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_20 @ 0XFCE89B1C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_20_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B1C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B1C 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_21 @ 0XFCE89B20</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_21_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B20, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B20 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_22 @ 0XFCE89B24</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_22_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B24, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B24 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_23 @ 0XFCE89B28</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_23_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B28, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B28 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_24 @ 0XFCE89B2C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_24_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B2C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B2C 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_25 @ 0XFCE89B30</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_25_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B30, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B30 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_26 @ 0XFCE89B34</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_26_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B34, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B34 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_27 @ 0XFCE89B38</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_27_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B38, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B38 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_28 @ 0XFCE89B3C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_28_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B3C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B3C 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_29 @ 0XFCE89B40</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_29_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B40, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B40 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_30 @ 0XFCE89B44</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_30_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B44, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B44 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_NEXTPTR_31 @ 0XFCE89B48</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_NEXTPTR_31_ATTR                                     0x0

		# ATS Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89B48, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89B48 0x00000FFF 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_0 @ 0XFCE89B4C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_0_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B4C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B4C 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_1 @ 0XFCE89B50</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_1_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B50, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B50 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_2 @ 0XFCE89B54</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_2_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B54, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B54 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_3 @ 0XFCE89B58</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_3_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B58, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B58 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_4 @ 0XFCE89B5C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_4_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B5C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B5C 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_5 @ 0XFCE89B60</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_5_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B60, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B60 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_6 @ 0XFCE89B64</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_6_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B64, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B64 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_7 @ 0XFCE89B68</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_7_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B68, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B68 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_8 @ 0XFCE89B6C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_8_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B6C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B6C 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_9 @ 0XFCE89B70</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_9_ATTR                              0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B70, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B70 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_10 @ 0XFCE89B74</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_10_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B74, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B74 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_11 @ 0XFCE89B78</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_11_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B78, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B78 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_12 @ 0XFCE89B7C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_12_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B7C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B7C 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_13 @ 0XFCE89B80</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_13_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B80, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B80 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_14 @ 0XFCE89B84</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_14_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B84, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B84 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_15 @ 0XFCE89B88</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_15_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B88, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B88 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_16 @ 0XFCE89B8C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_16_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B8C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B8C 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_17 @ 0XFCE89B90</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_17_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B90, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B90 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_18 @ 0XFCE89B94</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_18_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B94, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B94 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_19 @ 0XFCE89B98</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_19_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B98, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B98 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_20 @ 0XFCE89B9C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_20_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89B9C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89B9C 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_21 @ 0XFCE89BA0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_21_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BA0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BA0 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_22 @ 0XFCE89BA4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_22_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BA4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BA4 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_23 @ 0XFCE89BA8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_23_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BA8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BA8 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_24 @ 0XFCE89BAC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_24_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BAC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BAC 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_25 @ 0XFCE89BB0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_25_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BB0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BB0 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_26 @ 0XFCE89BB4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_26_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BB4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BB4 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_27 @ 0XFCE89BB8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_27_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BB8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BB8 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_28 @ 0XFCE89BBC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_28_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BBC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BBC 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_29 @ 0XFCE89BC0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_29_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BC0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BC0 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_30 @ 0XFCE89BC4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_30_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BC4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BC4 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_INV_QUEUE_DEPTH_31 @ 0XFCE89BC8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_INV_QUEUE_DEPTH_31_ATTR                             0x0

		# ATS Capability Invalidate Queue Depth VFG* attributes are UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89BC8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89BC8 0x0000001F 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_0 @ 0XFCE89C4C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_0_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C4C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C4C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_1 @ 0XFCE89C50</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_1_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C50, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C50 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_2 @ 0XFCE89C54</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_2_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C54, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C54 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_3 @ 0XFCE89C58</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_3_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C58, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C58 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_4 @ 0XFCE89C5C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_4_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C5C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C5C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_5 @ 0XFCE89C60</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_5_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C60, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C60 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_6 @ 0XFCE89C64</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_6_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C64, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C64 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_7 @ 0XFCE89C68</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_7_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C68, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C68 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_8 @ 0XFCE89C6C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_8_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C6C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C6C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_9 @ 0XFCE89C70</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_9_ATTR                                0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C70, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C70 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_10 @ 0XFCE89C74</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_10_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C74, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C74 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_11 @ 0XFCE89C78</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_11_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C78, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C78 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_12 @ 0XFCE89C7C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_12_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C7C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C7C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_13 @ 0XFCE89C80</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_13_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C80, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C80 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_14 @ 0XFCE89C84</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_14_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C84, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C84 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_15 @ 0XFCE89C88</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_15_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C88, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C88 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_16 @ 0XFCE89C8C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_16_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C8C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C8C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_17 @ 0XFCE89C90</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_17_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C90, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C90 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_18 @ 0XFCE89C94</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_18_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C94, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C94 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_19 @ 0XFCE89C98</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_19_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C98, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C98 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_20 @ 0XFCE89C9C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_20_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89C9C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89C9C 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_21 @ 0XFCE89CA0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_21_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CA0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CA0 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_22 @ 0XFCE89CA4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_22_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CA4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CA4 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_23 @ 0XFCE89CA8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_23_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CA8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CA8 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_24 @ 0XFCE89CAC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_24_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CAC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CAC 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_25 @ 0XFCE89CB0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_25_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CB0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CB0 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_26 @ 0XFCE89CB4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_26_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CB4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CB4 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_27 @ 0XFCE89CB8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_27_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CB8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CB8 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_28 @ 0XFCE89CBC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_28_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CBC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CBC 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_29 @ 0XFCE89CC0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_29_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CC0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CC0 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_30 @ 0XFCE89CC4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_30_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CC4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CC4 0x00000001 0x00000000
		# Register : zFx_ATS_CAP_MEM_ATTR_SUPP_31 @ 0XFCE89CC8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ATS_CAP_MEM_ATTR_SUPP_31_ATTR                               0x0

		# ATS Memory Attributes Supported: ATS Memory Attributes Supported ECN
		#(OFFSET, MASK, VALUE)      (0XFCE89CC8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CC8 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_0 @ 0XFCE89CCC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_0_ATTR                                           0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CCC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CCC 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_1 @ 0XFCE89CD0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_1_ATTR                                           0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CD0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CD0 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_2 @ 0XFCE89CD4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_2_ATTR                                           0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CD4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CD4 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_3 @ 0XFCE89CD8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_3_ATTR                                           0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CD8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CD8 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_4 @ 0XFCE89CDC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_4_ATTR                                           0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CDC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CDC 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_5 @ 0XFCE89CE0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_5_ATTR                                           0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CE0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CE0 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_6 @ 0XFCE89CE4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_6_ATTR                                           0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CE4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CE4 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_7 @ 0XFCE89CE8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_7_ATTR                                           0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CE8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CE8 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_8 @ 0XFCE89CEC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_8_ATTR                                           0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CEC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CEC 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_9 @ 0XFCE89CF0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_9_ATTR                                           0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CF0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CF0 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_10 @ 0XFCE89CF4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_10_ATTR                                          0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CF4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CF4 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_11 @ 0XFCE89CF8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_11_ATTR                                          0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CF8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CF8 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_12 @ 0XFCE89CFC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_12_ATTR                                          0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89CFC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89CFC 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_13 @ 0XFCE89D00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_13_ATTR                                          0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89D00, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D00 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_14 @ 0XFCE89D04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_14_ATTR                                          0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89D04, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D04 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_ON_15 @ 0XFCE89D08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_ON_15_ATTR                                          0x0

		# PRI Capability Enable
		#(OFFSET, MASK, VALUE)      (0XFCE89D08, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D08 0x00000001 0x00000000
		# Register : PFx_PRI_CAP_NEXTPTR_0 @ 0XFCE89D0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_0_ATTR                                      928

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_0_ATTR                                      928

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D0C, 0x00000FFFU ,0x000003A0U)  */
    mask_write 0XFCE89D0C 0x00000FFF 0x000003A0
		# Register : PFx_PRI_CAP_NEXTPTR_1 @ 0XFCE89D10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_1_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_1_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D10, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D10 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_2 @ 0XFCE89D14</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_2_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_2_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D14, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D14 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_3 @ 0XFCE89D18</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_3_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_3_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D18, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D18 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_4 @ 0XFCE89D1C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_4_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_4_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D1C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D1C 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_5 @ 0XFCE89D20</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_5_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_5_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D20, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D20 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_6 @ 0XFCE89D24</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_6_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_6_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D24, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D24 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_7 @ 0XFCE89D28</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_7_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_7_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D28, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D28 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_8 @ 0XFCE89D2C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_8_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_8_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D2C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D2C 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_9 @ 0XFCE89D30</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_9_ATTR                                      1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_9_ATTR                                      1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D30, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D30 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_10 @ 0XFCE89D34</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_10_ATTR                                     1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_10_ATTR                                     1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D34, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D34 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_11 @ 0XFCE89D38</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_11_ATTR                                     1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_11_ATTR                                     1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D38, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D38 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_12 @ 0XFCE89D3C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_12_ATTR                                     1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_12_ATTR                                     1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D3C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D3C 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_13 @ 0XFCE89D40</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_13_ATTR                                     1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_13_ATTR                                     1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D40, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D40 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_14 @ 0XFCE89D44</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_14_ATTR                                     1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_14_ATTR                                     1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D44, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D44 0x00000FFF 0x00000450
		# Register : PFx_PRI_CAP_NEXTPTR_15 @ 0XFCE89D48</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_15_ATTR                                     1104

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_CAP_NEXTPTR_15_ATTR                                     1104

		# PRI Capability Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89D48, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89D48 0x00000FFF 0x00000450
		# Register : PFx_PRI_OST_PR_CAPACITY_0 @ 0XFCE89D4C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_0_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D4C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D4C 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_1 @ 0XFCE89D50</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_1_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D50, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D50 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_2 @ 0XFCE89D54</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_2_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D54, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D54 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_3 @ 0XFCE89D58</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_3_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D58, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D58 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_4 @ 0XFCE89D5C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_4_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D5C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D5C 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_5 @ 0XFCE89D60</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_5_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D60, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D60 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_6 @ 0XFCE89D64</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_6_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D64, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D64 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_7 @ 0XFCE89D68</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_7_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D68, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D68 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_8 @ 0XFCE89D6C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_8_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D6C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D6C 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_9 @ 0XFCE89D70</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_9_ATTR                                  0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D70, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D70 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_10 @ 0XFCE89D74</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_10_ATTR                                 0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D74, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D74 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_11 @ 0XFCE89D78</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_11_ATTR                                 0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D78, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D78 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_12 @ 0XFCE89D7C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_12_ATTR                                 0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D7C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D7C 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_13 @ 0XFCE89D80</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_13_ATTR                                 0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D80, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D80 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_14 @ 0XFCE89D84</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_14_ATTR                                 0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D84, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D84 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_OST_PR_CAPACITY_15 @ 0XFCE89D88</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_OST_PR_CAPACITY_15_ATTR                                 0x0

		# PRI Outstanding Page Request Capacity
		#(OFFSET, MASK, VALUE)      (0XFCE89D88, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE89D88 0xFFFFFFFF 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_0 @ 0XFCE89D8C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_0_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89D8C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D8C 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_1 @ 0XFCE89D90</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_1_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89D90, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D90 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_2 @ 0XFCE89D94</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_2_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89D94, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D94 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_3 @ 0XFCE89D98</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_3_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89D98, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D98 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_4 @ 0XFCE89D9C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_4_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89D9C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89D9C 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_5 @ 0XFCE89DA0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_5_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DA0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DA0 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_6 @ 0XFCE89DA4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_6_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DA4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DA4 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_7 @ 0XFCE89DA8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_7_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DA8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DA8 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_8 @ 0XFCE89DAC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_8_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DAC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DAC 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_9 @ 0XFCE89DB0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_9_ATTR                       0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DB0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DB0 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_10 @ 0XFCE89DB4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_10_ATTR                      0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DB4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DB4 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_11 @ 0XFCE89DB8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_11_ATTR                      0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DB8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DB8 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_12 @ 0XFCE89DBC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_12_ATTR                      0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DBC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DBC 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_13 @ 0XFCE89DC0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_13_ATTR                      0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DC0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DC0 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_14 @ 0XFCE89DC4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_14_ATTR                      0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DC4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DC4 0x00000001 0x00000000
		# Register : PFx_PRI_STATUS_PRG_RESP_PASID_REQD_15 @ 0XFCE89DC8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PRI_STATUS_PRG_RESP_PASID_REQD_15_ATTR                      0x0

		# PRI PRG RESP PASID REQD Status
		#(OFFSET, MASK, VALUE)      (0XFCE89DC8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DC8 0x00000001 0x00000000
		# Register : CCIX_ENABLE @ 0XFCE89DCC</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_ENABLE_ATTR                                                0x0

		# CCIX Enable : Enables CCIX Features (across the board)
		#(OFFSET, MASK, VALUE)      (0XFCE89DCC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DCC 0x00000001 0x00000000
		# Register : CCIX_SPEC_1_1 @ 0XFCE89DD0</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_SPEC_1_1_ATTR                                              0x0

		# CCIX 1.1 Spec: Enables CCIX 1.1 Specification features.
		#(OFFSET, MASK, VALUE)      (0XFCE89DD0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DD0 0x00000001 0x00000000
		# Register : CCIX_OPT_TLP_GEN_AND_RECEPT_EN_CONTROL_INTERNAL @ 0XFCE89DD4</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_OPT_TLP_GEN_AND_RECEPT_EN_CONTROL_INTERNAL_ATTR            0x0

		# CCIX Optimized TLP Generation and Reception Enable Control Internal : When TRUE, control with Transport DVSEC, Transaction Co
		# trol Register, Enable Optimized TLP Generation and Reception bit, when FALSE, control with fabric input.
		#(OFFSET, MASK, VALUE)      (0XFCE89DD4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DD4 0x00000001 0x00000000
		# Register : CCIX_VENDOR_ID @ 0XFCE89DD8</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_VENDOR_ID_ATTR                                             0x1E2C

		# CCIX Vendor ID
		#(OFFSET, MASK, VALUE)      (0XFCE89DD8, 0x0000FFFFU ,0x00001E2CU)  */
    mask_write 0XFCE89DD8 0x0000FFFF 0x00001E2C
		# Register : CCIX_TRANSPORT_PF0_DVSEC_ENABLE @ 0XFCE89DDC</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_TRANSPORT_PF0_DVSEC_ENABLE_ATTR                            0x0

		# CCIX Transport DVSEC Enable : In PCIe Block A, when TRUE enables Transport DVSEC in PF0. When FALSE disables Transport DVSEC 
		# n PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE89DDC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DDC 0x00000001 0x00000000
		# Register : CCIX_PROTOCOL_PF0_DVSEC_ENABLE @ 0XFCE89DE0</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_PROTOCOL_PF0_DVSEC_ENABLE_ATTR                             0

		# CCIX Protocol DVSEC in PF0 Enable : In PCIe Block A, when TRUE enables Protocol DVSEC in PF0. When FALSE disables Protocol DV
		# EC in PF1.
		#(OFFSET, MASK, VALUE)      (0XFCE89DE0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DE0 0x00000001 0x00000000
		# Register : CCIX_PROTOCOL_PF1_DVSEC_ENABLE @ 0XFCE89DE4</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_PROTOCOL_PF1_DVSEC_ENABLE_ATTR                             0x0

		# CCIX Protocol DVSEC in PF1 Enable : In PCIe Block A, when TRUE enables Protocol DVSEC in PF1. When FALSE disables Protocol DV
		# EC in PF1.
		#(OFFSET, MASK, VALUE)      (0XFCE89DE4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DE4 0x00000001 0x00000000
		# Register : CCIX_CFG_MGMT_MUX_ENABLE @ 0XFCE89DE8</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_CFG_MGMT_MUX_ENABLE_ATTR                                   0x0

		# CCIX Cfg Management Mux Enable : In PCIe Block A, when TRUE enables Cfg Management Mux. When FALSE disables Cfg Management Mu
		#  (bypass mode).
		#(OFFSET, MASK, VALUE)      (0XFCE89DE8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DE8 0x00000001 0x00000000
		# Register : CCIX_TX_CREDIT_CHECK_DISABLE @ 0XFCE89DEC</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_TX_CREDIT_CHECK_DISABLE_ATTR                               0x0

		# CCIX TL Tx Credit Check Disable : When set to FALSE, CXS state machine in De-Active state will wait for all the credits to be
		# returned to the DUT before going to STOP state. When set to TRUE, CXS state machine in De-Active state will wait for a set ti
		# e of ANDlt;30ANDgt; CXS interface clk cycles (ignoring the credit return) before moving to STOP state.
		#(OFFSET, MASK, VALUE)      (0XFCE89DEC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DEC 0x00000001 0x00000000
		# Register : CCIX_PER_MESSAGE_CAP_ENABLE @ 0XFCE89DF0</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_PER_MESSAGE_CAP_ENABLE_ATTR                                0x0

		# CCIX PER Message Capability Structure Enable : When set to TRUE, enables the PER Message Capability at 0x3f0 byte address in 
		# F0. When FALSE disables PER Message Capability in PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE89DF0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DF0 0x00000001 0x00000000
		# Register : CCIX_DELAYED_CFG_CPL @ 0XFCE89DF4</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_DELAYED_CFG_CPL_ATTR                                       0x1

		# CCIX Delayed Config Completion Enable : When set to TRUE, enables the stall mechinism for internally-generated Config Complet
		# on responses. When FALSE, Config Completions are scheduled for transmission without using the stall mechanism.
		#(OFFSET, MASK, VALUE)      (0XFCE89DF4, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89DF4 0x00000001 0x00000001
		# Register : CCIX_PDVSEC_RAM_RW @ 0XFCE89DF8</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_PDVSEC_RAM_RW_ATTR                                         0x0

		# CCIX PER Message Capability Structure Enable : When set to TRUE, read-only regions in the PDVSEC RAM are writeable from the P
		# I Express link.
		#(OFFSET, MASK, VALUE)      (0XFCE89DF8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89DF8 0x00000001 0x00000000
		# Register : PF0_CCIX_TDVSEC_CAP_NEXTPTR @ 0XFCE89DFC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_TDVSEC_CAP_NEXTPTR_ATTR                                0

		# PF0 CCIX Transport DVSEC Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89DFC, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89DFC 0x00000FFF 0x00000000
		# Register : PF0_CCIX_TDVSEC_CAP_VENDOR_ID @ 0XFCE89E00</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_TDVSEC_CAP_VENDOR_ID_ATTR                              0x1E2C

		# PF0 CCIX Transport DVSEC Vendor ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E00, 0x0000FFFFU ,0x00001E2CU)  */
    mask_write 0XFCE89E00 0x0000FFFF 0x00001E2C
		# Register : PF0_CCIX_TDVSEC_CAP_REVISION @ 0XFCE89E04</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_TDVSEC_CAP_REVISION_ATTR                               0x1

		# PF0 CCIX Transport DVSEC Revision ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E04, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89E04 0x0000000F 0x00000001
		# Register : PF0_CCIX_TDVSEC_CAP_LENGTH @ 0XFCE89E08</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_TDVSEC_CAP_LENGTH_ATTR                                 0x44

		# PF0 CCIX Transport DVSEC Length
		#(OFFSET, MASK, VALUE)      (0XFCE89E08, 0x00000FFFU ,0x00000044U)  */
    mask_write 0XFCE89E08 0x00000FFF 0x00000044
		# Register : PF0_CCIX_TDVSEC_CAP_ID @ 0XFCE89E0C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_TDVSEC_CAP_ID_ATTR                                     0x1

		# PF0 CCIX Transport DVSEC Capability ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E0C, 0x0000FFFFU ,0x00000001U)  */
    mask_write 0XFCE89E0C 0x0000FFFF 0x00000001
		# Register : PF0_CCIX_TDVSEC_CCIX_VC_BYTE_OFFSET @ 0XFCE89E10</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_TDVSEC_CCIX_VC_BYTE_OFFSET_ATTR                        0x1

		# PF0 CCIX Transport DVSEC VC Resource Byte Offset.
		#(OFFSET, MASK, VALUE)      (0XFCE89E10, 0x0000007FU ,0x00000001U)  */
    mask_write 0XFCE89E10 0x0000007F 0x00000001
		# Register : CCIX_DIRECT_ATTACH_MODE @ 0XFCE89E14</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_DIRECT_ATTACH_MODE_ATTR                                    0x0

		# CCIX Direct Attach Mode : When TRUE, the Optimized TLP Format Support bit in Transaction Layer Capabilities Register in CCIX 
		# ransport DVSEC is 1b, else 0b. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89E14, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E14 0x00000001 0x00000000
		# Register : PF0_CCIX_ESM_QUICK_EQ_TIMEOUT @ 0XFCE89E18</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_ESM_QUICK_EQ_TIMEOUT_ATTR                              0x0

		# PF0 CCIX Transport DVSEC Quick EQ Timeout
		#(OFFSET, MASK, VALUE)      (0XFCE89E18, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE89E18 0x00000007 0x00000000
		# Register : PF0_CCIX_PDVSEC_CAP_NEXTPTR @ 0XFCE89E1C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_CAP_NEXTPTR_ATTR                                0

		# PF0 CCIX Protocol DVSEC Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89E1C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89E1C 0x00000FFF 0x00000000
		# Register : PF0_CCIX_PDVSEC_CAP_VENDOR_ID @ 0XFCE89E20</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_CAP_VENDOR_ID_ATTR                              0x1E2C

		# PF0 CCIX Protocol DVSEC Vendor ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E20, 0x0000FFFFU ,0x00001E2CU)  */
    mask_write 0XFCE89E20 0x0000FFFF 0x00001E2C
		# Register : PF0_CCIX_PDVSEC_CAP_REVISION @ 0XFCE89E24</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_CAP_REVISION_ATTR                               0x0

		# PF0 CCIX Protocol DVSEC Revision ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E24, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE89E24 0x0000000F 0x00000000
		# Register : PF0_CCIX_PDVSEC_CAP_LENGTH @ 0XFCE89E28</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_CAP_LENGTH_ATTR                                 0x75C

		# PF0 CCIX Protocol DVSEC Length
		#(OFFSET, MASK, VALUE)      (0XFCE89E28, 0x00000FFFU ,0x0000075CU)  */
    mask_write 0XFCE89E28 0x00000FFF 0x0000075C
		# Register : PF0_CCIX_PDVSEC_CAP_ID @ 0XFCE89E2C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_CAP_ID_ATTR                                     0x2

		# PF0 CCIX Protocol DVSEC Capability ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E2C, 0x0000FFFFU ,0x00000002U)  */
    mask_write 0XFCE89E2C 0x0000FFFF 0x00000002
		# Register : PF0_CCIX_PDVSEC_PCSR_START_ADDR @ 0XFCE89E30</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_PCSR_START_ADDR_ATTR                            0x680

		# PF0 CCIX Protocol DVSEC CSR Region Start Address
		#(OFFSET, MASK, VALUE)      (0XFCE89E30, 0x00000FFFU ,0x00000680U)  */
    mask_write 0XFCE89E30 0x00000FFF 0x00000680
		# Register : PF0_CCIX_PDVSEC_PCSR_SIZE @ 0XFCE89E34</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_PCSR_SIZE_ATTR                                  0x17C

		# PF0 CCIX Protocol DVSEC CSR Region Size
		#(OFFSET, MASK, VALUE)      (0XFCE89E34, 0x00000FFFU ,0x0000017CU)  */
    mask_write 0XFCE89E34 0x00000FFF 0x0000017C
		# Register : PF0_CCIX_PDVSEC_PCR_START_ADDR @ 0XFCE89E38</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_PCR_START_ADDR_ATTR                             0x800

		# PF0 CCIX Protocol DVSEC CR Region Start Address
		#(OFFSET, MASK, VALUE)      (0XFCE89E38, 0x00000FFFU ,0x00000800U)  */
    mask_write 0XFCE89E38 0x00000FFF 0x00000800
		# Register : PF0_CCIX_PDVSEC_PCR_SIZE @ 0XFCE89E3C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_CCIX_PDVSEC_PCR_SIZE_ATTR                                   0x5B0

		# PF0 CCIX Protocol DVSEC CR Region Size
		#(OFFSET, MASK, VALUE)      (0XFCE89E3C, 0x00000FFFU ,0x000005B0U)  */
    mask_write 0XFCE89E3C 0x00000FFF 0x000005B0
		# Register : PF1_CCIX_PDVSEC_CAP_NEXTPTR @ 0XFCE89E40</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_CAP_NEXTPTR_ATTR                                0x0

		# PF1 CCIX Protocol DVSEC Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89E40, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89E40 0x00000FFF 0x00000000
		# Register : PF1_CCIX_PDVSEC_CAP_VENDOR_ID @ 0XFCE89E44</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_CAP_VENDOR_ID_ATTR                              0x1E2C

		# PF1 CCIX Protocol DVSEC Vendor ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E44, 0x0000FFFFU ,0x00001E2CU)  */
    mask_write 0XFCE89E44 0x0000FFFF 0x00001E2C
		# Register : PF1_CCIX_PDVSEC_CAP_REVISION @ 0XFCE89E48</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_CAP_REVISION_ATTR                               0x0

		# PF1 CCIX Protocol DVSEC Revision ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E48, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE89E48 0x0000000F 0x00000000
		# Register : PF1_CCIX_PDVSEC_CAP_LENGTH @ 0XFCE89E4C</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_CAP_LENGTH_ATTR                                 0x75C

		# PF1 CCIX Protocol DVSEC Length
		#(OFFSET, MASK, VALUE)      (0XFCE89E4C, 0x00000FFFU ,0x0000075CU)  */
    mask_write 0XFCE89E4C 0x00000FFF 0x0000075C
		# Register : PF1_CCIX_PDVSEC_CAP_ID @ 0XFCE89E50</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_CAP_ID_ATTR                                     0x2

		# PF1 CCIX Protocol DVSEC Capability ID
		#(OFFSET, MASK, VALUE)      (0XFCE89E50, 0x0000FFFFU ,0x00000002U)  */
    mask_write 0XFCE89E50 0x0000FFFF 0x00000002
		# Register : PF1_CCIX_PDVSEC_PCSR_START_ADDR @ 0XFCE89E54</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_PCSR_START_ADDR_ATTR                            0x800

		# PF1 CCIX Protocol DVSEC CSR Region Start Address
		#(OFFSET, MASK, VALUE)      (0XFCE89E54, 0x00000FFFU ,0x00000800U)  */
    mask_write 0XFCE89E54 0x00000FFF 0x00000800
		# Register : PF1_CCIX_PDVSEC_PCSR_SIZE @ 0XFCE89E58</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_PCSR_SIZE_ATTR                                  0x100

		# PF1 CCIX Protocol DVSEC CSR Region Size
		#(OFFSET, MASK, VALUE)      (0XFCE89E58, 0x00000FFFU ,0x00000100U)  */
    mask_write 0XFCE89E58 0x00000FFF 0x00000100
		# Register : PF1_CCIX_PDVSEC_PCR_START_ADDR @ 0XFCE89E5C</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_PCR_START_ADDR_ATTR                             0x680

		# PF1 CCIX Protocol DVSEC CR Region Start Address
		#(OFFSET, MASK, VALUE)      (0XFCE89E5C, 0x00000FFFU ,0x00000680U)  */
    mask_write 0XFCE89E5C 0x00000FFF 0x00000680
		# Register : PF1_CCIX_PDVSEC_PCR_SIZE @ 0XFCE89E60</p>

		# 
		# CPM5_PCIE1_ATTR_PF1_CCIX_PDVSEC_PCR_SIZE_ATTR                                   0x160

		# PF1 CCIX Protocol DVSEC CR Region Size
		#(OFFSET, MASK, VALUE)      (0XFCE89E60, 0x00000FFFU ,0x00000160U)  */
    mask_write 0XFCE89E60 0x00000FFF 0x00000160
		# Register : CCIX_PDVSEC_CPL_TIMEOUT @ 0XFCE89E64</p>

		# 
		# CPM5_PCIE1_ATTR_CCIX_PDVSEC_CPL_TIMEOUT_ATTR                                    0x100

		# CCIX Protocol DVSEC Completion Timeout FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE89E64, 0x0001FFFFU ,0x00000100U)  */
    mask_write 0XFCE89E64 0x0001FFFF 0x00000100
		# Register : PF0_DEV_CAP2_10B_TAG_REQUESTER_SUPPORTED @ 0XFCE89E68</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_10B_TAG_REQUESTER_SUPPORTED_ATTR                   1

		# 10-Bit Tag Requester Supported : When TRUE all Functions supports 10-Bit Tag Requester capability; otherwise, the Functions d
		#  not. Can be TRUE only if PF0_DEV_CAP2_10B_TAG_COMPLETER_SUPPORTED must be TRUE.
		#(OFFSET, MASK, VALUE)      (0XFCE89E68, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89E68 0x00000001 0x00000001
		# Register : PF0_DEV_CAP2_10B_TAG_COMPLETER_SUPPORTED @ 0XFCE89E6C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DEV_CAP2_10B_TAG_COMPLETER_SUPPORTED_ATTR                   1

		# 10-Bit Tag Completer Supported : When TRUE all Functions supports 10-Bit Tag Completer capability; otherwise, the Functions d
		#  not.
		#(OFFSET, MASK, VALUE)      (0XFCE89E6C, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89E6C 0x00000001 0x00000001
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_0 @ 0XFCE89E70</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_0_ATTR                         0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E70, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E70 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_1 @ 0XFCE89E74</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_1_ATTR                         0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E74, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E74 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_2 @ 0XFCE89E78</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_2_ATTR                         0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E78, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E78 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_3 @ 0XFCE89E7C</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_3_ATTR                         0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E7C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E7C 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_4 @ 0XFCE89E80</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_4_ATTR                         0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E80, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E80 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_5 @ 0XFCE89E84</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_5_ATTR                         0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E84, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E84 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_6 @ 0XFCE89E88</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_6_ATTR                         0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E88, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E88 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_7 @ 0XFCE89E8C</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_7_ATTR                         0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E8C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E8C 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_8 @ 0XFCE89E90</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_8_ATTR                         0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E90, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E90 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_9 @ 0XFCE89E94</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_9_ATTR                         0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E94, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E94 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_10 @ 0XFCE89E98</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_10_ATTR                        0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E98, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E98 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_11 @ 0XFCE89E9C</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_11_ATTR                        0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89E9C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89E9C 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_12 @ 0XFCE89EA0</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_12_ATTR                        0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89EA0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89EA0 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_13 @ 0XFCE89EA4</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_13_ATTR                        0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89EA4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89EA4 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_14 @ 0XFCE89EA8</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_14_ATTR                        0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89EA8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89EA8 0x00000001 0x00000000
		# Register : VFGx_10B_TAG_REQUESTER_SUPPORTED_15 @ 0XFCE89EAC</p>

		# 
		# CPM5_PCIE1_ATTR_VFGX_10B_TAG_REQUESTER_SUPPORTED_15_ATTR                        0x0

		# VF 10-Bit Tag Completer Supported : When TRUE all VFs associated with the PF must support 10-Bit Tag Requester capability. If
		# Clear, VFs associated with PF must not support 10-Bit Tag Requester capability (in SRIOV Cap).
		#(OFFSET, MASK, VALUE)      (0XFCE89EAC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89EAC 0x00000001 0x00000000
		# Register : PF0_PL16_CAP_ON @ 0XFCE89EB0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL16_CAP_ON_ATTR                                            1

		# Physical Layer 16.0 GT/s Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE89EB0, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89EB0 0x00000001 0x00000001
		# Register : PF0_PL16_CAP_NEXTPTR @ 0XFCE89EB4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL16_CAP_NEXTPTR_ATTR                                       1024

		# Physical Layer 16.0 GT/s Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89EB4, 0x00000FFFU ,0x00000400U)  */
    mask_write 0XFCE89EB4 0x00000FFF 0x00000400
		# Register : PF0_PL16_CAP_VER @ 0XFCE89EB8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL16_CAP_VER_ATTR                                           1

		# Physical Layer 16.0 GT/s Cap Version
		#(OFFSET, MASK, VALUE)      (0XFCE89EB8, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89EB8 0x0000000F 0x00000001
		# Register : PF0_PL16_CAP_ID @ 0XFCE89EBC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL16_CAP_ID_ATTR                                            38

		# Physical Layer 16.0 GT/s Cap ID
		#(OFFSET, MASK, VALUE)      (0XFCE89EBC, 0x0000FFFFU ,0x00000026U)  */
    mask_write 0XFCE89EBC 0x0000FFFF 0x00000026
		# Register : PF0_PL32_CAP_ON @ 0XFCE89EC0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL32_CAP_ON_ATTR                                            1

		# Physical Layer 32.0 GT/s Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE89EC0, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89EC0 0x00000001 0x00000001
		# Register : PF0_PL32_CAP_NEXTPTR @ 0XFCE89EC4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL32_CAP_NEXTPTR_ATTR                                       1520

		# Physical Layer 32.0 GT/s Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89EC4, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE89EC4 0x00000FFF 0x000005F0
		# Register : PF0_PL32_CAP_VER @ 0XFCE89EC8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL32_CAP_VER_ATTR                                           0x1

		# Physical Layer 32.0 GT/s Cap Version
		#(OFFSET, MASK, VALUE)      (0XFCE89EC8, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89EC8 0x0000000F 0x00000001
		# Register : PF0_PL32_CAP_ID @ 0XFCE89ECC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PL32_CAP_ID_ATTR                                            0x2A

		# Physical Layer 32.0 GT/s Cap ID
		#(OFFSET, MASK, VALUE)      (0XFCE89ECC, 0x0000FFFFU ,0x0000002AU)  */
    mask_write 0XFCE89ECC 0x0000FFFF 0x0000002A
		# Register : PF0_MARGINING_CAP_ON @ 0XFCE89ED0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_MARGINING_CAP_ON_ATTR                                       1

		# Margining Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE89ED0, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89ED0 0x00000001 0x00000001
		# Register : PF0_MARGINING_CAP_NEXTPTR @ 0XFCE89ED4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_MARGINING_CAP_NEXTPTR_ATTR                                  1104

		# Margining Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89ED4, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89ED4 0x00000FFF 0x00000450
		# Register : PF0_MARGINING_CAP_VER @ 0XFCE89ED8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_MARGINING_CAP_VER_ATTR                                      1

		# Margining Cap Version
		#(OFFSET, MASK, VALUE)      (0XFCE89ED8, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89ED8 0x0000000F 0x00000001
		# Register : PF0_MARGINING_CAP_ID @ 0XFCE89EDC</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_MARGINING_CAP_ID_ATTR                                       39

		# Margining Cap ID
		#(OFFSET, MASK, VALUE)      (0XFCE89EDC, 0x0000FFFFU ,0x00000027U)  */
    mask_write 0XFCE89EDC 0x0000FFFF 0x00000027
		# Register : PF0_MARGINING_USES_DRVR_SW @ 0XFCE89EE0</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_MARGINING_USES_DRVR_SW_ATTR                                 0x0

		# Margining Uses Driver Software
		#(OFFSET, MASK, VALUE)      (0XFCE89EE0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89EE0 0x00000001 0x00000000
		# Register : PF0_MARGINING_MARGINBLK_DISABLE @ 0XFCE89EE4</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_MARGINING_MARGINBLK_DISABLE_ATTR                            0x1

		# Margining Marginblk Disable: Disables 4.0 Spec Lane Margin Marginblk Semaphore
		#(OFFSET, MASK, VALUE)      (0XFCE89EE4, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89EE4 0x00000001 0x00000001
		# Register : PF0_DLL_FEATURE_CAP_ON @ 0XFCE89EE8</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DLL_FEATURE_CAP_ON_ATTR                                     1

		# DLL Feature Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE89EE8, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89EE8 0x00000001 0x00000001
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_0 @ 0XFCE89EEC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_0_ATTR                              944

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89EEC, 0x00000FFFU ,0x000003B0U)  */
    mask_write 0XFCE89EEC 0x00000FFF 0x000003B0
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_1 @ 0XFCE89EF0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_1_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89EF0, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89EF0 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_2 @ 0XFCE89EF4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_2_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89EF4, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89EF4 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_3 @ 0XFCE89EF8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_3_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89EF8, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89EF8 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_4 @ 0XFCE89EFC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_4_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89EFC, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89EFC 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_5 @ 0XFCE89F00</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_5_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F00, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F00 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_6 @ 0XFCE89F04</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_6_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F04, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F04 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_7 @ 0XFCE89F08</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_7_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F08, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F08 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_8 @ 0XFCE89F0C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_8_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F0C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F0C 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_9 @ 0XFCE89F10</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_9_ATTR                              1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F10, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F10 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_10 @ 0XFCE89F14</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_10_ATTR                             1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F14, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F14 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_11 @ 0XFCE89F18</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_11_ATTR                             1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F18, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F18 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_12 @ 0XFCE89F1C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_12_ATTR                             1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F1C, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F1C 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_13 @ 0XFCE89F20</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_13_ATTR                             1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F20, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F20 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_14 @ 0XFCE89F24</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_14_ATTR                             1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F24, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F24 0x00000FFF 0x00000450
		# Register : PFx_DLL_FEATURE_CAP_NEXTPTR_15 @ 0XFCE89F28</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_DLL_FEATURE_CAP_NEXTPTR_15_ATTR                             1104

		# DLL Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F28, 0x00000FFFU ,0x00000450U)  */
    mask_write 0XFCE89F28 0x00000FFF 0x00000450
		# Register : PF0_DLL_FEATURE_CAP_VER @ 0XFCE89F2C</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DLL_FEATURE_CAP_VER_ATTR                                    1

		# DLL Feature Cap Version
		#(OFFSET, MASK, VALUE)      (0XFCE89F2C, 0x0000000FU ,0x00000001U)  */
    mask_write 0XFCE89F2C 0x0000000F 0x00000001
		# Register : PF0_DLL_FEATURE_CAP_ID @ 0XFCE89F30</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_DLL_FEATURE_CAP_ID_ATTR                                     37

		# DLL Feature Cap ID
		#(OFFSET, MASK, VALUE)      (0XFCE89F30, 0x0000FFFFU ,0x00000025U)  */
    mask_write 0XFCE89F30 0x0000FFFF 0x00000025
		# Register : PF0_PASID_CAP_ON @ 0XFCE89F34</p>

		# 
		# CPM5_PCIE1_ATTR_PF0_PASID_CAP_ON_ATTR                                           1

		# PASID Feature Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE89F34, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE89F34 0x00000001 0x00000001
		# Register : PFx_PASID_CAP_NEXTPTR_0 @ 0XFCE89F38</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_0_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F38, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F38 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_1 @ 0XFCE89F3C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_1_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F3C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F3C 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_2 @ 0XFCE89F40</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_2_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F40, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F40 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_3 @ 0XFCE89F44</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_3_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F44, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F44 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_4 @ 0XFCE89F48</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_4_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F48, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F48 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_5 @ 0XFCE89F4C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_5_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F4C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F4C 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_6 @ 0XFCE89F50</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_6_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F50, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F50 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_7 @ 0XFCE89F54</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_7_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F54, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F54 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_8 @ 0XFCE89F58</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_8_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F58, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F58 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_9 @ 0XFCE89F5C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_9_ATTR                                    0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F5C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F5C 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_10 @ 0XFCE89F60</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_10_ATTR                                   0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F60, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F60 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_11 @ 0XFCE89F64</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_11_ATTR                                   0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F64, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F64 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_12 @ 0XFCE89F68</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_12_ATTR                                   0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F68, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F68 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_13 @ 0XFCE89F6C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_13_ATTR                                   0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F6C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F6C 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_14 @ 0XFCE89F70</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_14_ATTR                                   0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F70, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F70 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_NEXTPTR_15 @ 0XFCE89F74</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_NEXTPTR_15_ATTR                                   0

		# PASID Feature Cap Next Pointer
		#(OFFSET, MASK, VALUE)      (0XFCE89F74, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE89F74 0x00000FFF 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_0 @ 0XFCE89F78</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_0_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F78, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F78 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_1 @ 0XFCE89F7C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_1_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F7C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F7C 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_2 @ 0XFCE89F80</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_2_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F80, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F80 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_3 @ 0XFCE89F84</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_3_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F84, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F84 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_4 @ 0XFCE89F88</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_4_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F88, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F88 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_5 @ 0XFCE89F8C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_5_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F8C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F8C 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_6 @ 0XFCE89F90</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_6_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F90, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F90 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_7 @ 0XFCE89F94</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_7_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F94, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F94 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_8 @ 0XFCE89F98</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_8_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F98, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F98 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_9 @ 0XFCE89F9C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_9_ATTR                             0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89F9C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89F9C 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_10 @ 0XFCE89FA0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_10_ATTR                            0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FA0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FA0 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_11 @ 0XFCE89FA4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_11_ATTR                            0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FA4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FA4 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_12 @ 0XFCE89FA8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_12_ATTR                            0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FA8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FA8 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_13 @ 0XFCE89FAC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_13_ATTR                            0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FAC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FAC 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_14 @ 0XFCE89FB0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_14_ATTR                            0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FB0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FB0 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_EXEC_PERM_SUPP_15 @ 0XFCE89FB4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_EXEC_PERM_SUPP_15_ATTR                            0x0

		# PASID support for sending TLPs with Execute Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FB4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FB4 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_0 @ 0XFCE89FB8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_0_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FB8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FB8 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_1 @ 0XFCE89FBC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_1_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FBC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FBC 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_2 @ 0XFCE89FC0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_2_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FC0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FC0 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_3 @ 0XFCE89FC4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_3_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FC4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FC4 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_4 @ 0XFCE89FC8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_4_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FC8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FC8 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_5 @ 0XFCE89FCC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_5_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FCC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FCC 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_6 @ 0XFCE89FD0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_6_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FD0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FD0 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_7 @ 0XFCE89FD4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_7_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FD4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FD4 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_8 @ 0XFCE89FD8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_8_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FD8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FD8 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_9 @ 0XFCE89FDC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_9_ATTR                           0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FDC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FDC 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_10 @ 0XFCE89FE0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_10_ATTR                          0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FE0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FE0 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_11 @ 0XFCE89FE4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_11_ATTR                          0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FE4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FE4 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_12 @ 0XFCE89FE8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_12_ATTR                          0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FE8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FE8 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_13 @ 0XFCE89FEC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_13_ATTR                          0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FEC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FEC 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_14 @ 0XFCE89FF0</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_14_ATTR                          0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FF0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FF0 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_PRIVIL_MODE_SUPP_15 @ 0XFCE89FF4</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_PRIVIL_MODE_SUPP_15_ATTR                          0x0

		# PASID support for sending TLPs with Priviledge Mode Requested bit.
		#(OFFSET, MASK, VALUE)      (0XFCE89FF4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE89FF4 0x00000001 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_0 @ 0XFCE89FF8</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_0_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE89FF8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89FF8 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_1 @ 0XFCE89FFC</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_1_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE89FFC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE89FFC 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_2 @ 0XFCE8A000</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_2_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A000, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A000 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_3 @ 0XFCE8A004</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_3_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A004, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A004 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_4 @ 0XFCE8A008</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_4_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A008, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A008 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_5 @ 0XFCE8A00C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_5_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A00C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A00C 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_6 @ 0XFCE8A010</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_6_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A010, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A010 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_7 @ 0XFCE8A014</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_7_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A014, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A014 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_8 @ 0XFCE8A018</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_8_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A018, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A018 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_9 @ 0XFCE8A01C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_9_ATTR                            0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A01C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A01C 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_10 @ 0XFCE8A020</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_10_ATTR                           0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A020, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A020 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_11 @ 0XFCE8A024</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_11_ATTR                           0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A024, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A024 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_12 @ 0XFCE8A028</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_12_ATTR                           0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A028, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A028 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_13 @ 0XFCE8A02C</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_13_ATTR                           0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A02C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A02C 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_14 @ 0XFCE8A030</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_14_ATTR                           0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A030, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A030 0x0000001F 0x00000000
		# Register : PFx_PASID_CAP_MAX_PASID_WIDTH_15 @ 0XFCE8A034</p>

		# 
		# CPM5_PCIE1_ATTR_PFX_PASID_CAP_MAX_PASID_WIDTH_15_ATTR                           0x0

		# Max PASID Width. Permitted to be in the range 0D (single PASID) to 20D (all PASID value (20 bits))
		#(OFFSET, MASK, VALUE)      (0XFCE8A034, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A034 0x0000001F 0x00000000
		# Register : zFx_ACS_CAP_ON_0 @ 0XFCE8A038</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_0_ATTR                                           1

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A038, 0x00000001U ,0x00000001U)  */
    mask_write 0XFCE8A038 0x00000001 0x00000001
		# Register : zFx_ACS_CAP_ON_1 @ 0XFCE8A03C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_1_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A03C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A03C 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_2 @ 0XFCE8A040</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_2_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A040, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A040 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_3 @ 0XFCE8A044</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_3_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A044, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A044 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_4 @ 0XFCE8A048</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_4_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A048, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A048 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_5 @ 0XFCE8A04C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_5_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A04C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A04C 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_6 @ 0XFCE8A050</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_6_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A050, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A050 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_7 @ 0XFCE8A054</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_7_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A054, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A054 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_8 @ 0XFCE8A058</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_8_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A058, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A058 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_9 @ 0XFCE8A05C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_9_ATTR                                           0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A05C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A05C 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_10 @ 0XFCE8A060</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_10_ATTR                                          0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A060, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A060 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_11 @ 0XFCE8A064</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_11_ATTR                                          0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A064, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A064 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_12 @ 0XFCE8A068</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_12_ATTR                                          0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A068, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A068 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_13 @ 0XFCE8A06C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_13_ATTR                                          0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A06C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A06C 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_14 @ 0XFCE8A070</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_14_ATTR                                          0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A070, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A070 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_15 @ 0XFCE8A074</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_15_ATTR                                          0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A074, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A074 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_16 @ 0XFCE8A078</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_16_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A078, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A078 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_17 @ 0XFCE8A07C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_17_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A07C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A07C 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_18 @ 0XFCE8A080</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_18_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A080, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A080 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_19 @ 0XFCE8A084</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_19_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A084, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A084 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_20 @ 0XFCE8A088</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_20_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A088, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A088 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_21 @ 0XFCE8A08C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_21_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A08C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A08C 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_22 @ 0XFCE8A090</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_22_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A090, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A090 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_23 @ 0XFCE8A094</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_23_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A094, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A094 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_24 @ 0XFCE8A098</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_24_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A098, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A098 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_25 @ 0XFCE8A09C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_25_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A09C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A09C 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_26 @ 0XFCE8A0A0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_26_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A0A0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A0A0 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_27 @ 0XFCE8A0A4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_27_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A0A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A0A4 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_28 @ 0XFCE8A0A8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_28_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A0A8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A0A8 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_29 @ 0XFCE8A0AC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_29_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A0AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A0AC 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_30 @ 0XFCE8A0B0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_30_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A0B0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A0B0 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_ON_31 @ 0XFCE8A0B4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_ON_31_ATTR                                          0x0

		# ACS Cap On
		#(OFFSET, MASK, VALUE)      (0XFCE8A0B4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A0B4 0x00000001 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_0 @ 0XFCE8A0B8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_0_ATTR                                      1120

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0B8, 0x00000FFFU ,0x00000460U)  */
    mask_write 0XFCE8A0B8 0x00000FFF 0x00000460
		# Register : zFx_ACS_CAP_NEXTPTR_1 @ 0XFCE8A0BC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_1_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0BC, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0BC 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_2 @ 0XFCE8A0C0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_2_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0C0, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0C0 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_3 @ 0XFCE8A0C4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_3_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0C4, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0C4 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_4 @ 0XFCE8A0C8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_4_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0C8, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0C8 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_5 @ 0XFCE8A0CC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_5_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0CC, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0CC 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_6 @ 0XFCE8A0D0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_6_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0D0, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0D0 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_7 @ 0XFCE8A0D4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_7_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0D4, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0D4 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_8 @ 0XFCE8A0D8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_8_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0D8, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0D8 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_9 @ 0XFCE8A0DC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_9_ATTR                                      1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0DC, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0DC 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_10 @ 0XFCE8A0E0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_10_ATTR                                     1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0E0, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0E0 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_11 @ 0XFCE8A0E4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_11_ATTR                                     1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0E4, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0E4 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_12 @ 0XFCE8A0E8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_12_ATTR                                     1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0E8, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0E8 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_13 @ 0XFCE8A0EC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_13_ATTR                                     1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0EC, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0EC 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_14 @ 0XFCE8A0F0</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_14_ATTR                                     1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0F0, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0F0 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_15 @ 0XFCE8A0F4</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_15_ATTR                                     1520

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0F4, 0x00000FFFU ,0x000005F0U)  */
    mask_write 0XFCE8A0F4 0x00000FFF 0x000005F0
		# Register : zFx_ACS_CAP_NEXTPTR_16 @ 0XFCE8A0F8</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_16_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0F8, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A0F8 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_17 @ 0XFCE8A0FC</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_17_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A0FC, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A0FC 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_18 @ 0XFCE8A100</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_18_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A100, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A100 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_19 @ 0XFCE8A104</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_19_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A104, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A104 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_20 @ 0XFCE8A108</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_20_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A108, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A108 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_21 @ 0XFCE8A10C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_21_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A10C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A10C 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_22 @ 0XFCE8A110</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_22_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A110, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A110 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_23 @ 0XFCE8A114</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_23_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A114, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A114 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_24 @ 0XFCE8A118</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_24_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A118, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A118 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_25 @ 0XFCE8A11C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_25_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A11C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A11C 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_26 @ 0XFCE8A120</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_26_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A120, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A120 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_27 @ 0XFCE8A124</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_27_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A124, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A124 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_28 @ 0XFCE8A128</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_28_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A128, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A128 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_29 @ 0XFCE8A12C</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_29_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A12C, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A12C 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_30 @ 0XFCE8A130</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_30_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A130, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A130 0x00000FFF 0x00000000
		# Register : zFx_ACS_CAP_NEXTPTR_31 @ 0XFCE8A134</p>

		# 
		# CPM5_PCIE1_ATTR_ZFX_ACS_CAP_NEXTPTR_31_ATTR                                     0x0

		# ACS Cap Next Pointer for Functions
		#(OFFSET, MASK, VALUE)      (0XFCE8A134, 0x00000FFFU ,0x00000000U)  */
    mask_write 0XFCE8A134 0x00000FFF 0x00000000
		# Register : MCAP_ENABLE @ 0XFCE8A138</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_ENABLE_ATTR                                                0x0

		# MCAP Enable: Enabled MCAP Vendor Specific Capability Structure in Function #0. This feature is supported only in the Legacy E
		# dpoint and Endpoint modes. When MCAP_ENABLE is false, all other MCAP_* attributes that are boolean must be set to FALSE and v
		# lue of 0 driven on non boolean attributes.
		#(OFFSET, MASK, VALUE)      (0XFCE8A138, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A138 0x00000001 0x00000000
		# Register : MCAP_CONFIGURE_OVERRIDE @ 0XFCE8A13C</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_CONFIGURE_OVERRIDE_ATTR                                    0x0

		# MCAP Configure Interface Access Override: When set to TRUE, the Configure interface is given permanent access to the FPGA MCA
		#  VSEC registers. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A13C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A13C 0x00000001 0x00000000
		# Register : MCAP_CAP_NEXTPTR @ 0XFCE8A140</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_CAP_NEXTPTR_ATTR                                           928

		# MCAP Next Capability Offset: Bits 31:20 MCAP Extended Capability Header Register
		#(OFFSET, MASK, VALUE)      (0XFCE8A140, 0x00000FFFU ,0x000003A0U)  */
    mask_write 0XFCE8A140 0x00000FFF 0x000003A0
		# Register : MCAP_VSEC_ID @ 0XFCE8A144</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_VSEC_ID_ATTR                                               0x1

		# MCAP VSEC ID : This field is a vendor-defined ID number that indicates the nature and format of the VSEC structure.
		#(OFFSET, MASK, VALUE)      (0XFCE8A144, 0x0000FFFFU ,0x00000001U)  */
    mask_write 0XFCE8A144 0x0000FFFF 0x00000001
		# Register : MCAP_VSEC_REV @ 0XFCE8A148</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_VSEC_REV_ATTR                                              0x2

		# MCAP VSEC Rev : This field is a vendor-defined version number that indicates the version of the VSEC structure.
		#(OFFSET, MASK, VALUE)      (0XFCE8A148, 0x0000000FU ,0x00000002U)  */
    mask_write 0XFCE8A148 0x0000000F 0x00000002
		# Register : MCAP_VSEC_LEN @ 0XFCE8A14C</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_VSEC_LEN_ATTR                                              0x1C

		# MCAP VSEC Length : This field indicates the number of bytes in the entire VSEC structure, including the PCI Express Extended 
		# apability header, the Vendor- Specific header, and the Vendor-Specific registers.
		#(OFFSET, MASK, VALUE)      (0XFCE8A14C, 0x00000FFFU ,0x0000001CU)  */
    mask_write 0XFCE8A14C 0x00000FFF 0x0000001C
		# Register : MCAP_INTERRUPT_ON_MCAP_EOS @ 0XFCE8A150</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_INTERRUPT_ON_MCAP_EOS_ATTR                                 0x0

		# MCAP Enable Interrupt Generation on MCAP_EOS assertion : When set to TRUE, enabled Interrupt generation on rising edge of mca
		# _eos. Supported only when AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = FALSE. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A150, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A150 0x00000001 0x00000000
		# Register : MCAP_INTERRUPT_ON_MCAP_ERROR @ 0XFCE8A154</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_INTERRUPT_ON_MCAP_ERROR_ATTR                               0x0

		# MCAP Enable Interrupt Generation on MCAP_ERROR assertion : When set to TRUE, enabled Interrupt generation on rising edge of m
		# ap_error. Supported only when AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = FALSE. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A154, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A154 0x00000001 0x00000000
		# Register : MCAP_INPUT_GATE_DESIGN_SWITCH @ 0XFCE8A158</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_INPUT_GATE_DESIGN_SWITCH_ATTR                              0x0

		# Use MCAP Design Switch: When set to TRUE, enables use of MCAP Design Switch (conf_design_switch) signal. FEATURE USE DEPRECAT
		# ON - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A158, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A158 0x00000001 0x00000000
		# Register : MCAP_EOS_DESIGN_SWITCH @ 0XFCE8A15C</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_EOS_DESIGN_SWITCH_ATTR                                     0x0

		# Latched MCAP EOS based Design Switch: For use in Tandem PROM use case. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A15C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A15C 0x00000001 0x00000000
		# Register : MCAP_GATE_MEM_ENABLE_DESIGN_SWITCH @ 0XFCE8A160</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_GATE_MEM_ENABLE_DESIGN_SWITCH_ATTR                         0x0

		# Memory Space Enable Gating Enable: When set to TRUE, memory space enable configuration space bit takes effect only after comb
		# ned design switch signal has asserted. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A160, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A160 0x00000001 0x00000000
		# Register : MCAP_GATE_IO_ENABLE_DESIGN_SWITCH @ 0XFCE8A164</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_GATE_IO_ENABLE_DESIGN_SWITCH_ATTR                          0x0

		# IO Space Enable Gating Enable: When set to TRUE, IO space enable configuration space bit takes effect only after combined des
		# gn switch signal has asserted. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A164, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A164 0x00000001 0x00000000
		# Register : MCAP_CFG_SLAVE_BLOCK @ 0XFCE8A168</p>

		# 
		# CPM5_PCIE1_ATTR_MCAP_CFG_SLAVE_BLOCK_ATTR                                       0x0

		# Should be set to 0b for MCAP configuration Master block or 1b for MCAP configuration Slave block. When set to 1b, MCAP_INPUT_
		# ATE_DESIGN_SWITCH must be TRUE and MCAP_ENABLE must be FALSE, allows the use of mcap_design_switch_in (user_spare_in[21]) as 
		# he control input for Design Switch operation. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A168, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A168 0x00000001 0x00000000
		# Register : DEBUG_AXIST_DISABLE_FEATURE_BIT @ 0XFCE8A16C</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_AXIST_DISABLE_FEATURE_BIT_ATTR                            0x0

		# AXIST Feature Disable Bits. Each bit is associated with an AXIST feature which can be disabled by setting it to 1. Bit[0]: Di
		# able RC Invalid Tag checking Bit[1]: Disable RC Poisoned checking Bit[2]: Disable RC RID Mismatch checking Bit[3]: Disable RC
		# TC/AT Mismatch checking Bit[4]: Disable RC Address Mismatch checking Bit[5]: Disable RC Byte Count checking Bit[6]: Disable R
		#  Completion Status checking Bit[7]: Disable CQ BAR Hit checking. The incoming TLPs always hit PF0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A16C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8A16C 0x000000FF 0x00000000
		# Register : DEBUG_TL_DISABLE_RX_TLP_ORDER_CHECKS @ 0XFCE8A170</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_TL_DISABLE_RX_TLP_ORDER_CHECKS_ATTR                       0x0

		# When TRUE, disables the required PCIe ordering rule check between received Completions and Posted requests.
		#(OFFSET, MASK, VALUE)      (0XFCE8A170, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A170 0x00000001 0x00000000
		# Register : DEBUG_TL_DISABLE_FC_TIMEOUT @ 0XFCE8A174</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_TL_DISABLE_FC_TIMEOUT_ATTR                                0x0

		# When TRUE, disables link retrain due to FC Timeout Disable
		#(OFFSET, MASK, VALUE)      (0XFCE8A174, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A174 0x00000001 0x00000000
		# Register : DEBUG_PL_DISABLE_SCRAMBLING @ 0XFCE8A178</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_DISABLE_SCRAMBLING_ATTR                                0x0

		# When TRUE, disables scrabler and de-scrambler in the Physical Layer at Gen1/2 speeds. Used for test and debug only.
		#(OFFSET, MASK, VALUE)      (0XFCE8A178, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A178 0x00000001 0x00000000
		# Register : DEBUG_PL_DISABLE_REC_ENTRY_ON_DYNAMIC_DSKEW_FLD @ 0XFCE8A17C</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_DISABLE_REC_ENTRY_ON_DYNAMIC_DSKEW_FLD_ATTR            0x0

		# When set to FALSE, a dynamic deskew failure will cause Recovery, otherwise, if set to TRUE, dynamic deskew failure will be ig
		# ored. Should be set to FALSE on Asynchronous Links. May have to be set to TRUE on Synchronous Link with BER to avoid unnecess
		# ry transitions to Recovery.
		#(OFFSET, MASK, VALUE)      (0XFCE8A17C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A17C 0x00000001 0x00000000
		# Register : DEBUG_PL_DISABLE_REC_ENTRY_ON_RX_BUFFER_UNDER_OVER_FLOW @ 0XFCE8A180</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_DISABLE_REC_ENTRY_ON_RX_BUFFER_UNDER_OVER_FLOW_ATTR    0x0

		# When set to FALSE, any per lane pipe_rxstatus [2:0] indicating 101 (rx overflow) or 110 (rx undeflow) will cause Recovery, ot
		# erwise, if set to TRUE, pipe_rxstatus [2:0] indications 101 and 110 will be ignored. FEATURE USE DEPRECATION - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A180, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A180 0x00000001 0x00000000
		# Register : DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_ERROR @ 0XFCE8A184</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_ERROR_ATTR                   0x0

		# When set to FALSE, allows to not update the Lane Error Status register on SKP error detection.
		#(OFFSET, MASK, VALUE)      (0XFCE8A184, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A184 0x00000001 0x00000000
		# Register : DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_PARITY_ERROR @ 0XFCE8A188</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_PARITY_ERROR_ATTR            0x0

		# When set to FALSE, allows to not update the Lane Error Status register on SKP Parity error detection. FEATURE USE DEPRECATION
		# - UNUSED
		#(OFFSET, MASK, VALUE)      (0XFCE8A188, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A188 0x00000001 0x00000000
		# Register : DEBUG_PL_DISABLE_LES_UPDATE_ON_DEFRAMER_ERROR @ 0XFCE8A18C</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_DISABLE_LES_UPDATE_ON_DEFRAMER_ERROR_ATTR              0x0

		# When set to FALSE, allows to not update the Lane Error Status register on Deframer error detection.
		#(OFFSET, MASK, VALUE)      (0XFCE8A18C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A18C 0x00000001 0x00000000
		# Register : DEBUG_PL_SIM_RESET_LFSR @ 0XFCE8A190</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_SIM_RESET_LFSR_ATTR                                    0x0

		# When set to TRUE, used in simulation only, to reset Gen3,4 LFSRs to seed value or reset Gen1/2 LFSR to reset value
		#(OFFSET, MASK, VALUE)      (0XFCE8A190, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A190 0x00000001 0x00000000
		# Register : DEBUG_PL_SPARE @ 0XFCE8A194</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_PL_SPARE_ATTR                                             0x0

		# PL Debug Spare Bits
		#(OFFSET, MASK, VALUE)      (0XFCE8A194, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A194 0x0000FFFF 0x00000000
		# Register : DEBUG_TL_SPARE @ 0XFCE8A198</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_TL_SPARE_ATTR                                             0x0

		# TL Debug Spare Bits
		#(OFFSET, MASK, VALUE)      (0XFCE8A198, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A198 0x0000FFFF 0x00000000
		# Register : DEBUG_AXI4ST_SPARE @ 0XFCE8A19C</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_AXI4ST_SPARE_ATTR                                         0x0

		# AXI4ST Debug Spare Bits
		#(OFFSET, MASK, VALUE)      (0XFCE8A19C, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A19C 0x0000FFFF 0x00000000
		# Register : DEBUG_CAR_SPARE @ 0XFCE8A1A0</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_CAR_SPARE_ATTR                                            0x0

		# CAR Debug Spare Bits
		#(OFFSET, MASK, VALUE)      (0XFCE8A1A0, 0x0000000FU ,0x00000000U)  */
    mask_write 0XFCE8A1A0 0x0000000F 0x00000000
		# Register : DEBUG_NO_STICKY_RESET @ 0XFCE8A1A4</p>

		# 
		# CPM5_PCIE1_ATTR_DEBUG_NO_STICKY_RESET_ATTR                                      0x0

		# When set to TRUE, sticky register bits will be preserved through warm/hot/link down reset.
		#(OFFSET, MASK, VALUE)      (0XFCE8A1A4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A1A4 0x00000001 0x00000000
		# Register : ADV_SWT_SHADOW_REGSPACE_ENABLE @ 0XFCE8A1A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_SHADOW_REGSPACE_ENABLE_ATTR                             0x0

		# Advanced Switch Shadow Register Space Enable: When TRUE, enables the Advanced Switch Shadow Registers (32 DSPs, 17 EPs).
		#(OFFSET, MASK, VALUE)      (0XFCE8A1A8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A1A8 0x00000001 0x00000000
		# Register : ADV_SWT_INTERNAL_REGSPACE_ENABLE @ 0XFCE8A1AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_INTERNAL_REGSPACE_ENABLE_ATTR                           0x0

		# Advanced Switch Internal Register Space Enable: When TRUE, enables the Advanced Switch Internal Endpoint Registers (15 EPs).
		#(OFFSET, MASK, VALUE)      (0XFCE8A1AC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A1AC 0x00000001 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_0 @ 0XFCE8A1B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_0_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1B0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1B0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_1 @ 0XFCE8A1B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_1_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1B4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1B4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_2 @ 0XFCE8A1B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_2_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1B8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1B8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_3 @ 0XFCE8A1BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_3_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1BC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1BC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_4 @ 0XFCE8A1C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_4_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1C0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1C0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_5 @ 0XFCE8A1C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_5_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1C4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1C4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_6 @ 0XFCE8A1C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_6_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1C8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1C8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_7 @ 0XFCE8A1CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_7_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1CC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1CC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_8 @ 0XFCE8A1D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_8_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1D0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1D0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_9 @ 0XFCE8A1D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_9_ATTR                                    0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1D4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1D4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_10 @ 0XFCE8A1D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_10_ATTR                                   0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1D8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1D8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_11 @ 0XFCE8A1DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_11_ATTR                                   0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1DC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1DC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_12 @ 0XFCE8A1E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_12_ATTR                                   0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1E0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1E0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_13 @ 0XFCE8A1E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_13_ATTR                                   0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1E4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1E4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_14 @ 0XFCE8A1E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_14_ATTR                                   0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1E8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_15 @ 0XFCE8A1EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_15_ATTR                                   0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1EC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1EC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_CONTROL_16 @ 0XFCE8A1F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_CONTROL_16_ATTR                                   0x0

		# BAR0 Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, non-pr
		# fetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A1F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A1F0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_0 @ 0XFCE8A1F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_0_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A1F4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A1F4 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_1 @ 0XFCE8A1F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_1_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A1F8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A1F8 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_2 @ 0XFCE8A1FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_2_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A1FC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A1FC 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_3 @ 0XFCE8A200</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_3_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A200, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A200 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_4 @ 0XFCE8A204</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_4_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A204, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A204 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_5 @ 0XFCE8A208</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_5_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A208, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A208 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_6 @ 0XFCE8A20C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_6_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A20C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A20C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_7 @ 0XFCE8A210</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_7_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A210, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A210 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_8 @ 0XFCE8A214</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_8_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A214, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A214 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_9 @ 0XFCE8A218</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_9_ATTR                              0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A218, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A218 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_10 @ 0XFCE8A21C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_10_ATTR                             0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A21C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A21C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_11 @ 0XFCE8A220</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_11_ATTR                             0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A220, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A220 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_12 @ 0XFCE8A224</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_12_ATTR                             0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A224, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A224 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_13 @ 0XFCE8A228</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_13_ATTR                             0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A228, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A228 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_14 @ 0XFCE8A22C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_14_ATTR                             0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A22C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A22C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_15 @ 0XFCE8A230</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_15_ATTR                             0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A230, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A230 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR0_APERTURE_SIZE_16 @ 0XFCE8A234</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR0_APERTURE_SIZE_16_ATTR                             0x0

		# BAR0 Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are: 00
		# 000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 00
		# 111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 
		# bytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 =
		# 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 01
		# 011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 T
		# ytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 1
		# 8 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 1011
		# 1 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Eb
		# tes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 bytes 
		# 00001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 byte
		#  001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 64 Kb
		# tes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010101 
		#  8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 Mbyte
		#  011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 64 Gb
		# tes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A234, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A234 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_0 @ 0XFCE8A238</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_0_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A238, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A238 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_1 @ 0XFCE8A23C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_1_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A23C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A23C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_2 @ 0XFCE8A240</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_2_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A240, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A240 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_3 @ 0XFCE8A244</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_3_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A244, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A244 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_4 @ 0XFCE8A248</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_4_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A248, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A248 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_5 @ 0XFCE8A24C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_5_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A24C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A24C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_6 @ 0XFCE8A250</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_6_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A250, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A250 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_7 @ 0XFCE8A254</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_7_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A254, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A254 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_8 @ 0XFCE8A258</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_8_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A258, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A258 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_9 @ 0XFCE8A25C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_9_ATTR                                    0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A25C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A25C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_10 @ 0XFCE8A260</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_10_ATTR                                   0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A260, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A260 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_11 @ 0XFCE8A264</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_11_ATTR                                   0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A264, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A264 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_12 @ 0XFCE8A268</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_12_ATTR                                   0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A268, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A268 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_13 @ 0XFCE8A26C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_13_ATTR                                   0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A26C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A26C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_14 @ 0XFCE8A270</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_14_ATTR                                   0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A270, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A270 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_15 @ 0XFCE8A274</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_15_ATTR                                   0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A274, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A274 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_CONTROL_16 @ 0XFCE8A278</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_CONTROL_16_ATTR                                   0x0

		# BAR1 Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A278, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A278 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_0 @ 0XFCE8A27C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_0_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A27C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A27C 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_1 @ 0XFCE8A280</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_1_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A280, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A280 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_2 @ 0XFCE8A284</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_2_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A284, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A284 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_3 @ 0XFCE8A288</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_3_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A288, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A288 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_4 @ 0XFCE8A28C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_4_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A28C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A28C 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_5 @ 0XFCE8A290</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_5_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A290, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A290 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_6 @ 0XFCE8A294</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_6_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A294, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A294 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_7 @ 0XFCE8A298</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_7_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A298, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A298 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_8 @ 0XFCE8A29C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_8_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A29C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A29C 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_9 @ 0XFCE8A2A0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_9_ATTR                              0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2A0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2A0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_10 @ 0XFCE8A2A4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_10_ATTR                             0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2A4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2A4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_11 @ 0XFCE8A2A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_11_ATTR                             0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2A8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2A8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_12 @ 0XFCE8A2AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_12_ATTR                             0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2AC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2AC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_13 @ 0XFCE8A2B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_13_ATTR                             0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2B0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2B0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_14 @ 0XFCE8A2B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_14_ATTR                             0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2B4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2B4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_15 @ 0XFCE8A2B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_15_ATTR                             0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2B8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2B8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR1_APERTURE_SIZE_16 @ 0XFCE8A2BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR1_APERTURE_SIZE_16_ATTR                             0x0

		# BAR1 Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256bytes 
		# 0010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001
		# = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000
		# = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 101
		# 1 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 00010 =
		# 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 = 2 K
		# ytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 256 K
		# ytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 Mbyt
		# s 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A2BC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A2BC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_0 @ 0XFCE8A2C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_0_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2C0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2C0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_1 @ 0XFCE8A2C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_1_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2C4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2C4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_2 @ 0XFCE8A2C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_2_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2C8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2C8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_3 @ 0XFCE8A2CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_3_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2CC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2CC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_4 @ 0XFCE8A2D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_4_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2D0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2D0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_5 @ 0XFCE8A2D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_5_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2D4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2D4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_6 @ 0XFCE8A2D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_6_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2D8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2D8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_7 @ 0XFCE8A2DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_7_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2DC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2DC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_8 @ 0XFCE8A2E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_8_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2E0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2E0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_9 @ 0XFCE8A2E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_9_ATTR                                    0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2E4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2E4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_10 @ 0XFCE8A2E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_10_ATTR                                   0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2E8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_11 @ 0XFCE8A2EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_11_ATTR                                   0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2EC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2EC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_12 @ 0XFCE8A2F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_12_ATTR                                   0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2F0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_13 @ 0XFCE8A2F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_13_ATTR                                   0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2F4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_14 @ 0XFCE8A2F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_14_ATTR                                   0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2F8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2F8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_15 @ 0XFCE8A2FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_15_ATTR                                   0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A2FC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A2FC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_CONTROL_16 @ 0XFCE8A300</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_CONTROL_16_ATTR                                   0x0

		# BAR2 Control - Specifies the configuration of BAR 2. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011: Res
		# rved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 2-3, non-pr
		# fetchable 111: Part of 64-bit memory BAR 2-3, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A300, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A300 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_0 @ 0XFCE8A304</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_0_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A304, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A304 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_1 @ 0XFCE8A308</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_1_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A308, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A308 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_2 @ 0XFCE8A30C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_2_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A30C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A30C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_3 @ 0XFCE8A310</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_3_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A310, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A310 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_4 @ 0XFCE8A314</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_4_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A314, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A314 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_5 @ 0XFCE8A318</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_5_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A318, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A318 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_6 @ 0XFCE8A31C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_6_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A31C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A31C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_7 @ 0XFCE8A320</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_7_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A320, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A320 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_8 @ 0XFCE8A324</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_8_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A324, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A324 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_9 @ 0XFCE8A328</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_9_ATTR                              0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A328, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A328 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_10 @ 0XFCE8A32C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_10_ATTR                             0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A32C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A32C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_11 @ 0XFCE8A330</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_11_ATTR                             0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A330, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A330 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_12 @ 0XFCE8A334</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_12_ATTR                             0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A334, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A334 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_13 @ 0XFCE8A338</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_13_ATTR                             0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A338, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A338 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_14 @ 0XFCE8A33C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_14_ATTR                             0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A33C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A33C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_15 @ 0XFCE8A340</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_15_ATTR                             0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A340, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A340 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR2_APERTURE_SIZE_16 @ 0XFCE8A344</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR2_APERTURE_SIZE_16_ATTR                             0x0

		# BAR2 Aperture: Specifies the aperture of BAR 2. [The 32-bit BAR 2 or 64-bit BAR2-3.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A344, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A344 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_0 @ 0XFCE8A348</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_0_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A348, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A348 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_1 @ 0XFCE8A34C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_1_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A34C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A34C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_2 @ 0XFCE8A350</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_2_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A350, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A350 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_3 @ 0XFCE8A354</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_3_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A354, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A354 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_4 @ 0XFCE8A358</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_4_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A358, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A358 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_5 @ 0XFCE8A35C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_5_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A35C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A35C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_6 @ 0XFCE8A360</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_6_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A360, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A360 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_7 @ 0XFCE8A364</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_7_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A364, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A364 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_8 @ 0XFCE8A368</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_8_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A368, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A368 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_9 @ 0XFCE8A36C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_9_ATTR                                    0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A36C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A36C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_10 @ 0XFCE8A370</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_10_ATTR                                   0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A370, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A370 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_11 @ 0XFCE8A374</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_11_ATTR                                   0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A374, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A374 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_12 @ 0XFCE8A378</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_12_ATTR                                   0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A378, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A378 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_13 @ 0XFCE8A37C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_13_ATTR                                   0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A37C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A37C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_14 @ 0XFCE8A380</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_14_ATTR                                   0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A380, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A380 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_15 @ 0XFCE8A384</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_15_ATTR                                   0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A384, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A384 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_CONTROL_16 @ 0XFCE8A388</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_CONTROL_16_ATTR                                   0x0

		# BAR3 Control - Specifies the configuration of BAR 3. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the I/O Base ANDamp; Limit encodings are: 000: Disabled 001: 16-bit I/O Enabled 011: 32-bit I/O Enabled 010,100-11
		# : Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A388, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A388 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_0 @ 0XFCE8A38C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_0_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A38C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A38C 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_1 @ 0XFCE8A390</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_1_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A390, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A390 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_2 @ 0XFCE8A394</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_2_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A394, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A394 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_3 @ 0XFCE8A398</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_3_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A398, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A398 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_4 @ 0XFCE8A39C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_4_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A39C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A39C 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_5 @ 0XFCE8A3A0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_5_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3A0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3A0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_6 @ 0XFCE8A3A4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_6_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3A4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3A4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_7 @ 0XFCE8A3A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_7_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3A8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3A8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_8 @ 0XFCE8A3AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_8_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3AC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3AC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_9 @ 0XFCE8A3B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_9_ATTR                              0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3B0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3B0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_10 @ 0XFCE8A3B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_10_ATTR                             0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3B4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3B4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_11 @ 0XFCE8A3B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_11_ATTR                             0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3B8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3B8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_12 @ 0XFCE8A3BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_12_ATTR                             0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3BC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3BC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_13 @ 0XFCE8A3C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_13_ATTR                             0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3C0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3C0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_14 @ 0XFCE8A3C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_14_ATTR                             0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3C4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3C4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_15 @ 0XFCE8A3C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_15_ATTR                             0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3C8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3C8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR3_APERTURE_SIZE_16 @ 0XFCE8A3CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR3_APERTURE_SIZE_16_ATTR                             0x0

		# BAR3 Aperture: Specifies the aperture of BAR 3. The valid encodings are: 00000 = 128bytes 00001 = 256bytes 00010 = 512bytes 0
		# 011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 01001 = 64 Kbytes 01010
		# = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 10000 = 8 Mbytes 10001 
		#  16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10111 = 1 Gbytes 1100
		#  = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A3CC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A3CC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_0 @ 0XFCE8A3D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_0_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3D0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3D0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_1 @ 0XFCE8A3D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_1_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3D4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3D4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_2 @ 0XFCE8A3D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_2_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3D8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3D8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_3 @ 0XFCE8A3DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_3_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3DC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3DC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_4 @ 0XFCE8A3E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_4_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3E0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3E0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_5 @ 0XFCE8A3E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_5_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3E4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3E4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_6 @ 0XFCE8A3E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_6_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3E8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3E8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_7 @ 0XFCE8A3EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_7_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3EC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3EC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_8 @ 0XFCE8A3F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_8_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3F0 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_9 @ 0XFCE8A3F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_9_ATTR                                    0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3F4 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_10 @ 0XFCE8A3F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_10_ATTR                                   0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3F8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3F8 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_11 @ 0XFCE8A3FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_11_ATTR                                   0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A3FC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A3FC 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_12 @ 0XFCE8A400</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_12_ATTR                                   0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A400, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A400 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_13 @ 0XFCE8A404</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_13_ATTR                                   0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A404, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A404 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_14 @ 0XFCE8A408</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_14_ATTR                                   0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A408, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A408 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_15 @ 0XFCE8A40C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_15_ATTR                                   0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A40C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A40C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_CONTROL_16 @ 0XFCE8A410</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_CONTROL_16_ATTR                                   0x0

		# BAR4 Control - Specifies the configuration of BAR 4. For Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory B
		# R 4-5, non-prefetchable 111: Part of 64-bit memory BAR 4-5, prefetchable For non-Endpoint (Type 1) Config Space, the Memory B
		# se ANDamp; Limit encodings are: 000: Disabled (RO) 001: Enabled (RW) 010-111: Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A410, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A410 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_0 @ 0XFCE8A414</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_0_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A414, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A414 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_1 @ 0XFCE8A418</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_1_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A418, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A418 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_2 @ 0XFCE8A41C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_2_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A41C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A41C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_3 @ 0XFCE8A420</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_3_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A420, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A420 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_4 @ 0XFCE8A424</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_4_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A424, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A424 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_5 @ 0XFCE8A428</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_5_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A428, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A428 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_6 @ 0XFCE8A42C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_6_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A42C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A42C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_7 @ 0XFCE8A430</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_7_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A430, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A430 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_8 @ 0XFCE8A434</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_8_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A434, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A434 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_9 @ 0XFCE8A438</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_9_ATTR                              0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A438, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A438 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_10 @ 0XFCE8A43C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_10_ATTR                             0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A43C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A43C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_11 @ 0XFCE8A440</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_11_ATTR                             0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A440, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A440 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_12 @ 0XFCE8A444</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_12_ATTR                             0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A444, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A444 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_13 @ 0XFCE8A448</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_13_ATTR                             0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A448, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A448 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_14 @ 0XFCE8A44C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_14_ATTR                             0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A44C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A44C 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_15 @ 0XFCE8A450</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_15_ATTR                             0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A450, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A450 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR4_APERTURE_SIZE_16 @ 0XFCE8A454</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR4_APERTURE_SIZE_16_ATTR                             0x0

		# BAR4 Aperture: Specifies the aperture of BAR 4. [The 32-bit BAR 4 or 64-bit BAR4-5.] The encodings are: 000000 = 128bytes 000
		# 01 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbytes 000111 = 16 Kbytes 00
		# 000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 = 1 Mbytes 001110 = 2 M
		# ytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 010100 = 128 Mbytes 010101 
		#  256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbytes 011011 = 16 Gbytes 01
		# 100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001= 1 Tbytes 100010= 2 Tby
		# es 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000 = 128 Tbytes 101001 = 
		# 56 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 101111 = 16 Pbytes 1100
		# 0 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 1 Ebytes 110110 = 2 Eby
		# es 110111 = 4 Ebytes 111000 = 8 Ebytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A454, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A454 0x0000003F 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_0 @ 0XFCE8A458</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_0_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A458, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A458 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_1 @ 0XFCE8A45C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_1_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A45C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A45C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_2 @ 0XFCE8A460</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_2_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A460, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A460 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_3 @ 0XFCE8A464</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_3_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A464, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A464 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_4 @ 0XFCE8A468</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_4_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A468, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A468 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_5 @ 0XFCE8A46C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_5_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A46C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A46C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_6 @ 0XFCE8A470</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_6_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A470, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A470 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_7 @ 0XFCE8A474</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_7_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A474, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A474 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_8 @ 0XFCE8A478</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_8_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A478, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A478 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_9 @ 0XFCE8A47C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_9_ATTR                                    0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A47C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A47C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_10 @ 0XFCE8A480</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_10_ATTR                                   0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A480, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A480 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_11 @ 0XFCE8A484</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_11_ATTR                                   0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A484, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A484 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_12 @ 0XFCE8A488</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_12_ATTR                                   0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A488, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A488 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_13 @ 0XFCE8A48C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_13_ATTR                                   0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A48C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A48C 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_14 @ 0XFCE8A490</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_14_ATTR                                   0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A490, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A490 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_15 @ 0XFCE8A494</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_15_ATTR                                   0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A494, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A494 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_CONTROL_16 @ 0XFCE8A498</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_CONTROL_16_ATTR                                   0x0

		# BAR5 Control - Specifies the configuration of BAR 5. The Endpoint, the various encodings are: 000: Disabled 001: 32-bit IO BA
		#  010-011: Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable For non-Endpoint (Type 1) Co
		# fig Space, the Prefetchable Memory Base ANDamp; Limit encodings are: 000: Disabled 001: 32-bit Enabled 011: 64-bit Enabled 01
		# ,100-111: Reserved NOTE: For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A498, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A498 0x00000007 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_0 @ 0XFCE8A49C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_0_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A49C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A49C 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_1 @ 0XFCE8A4A0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_1_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4A0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4A0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_2 @ 0XFCE8A4A4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_2_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4A4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4A4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_3 @ 0XFCE8A4A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_3_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4A8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4A8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_4 @ 0XFCE8A4AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_4_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4AC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4AC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_5 @ 0XFCE8A4B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_5_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4B0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4B0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_6 @ 0XFCE8A4B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_6_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4B4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4B4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_7 @ 0XFCE8A4B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_7_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4B8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4B8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_8 @ 0XFCE8A4BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_8_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4BC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4BC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_9 @ 0XFCE8A4C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_9_ATTR                              0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4C0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4C0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_10 @ 0XFCE8A4C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_10_ATTR                             0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4C4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4C4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_11 @ 0XFCE8A4C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_11_ATTR                             0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4C8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4C8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_12 @ 0XFCE8A4CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_12_ATTR                             0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4CC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4CC 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_13 @ 0XFCE8A4D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_13_ATTR                             0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4D0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4D0 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_14 @ 0XFCE8A4D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_14_ATTR                             0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4D4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4D4 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_15 @ 0XFCE8A4D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_15_ATTR                             0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4D8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4D8 0x0000001F 0x00000000
		# Register : ADV_SWTm_BAR5_APERTURE_SIZE_16 @ 0XFCE8A4DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_BAR5_APERTURE_SIZE_16_ATTR                             0x0

		# BAR5 Aperture: Specifies the aperture of BAR 5. For Endpoint, the valid encodings are: 00000 = 128bytes 00001 = 256bytes 0001
		#  = 512bytes 00011 = 1 Kbytes+M417 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0100
		#  = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1000
		#  = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes 10
		# 11 = 1 Gbytes 11000 = 2 Gbytes For non-Endpoint (Type 1) Config Space, BAR 5 Aperture must be programmed to 0.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4DC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A4DC 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_0 @ 0XFCE8A4E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_0_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4E0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4E0 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_1 @ 0XFCE8A4E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_1_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4E4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4E4 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_2 @ 0XFCE8A4E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_2_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4E8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4E8 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_3 @ 0XFCE8A4EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_3_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4EC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4EC 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_4 @ 0XFCE8A4F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_4_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4F0, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4F0 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_5 @ 0XFCE8A4F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_5_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4F4, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4F4 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_6 @ 0XFCE8A4F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_6_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4F8, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4F8 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_7 @ 0XFCE8A4FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_7_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A4FC, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A4FC 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_8 @ 0XFCE8A500</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_8_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A500, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A500 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_9 @ 0XFCE8A504</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_9_ATTR                            0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A504, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A504 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_10 @ 0XFCE8A508</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_10_ATTR                           0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A508, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A508 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_11 @ 0XFCE8A50C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_11_ATTR                           0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A50C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A50C 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_12 @ 0XFCE8A510</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_12_ATTR                           0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A510, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A510 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_13 @ 0XFCE8A514</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_13_ATTR                           0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A514, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A514 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_14 @ 0XFCE8A518</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_14_ATTR                           0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A518, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A518 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_15 @ 0XFCE8A51C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_15_ATTR                           0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A51C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A51C 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_ENABLE_16 @ 0XFCE8A520</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_ENABLE_16_ATTR                           0x0

		# Expansion ROM BAR Enable: This bit must be set to enable the Expansion ROM BAR associated with the Function.
		#(OFFSET, MASK, VALUE)      (0XFCE8A520, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A520 0x00000001 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_0 @ 0XFCE8A524</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_0_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A524, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A524 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_1 @ 0XFCE8A528</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_1_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A528, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A528 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_2 @ 0XFCE8A52C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_2_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A52C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A52C 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_3 @ 0XFCE8A530</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_3_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A530, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A530 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_4 @ 0XFCE8A534</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_4_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A534, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A534 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_5 @ 0XFCE8A538</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_5_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A538, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A538 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_6 @ 0XFCE8A53C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_6_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A53C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A53C 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_7 @ 0XFCE8A540</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_7_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A540, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A540 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_8 @ 0XFCE8A544</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_8_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A544, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A544 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_9 @ 0XFCE8A548</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_9_ATTR                     0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A548, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A548 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_10 @ 0XFCE8A54C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_10_ATTR                    0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A54C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A54C 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_11 @ 0XFCE8A550</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_11_ATTR                    0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A550, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A550 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_12 @ 0XFCE8A554</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_12_ATTR                    0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A554, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A554 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_13 @ 0XFCE8A558</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_13_ATTR                    0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A558, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A558 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_14 @ 0XFCE8A55C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_14_ATTR                    0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A55C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A55C 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_15 @ 0XFCE8A560</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_15_ATTR                    0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A560, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A560 0x0000001F 0x00000000
		# Register : ADV_SWTm_EXPANSION_ROM_APERTURE_SIZE_16 @ 0XFCE8A564</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_EXPANSION_ROM_APERTURE_SIZE_16_ATTR                    0x0

		# Expansion ROM BAR Aperture Size : Encoding is as follows: 00000-00011 = Reserved 00100 = 2 KB, 00101 = 4 KB, 00110 = 8 KB, 00
		# 11 = 16 KB, 01000 = 32 KB, 01001 = 64 KB, 01010 = 128 KB, 01011 = 256 KB, 01100 = 512 KB, 01101 = 1 MB, 01110 = 2 MB, 01111 =
		# 4 MB, 10000 = 8 MB, 10001 = 16 MB, 10010 - 11111 = Reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A564, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A564 0x0000001F 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_0 @ 0XFCE8A568</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_0_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A568, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A568 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_1 @ 0XFCE8A56C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_1_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A56C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A56C 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_2 @ 0XFCE8A570</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_2_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A570, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A570 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_3 @ 0XFCE8A574</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_3_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A574, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A574 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_4 @ 0XFCE8A578</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_4_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A578, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A578 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_5 @ 0XFCE8A57C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_5_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A57C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A57C 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_6 @ 0XFCE8A580</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_6_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A580, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A580 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_7 @ 0XFCE8A584</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_7_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A584, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A584 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_8 @ 0XFCE8A588</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_8_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A588, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A588 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_9 @ 0XFCE8A58C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_9_ATTR                                0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A58C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A58C 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_10 @ 0XFCE8A590</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_10_ATTR                               0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A590, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A590 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_11 @ 0XFCE8A594</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_11_ATTR                               0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A594, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A594 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_12 @ 0XFCE8A598</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_12_ATTR                               0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A598, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A598 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_13 @ 0XFCE8A59C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_13_ATTR                               0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A59C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A59C 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_14 @ 0XFCE8A5A0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_14_ATTR                               0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5A0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A5A0 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_15 @ 0XFCE8A5A4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_15_ATTR                               0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5A4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A5A4 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_BIR_16 @ 0XFCE8A5A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_BIR_16_ATTR                               0x0

		# MSI-X Pending Bit Array BIR. This value is transferred to the MSI-X PBA BIR field. Set to 0 if MSI-X is not enabled. When AXI
		# TEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5A8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A5A8 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_0 @ 0XFCE8A5AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_0_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5AC, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5AC 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_1 @ 0XFCE8A5B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_1_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5B0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5B0 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_2 @ 0XFCE8A5B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_2_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5B4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5B4 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_3 @ 0XFCE8A5B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_3_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5B8, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5B8 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_4 @ 0XFCE8A5BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_4_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5BC, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5BC 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_5 @ 0XFCE8A5C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_5_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5C0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5C0 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_6 @ 0XFCE8A5C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_6_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5C4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5C4 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_7 @ 0XFCE8A5C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_7_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5C8, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5C8 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_8 @ 0XFCE8A5CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_8_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5CC, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5CC 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_9 @ 0XFCE8A5D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_9_ATTR                             0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5D0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5D0 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_10 @ 0XFCE8A5D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_10_ATTR                            0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5D4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5D4 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_11 @ 0XFCE8A5D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_11_ATTR                            0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5D8, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5D8 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_12 @ 0XFCE8A5DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_12_ATTR                            0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5DC, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5DC 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_13 @ 0XFCE8A5E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_13_ATTR                            0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5E0, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5E0 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_14 @ 0XFCE8A5E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_14_ATTR                            0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5E4, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5E4 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_15 @ 0XFCE8A5E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_15_ATTR                            0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5E8, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5E8 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_PBA_OFFSET_16 @ 0XFCE8A5EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_PBA_OFFSET_16_ATTR                            0x0

		# MSI-X Pending Bit Array Offset This value is transferred to the MSI-X PBA Offset field. Set to 0 if MSI-X is not enabled.When
		# AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5EC, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A5EC 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_0 @ 0XFCE8A5F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_0_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5F0, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A5F0 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_1 @ 0XFCE8A5F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_1_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5F4, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A5F4 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_2 @ 0XFCE8A5F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_2_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5F8, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A5F8 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_3 @ 0XFCE8A5FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_3_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A5FC, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A5FC 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_4 @ 0XFCE8A600</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_4_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A600, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A600 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_5 @ 0XFCE8A604</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_5_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A604, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A604 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_6 @ 0XFCE8A608</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_6_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A608, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A608 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_7 @ 0XFCE8A60C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_7_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A60C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A60C 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_8 @ 0XFCE8A610</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_8_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A610, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A610 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_9 @ 0XFCE8A614</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_9_ATTR                              0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A614, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A614 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_10 @ 0XFCE8A618</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_10_ATTR                             0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A618, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A618 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_11 @ 0XFCE8A61C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_11_ATTR                             0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A61C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A61C 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_12 @ 0XFCE8A620</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_12_ATTR                             0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A620, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A620 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_13 @ 0XFCE8A624</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_13_ATTR                             0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A624, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A624 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_14 @ 0XFCE8A628</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_14_ATTR                             0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A628, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A628 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_15 @ 0XFCE8A62C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_15_ATTR                             0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A62C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A62C 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_BIR_16 @ 0XFCE8A630</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_BIR_16_ATTR                             0x0

		# MSI-X Table BIR. This value is transferred to the MSI-X Table BIR field. Set to 0 if MSI-X is not enabled.When AXISTEN_IF_ENA
		# LE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A630, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A630 0x00000007 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_0 @ 0XFCE8A634</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_0_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A634, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A634 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_1 @ 0XFCE8A638</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_1_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A638, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A638 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_2 @ 0XFCE8A63C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_2_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A63C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A63C 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_3 @ 0XFCE8A640</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_3_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A640, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A640 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_4 @ 0XFCE8A644</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_4_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A644, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A644 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_5 @ 0XFCE8A648</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_5_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A648, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A648 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_6 @ 0XFCE8A64C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_6_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A64C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A64C 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_7 @ 0XFCE8A650</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_7_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A650, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A650 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_8 @ 0XFCE8A654</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_8_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A654, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A654 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_9 @ 0XFCE8A658</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_9_ATTR                           0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A658, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A658 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_10 @ 0XFCE8A65C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_10_ATTR                          0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A65C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A65C 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_11 @ 0XFCE8A660</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_11_ATTR                          0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A660, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A660 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_12 @ 0XFCE8A664</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_12_ATTR                          0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A664, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A664 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_13 @ 0XFCE8A668</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_13_ATTR                          0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A668, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A668 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_14 @ 0XFCE8A66C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_14_ATTR                          0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A66C, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A66C 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_15 @ 0XFCE8A670</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_15_ATTR                          0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A670, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A670 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_OFFSET_16 @ 0XFCE8A674</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_OFFSET_16_ATTR                          0x0

		# MSI-X Table Offset. This value is transferred to the MSI-X Table Offset field. Set to 0 if MSI-X is not enabled.When AXISTEN_
		# F_ENABLE_INTERNAL_MSIX_TABLE = TRUE, only PF0 value will be used.
		#(OFFSET, MASK, VALUE)      (0XFCE8A674, 0x1FFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A674 0x1FFFFFFF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_0 @ 0XFCE8A678</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_0_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A678, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A678 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_1 @ 0XFCE8A67C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_1_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A67C, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A67C 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_2 @ 0XFCE8A680</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_2_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A680, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A680 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_3 @ 0XFCE8A684</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_3_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A684, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A684 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_4 @ 0XFCE8A688</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_4_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A688, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A688 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_5 @ 0XFCE8A68C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_5_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A68C, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A68C 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_6 @ 0XFCE8A690</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_6_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A690, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A690 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_7 @ 0XFCE8A694</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_7_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A694, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A694 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_8 @ 0XFCE8A698</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_8_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A698, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A698 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_9 @ 0XFCE8A69C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_9_ATTR                             0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A69C, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A69C 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_10 @ 0XFCE8A6A0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_10_ATTR                            0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A6A0, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A6A0 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_11 @ 0XFCE8A6A4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_11_ATTR                            0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A6A4, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A6A4 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_12 @ 0XFCE8A6A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_12_ATTR                            0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A6A8, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A6A8 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_13 @ 0XFCE8A6AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_13_ATTR                            0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A6AC, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A6AC 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_14 @ 0XFCE8A6B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_14_ATTR                            0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A6B0, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A6B0 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_15 @ 0XFCE8A6B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_15_ATTR                            0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A6B4, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A6B4 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_CAP_TABLE_SIZE_16 @ 0XFCE8A6B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_CAP_TABLE_SIZE_16_ATTR                            0x0

		# MSI-X Table Size. This value is transferred to the MSI-X Message Control[10:0] field. Set to 0 if MSI-X is not enabled. Note 
		# hat the core does not implement the table; that must be implemented in user logic.
		#(OFFSET, MASK, VALUE)      (0XFCE8A6B8, 0x000007FFU ,0x00000000U)  */
    mask_write 0XFCE8A6B8 0x000007FF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_0 @ 0XFCE8A6BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_0_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6BC, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6BC 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_1 @ 0XFCE8A6C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_1_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6C0, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6C0 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_2 @ 0XFCE8A6C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_2_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6C4, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6C4 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_3 @ 0XFCE8A6C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_3_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6C8, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6C8 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_4 @ 0XFCE8A6CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_4_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6CC, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6CC 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_5 @ 0XFCE8A6D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_5_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6D0, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6D0 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_6 @ 0XFCE8A6D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_6_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6D4, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6D4 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_7 @ 0XFCE8A6D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_7_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6D8, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6D8 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_8 @ 0XFCE8A6DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_8_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6DC, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6DC 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_9 @ 0XFCE8A6E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_9_ATTR                               0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6E0, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6E0 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_10 @ 0XFCE8A6E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_10_ATTR                              0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6E4, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6E4 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_11 @ 0XFCE8A6E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_11_ATTR                              0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6E8, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6E8 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_12 @ 0XFCE8A6EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_12_ATTR                              0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6EC, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6EC 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_13 @ 0XFCE8A6F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_13_ATTR                              0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6F0, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6F0 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_14 @ 0XFCE8A6F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_14_ATTR                              0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6F4, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6F4 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_15 @ 0XFCE8A6F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_15_ATTR                              0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6F8, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6F8 0x0000FFFF 0x00000000
		# Register : ADV_SWTm_MSIX_VECTOR_COUNT_16 @ 0XFCE8A6FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWTM_MSIX_VECTOR_COUNT_16_ATTR                              0x0

		# Vector Count per Function : Fflexible Vectors per Function (per PF and VFG basis). 0001h - 4 0002h - 8 0004h - 12 0008h - 16 
		# 010h - 24 0020h - 32 0040h - 64 0080h - 128 0100h - 256 0200h - 512 0400h - Reserved 0800h - 1024 1000h - Reserved 2000h - Re
		# erved 4000h - Reserved 8000h - 2048 Other encodings are reserved
		#(OFFSET, MASK, VALUE)      (0XFCE8A6FC, 0x0000FFFFU ,0x00000000U)  */
    mask_write 0XFCE8A6FC 0x0000FFFF 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_0 @ 0XFCE8A700</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_0_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A700, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A700 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_1 @ 0XFCE8A704</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_1_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A704, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A704 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_2 @ 0XFCE8A708</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_2_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A708, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A708 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_3 @ 0XFCE8A70C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_3_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A70C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A70C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_4 @ 0XFCE8A710</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_4_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A710, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A710 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_5 @ 0XFCE8A714</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_5_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A714, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A714 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_6 @ 0XFCE8A718</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_6_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A718, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A718 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_7 @ 0XFCE8A71C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_7_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A71C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A71C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_8 @ 0XFCE8A720</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_8_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A720, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A720 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_9 @ 0XFCE8A724</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_9_ATTR                                0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A724, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A724 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_10 @ 0XFCE8A728</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_10_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A728, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A728 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_11 @ 0XFCE8A72C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_11_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A72C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A72C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_12 @ 0XFCE8A730</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_12_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A730, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A730 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_13 @ 0XFCE8A734</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_13_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A734, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A734 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_14 @ 0XFCE8A738</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_14_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A738, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A738 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_15 @ 0XFCE8A73C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_15_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A73C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A73C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_16 @ 0XFCE8A740</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_16_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A740, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A740 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_17 @ 0XFCE8A744</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_17_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A744, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A744 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_18 @ 0XFCE8A748</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_18_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A748, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A748 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_19 @ 0XFCE8A74C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_19_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A74C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A74C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_20 @ 0XFCE8A750</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_20_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A750, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A750 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_21 @ 0XFCE8A754</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_21_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A754, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A754 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_22 @ 0XFCE8A758</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_22_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A758, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A758 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_23 @ 0XFCE8A75C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_23_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A75C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A75C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_24 @ 0XFCE8A760</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_24_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A760, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A760 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_25 @ 0XFCE8A764</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_25_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A764, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A764 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_26 @ 0XFCE8A768</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_26_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A768, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A768 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_27 @ 0XFCE8A76C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_27_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A76C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A76C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_28 @ 0XFCE8A770</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_28_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A770, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A770 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_29 @ 0XFCE8A774</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_29_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A774, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A774 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_30 @ 0XFCE8A778</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_30_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A778, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A778 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_CONTROL_31 @ 0XFCE8A77C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_CONTROL_31_ATTR                               0x0

		# BAR0 DSP Control - Specifies the configuration of BAR 0. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable 110: Part of 64-bit memory BAR 0-1, no
		# -prefetchable 111: Part of 64-bit memory BAR 0-1, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A77C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A77C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_0 @ 0XFCE8A780</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_0_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A780, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A780 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_1 @ 0XFCE8A784</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_1_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A784, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A784 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_2 @ 0XFCE8A788</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_2_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A788, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A788 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_3 @ 0XFCE8A78C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_3_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A78C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A78C 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_4 @ 0XFCE8A790</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_4_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A790, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A790 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_5 @ 0XFCE8A794</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_5_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A794, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A794 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_6 @ 0XFCE8A798</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_6_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A798, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A798 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_7 @ 0XFCE8A79C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_7_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A79C, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A79C 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_8 @ 0XFCE8A7A0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_8_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7A0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7A0 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_9 @ 0XFCE8A7A4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_9_ATTR                          0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7A4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7A4 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_10 @ 0XFCE8A7A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_10_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7A8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7A8 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_11 @ 0XFCE8A7AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_11_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7AC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7AC 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_12 @ 0XFCE8A7B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_12_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7B0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7B0 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_13 @ 0XFCE8A7B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_13_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7B4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7B4 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_14 @ 0XFCE8A7B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_14_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7B8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7B8 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_15 @ 0XFCE8A7BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_15_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7BC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7BC 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_16 @ 0XFCE8A7C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_16_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7C0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7C0 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_17 @ 0XFCE8A7C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_17_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7C4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7C4 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_18 @ 0XFCE8A7C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_18_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7C8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7C8 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_19 @ 0XFCE8A7CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_19_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7CC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7CC 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_20 @ 0XFCE8A7D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_20_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7D0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7D0 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_21 @ 0XFCE8A7D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_21_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7D4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7D4 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_22 @ 0XFCE8A7D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_22_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7D8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7D8 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_23 @ 0XFCE8A7DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_23_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7DC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7DC 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_24 @ 0XFCE8A7E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_24_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7E0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7E0 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_25 @ 0XFCE8A7E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_25_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7E4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7E4 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_26 @ 0XFCE8A7E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_26_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7E8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7E8 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_27 @ 0XFCE8A7EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_27_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7EC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7EC 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_28 @ 0XFCE8A7F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_28_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7F0, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7F0 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_29 @ 0XFCE8A7F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_29_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7F4, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7F4 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_30 @ 0XFCE8A7F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_30_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7F8, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7F8 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR0_APERTURE_SIZE_31 @ 0XFCE8A7FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR0_APERTURE_SIZE_31_ATTR                         0x0

		# BAR0 DSP Aperture: Specifies the aperture of BAR 0. [The 32-bit BAR 0 or 64-bit BAR 0-1.] For Endpoint Mode the encodings are
		#  000000 = 128bytes 000001 = 256bytes 000010 = 512bytes 000011 = 1 Kbytes 000100 = 2 Kbytes 000101 = 4 Kbytes 000110 = 8 Kbyte
		#  000111 = 16 Kbytes 001000 = 32 Kbytes 001001 = 64 Kbytes 001010 = 128 Kbytes 001011 = 256 Kbytes 001100 = 512 Kbytes 001101 
		#  1 Mbytes 001110 = 2 Mbytes 001111 = 4 Mbytes 010000 = 8 Mbytes 010001 = 16 Mbytes 010010 = 32 Mbytes 010011 = 64 Mbytes 0101
		# 0 = 128 Mbytes 010101 = 256 Mbytes 010110 = 512 Mbytes 010111 = 1 Gbytes 011000 = 2 Gbytes 011001 = 4 Gbytes 011010 = 8 Gbyte
		#  011011 = 16 Gbytes 011100 = 32 Gbytes 011101 = 64 Gbytes 011110 = 128 Gbytes 011111 = 256 Gbytes 100000 = 512 Gbytes 100001=
		# 1 Tbytes 100010= 2 Tbytes 100011 = 4 Tbytes 100100 = 8 Tbytes 100101 = 16 Tbytes 100110 = 32 Tbytes 100111 = 64 Tbytes 101000
		# = 128 Tbytes 101001 = 256 Tbytes 101010 = 512 Tbytes 101011 = 1 Pbytes 101100 = 2 Pbytes 101101 = 4 Pbytes 101110 = 8 Pbytes 
		# 01111 = 16 Pbytes 110000 = 32 Pbytes 110001 = 64 Pbytes 110010 = 128 Pbytes 110011 = 256 Pbytes 110100 = 512 Pbytes 110101 = 
		#  Ebytes 110110 = 2 Ebytes 110111 = 4 Ebytes 111000 = 8 Ebytes For Root Port Mode (PF0 only), the encodings are: 000000 = 4 by
		# es 000001 = 8 bytes 000010 = 16 bytes 000011 = 32 bytes 000100 = 84 bytes 000101 = 128 bytes 000110 = 256 bytes 000111 = 512 
		# ytes 001000 = 1 Kbytes 001001 = 2 Kbytes 001010 = 4 Kbytes 001011 = 8 Kbytes 001100 = 16 Kbytes 001101 = 32 Kbytes 001110 = 6
		#  Kbytes 001111 = 128 Kbytes 010000 = 256 Kbytes 010001 = 512 Kbytes 010010 = 1 Mbytes 010011 = 2 Mbytes 010100 = 4 Mbytes 010
		# 01 = 8 Mbytes 010110 = 16 Mbytes 010111 = 32 Mbytes 011000 = 64 Mbytes 011001 = 128 Mbytes 011010 = 256 Mbytes 011011 = 512 M
		# ytes 011100 = 1 Gbytes 011101 = 2 Gbytes 011110 = 4 Gbytes 011111 = 8 Gbytes 100000 = 16 Gbytes 100001 = 32 Gbytes 100010 = 6
		#  Gbytes 100011 = 128 Gbytes 100100 = 256 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A7FC, 0x0000003FU ,0x00000000U)  */
    mask_write 0XFCE8A7FC 0x0000003F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_0 @ 0XFCE8A800</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_0_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A800, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A800 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_1 @ 0XFCE8A804</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_1_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A804, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A804 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_2 @ 0XFCE8A808</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_2_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A808, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A808 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_3 @ 0XFCE8A80C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_3_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A80C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A80C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_4 @ 0XFCE8A810</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_4_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A810, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A810 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_5 @ 0XFCE8A814</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_5_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A814, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A814 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_6 @ 0XFCE8A818</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_6_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A818, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A818 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_7 @ 0XFCE8A81C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_7_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A81C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A81C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_8 @ 0XFCE8A820</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_8_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A820, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A820 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_9 @ 0XFCE8A824</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_9_ATTR                                0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A824, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A824 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_10 @ 0XFCE8A828</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_10_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A828, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A828 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_11 @ 0XFCE8A82C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_11_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A82C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A82C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_12 @ 0XFCE8A830</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_12_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A830, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A830 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_13 @ 0XFCE8A834</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_13_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A834, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A834 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_14 @ 0XFCE8A838</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_14_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A838, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A838 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_15 @ 0XFCE8A83C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_15_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A83C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A83C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_16 @ 0XFCE8A840</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_16_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A840, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A840 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_17 @ 0XFCE8A844</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_17_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A844, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A844 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_18 @ 0XFCE8A848</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_18_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A848, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A848 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_19 @ 0XFCE8A84C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_19_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A84C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A84C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_20 @ 0XFCE8A850</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_20_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A850, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A850 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_21 @ 0XFCE8A854</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_21_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A854, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A854 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_22 @ 0XFCE8A858</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_22_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A858, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A858 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_23 @ 0XFCE8A85C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_23_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A85C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A85C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_24 @ 0XFCE8A860</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_24_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A860, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A860 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_25 @ 0XFCE8A864</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_25_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A864, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A864 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_26 @ 0XFCE8A868</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_26_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A868, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A868 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_27 @ 0XFCE8A86C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_27_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A86C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A86C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_28 @ 0XFCE8A870</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_28_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A870, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A870 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_29 @ 0XFCE8A874</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_29_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A874, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A874 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_30 @ 0XFCE8A878</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_30_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A878, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A878 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_CONTROL_31 @ 0XFCE8A87C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_CONTROL_31_ATTR                               0x0

		# BAR1 DSP Control - Specifies the configuration of BAR 1. The various encodings are: 000: Disabled 001: 32-bit IO BAR 010-011:
		# Reserved 100: 32-bit memory BAR, non-prefetchable 101: 32-bit memory BAR, prefetchable
		#(OFFSET, MASK, VALUE)      (0XFCE8A87C, 0x00000007U ,0x00000000U)  */
    mask_write 0XFCE8A87C 0x00000007 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_0 @ 0XFCE8A880</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_0_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A880, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A880 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_1 @ 0XFCE8A884</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_1_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A884, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A884 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_2 @ 0XFCE8A888</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_2_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A888, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A888 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_3 @ 0XFCE8A88C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_3_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A88C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A88C 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_4 @ 0XFCE8A890</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_4_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A890, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A890 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_5 @ 0XFCE8A894</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_5_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A894, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A894 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_6 @ 0XFCE8A898</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_6_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A898, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A898 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_7 @ 0XFCE8A89C</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_7_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A89C, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A89C 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_8 @ 0XFCE8A8A0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_8_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8A0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8A0 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_9 @ 0XFCE8A8A4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_9_ATTR                          0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8A4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8A4 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_10 @ 0XFCE8A8A8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_10_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8A8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8A8 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_11 @ 0XFCE8A8AC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_11_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8AC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8AC 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_12 @ 0XFCE8A8B0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_12_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8B0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8B0 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_13 @ 0XFCE8A8B4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_13_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8B4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8B4 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_14 @ 0XFCE8A8B8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_14_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8B8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8B8 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_15 @ 0XFCE8A8BC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_15_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8BC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8BC 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_16 @ 0XFCE8A8C0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_16_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8C0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8C0 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_17 @ 0XFCE8A8C4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_17_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8C4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8C4 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_18 @ 0XFCE8A8C8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_18_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8C8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8C8 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_19 @ 0XFCE8A8CC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_19_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8CC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8CC 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_20 @ 0XFCE8A8D0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_20_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8D0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8D0 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_21 @ 0XFCE8A8D4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_21_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8D4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8D4 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_22 @ 0XFCE8A8D8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_22_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8D8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8D8 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_23 @ 0XFCE8A8DC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_23_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8DC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8DC 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_24 @ 0XFCE8A8E0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_24_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8E0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8E0 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_25 @ 0XFCE8A8E4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_25_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8E4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8E4 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_26 @ 0XFCE8A8E8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_26_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8E8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8E8 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_27 @ 0XFCE8A8EC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_27_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8EC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8EC 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_28 @ 0XFCE8A8F0</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_28_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8F0, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8F0 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_29 @ 0XFCE8A8F4</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_29_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8F4, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8F4 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_30 @ 0XFCE8A8F8</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_30_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8F8, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8F8 0x0000001F 0x00000000
		# Register : ADV_SWT_DSPn_BAR1_APERTURE_SIZE_31 @ 0XFCE8A8FC</p>

		# 
		# CPM5_PCIE1_ATTR_ADV_SWT_DSPN_BAR1_APERTURE_SIZE_31_ATTR                         0x0

		# BAR1 DSP Aperture: Specifies the aperture of BAR 1. For Endpoint Mode the valid encodings are: 00000 = 128bytes 00001 = 256by
		# es 00010 = 512bytes 00011 = 1 Kbytes 00100 = 2 Kbytes 00101 = 4 Kbytes 00110 = 8 Kbytes 00111 = 16 Kbytes 01000 = 32 Kbytes 0
		# 001 = 64 Kbytes 01010 = 128 Kbytes 01011 = 256 Kbytes 01100 = 512 Kbytes 01101 = 1 Mbytes 01110 = 2 Mbytes 01111 = 4 Mbytes 1
		# 000 = 8 Mbytes 10001 = 16 Mbytes 10010 = 32 Mbytes 10011 = 64 Mbytes 10100 = 128 Mbytes 10101 = 256 Mbytes 10110 = 512 Mbytes
		# 10111 = 1 Gbytes 11000 = 2 Gbytes For Root Port Mode (PF0 only), the valid encodings are: 00000 = 4 bytes 00001 = 8 bytes 000
		# 0 = 16 bytes 00011 = 32 bytes 00100 = 84 bytes 00101 = 128 bytes 00110 = 256 bytes 00111 = 512 bytes 01000 = 1 Kbytes 01001 =
		# 2 Kbytes 01010 = 4 Kbytes 01011 = 8 Kbytes 01100 = 16 Kbytes 01101 = 32 Kbytes 01110 = 64 Kbytes 01111 = 128 Kbytes 10000 = 2
		# 6 Kbytes 10001 = 512 Kbytes 10010 = 1 Mbytes 10011 = 2 Mbytes 10100 = 4 Mbytes 10101 = 8 Mbytes 10110 = 16 Mbytes 10111 = 32 
		# bytes 11000 = 64 Mbytes 11001 = 128 Mbytes 11010 = 256 Mbytes 11011 = 512 Mbytes 11100 = 1 Gbytes 11101 = 2 Gbytes
		#(OFFSET, MASK, VALUE)      (0XFCE8A8FC, 0x0000001FU ,0x00000000U)  */
    mask_write 0XFCE8A8FC 0x0000001F 0x00000000
		# Register : DESIGN_USE_MODE @ 0XFCE8A900</p>

		# 
		# CPM5_PCIE1_ATTR_DESIGN_USE_MODE_ATTR                                            1

		# Design Use Mode Input : Valid encodings are : 1) 0000000b : Block Disabled. 2) 0000001b : AXI4-ST Interfaces Enabled (PCIE St
		# eam Mode) and 3) 0000100b : DMA Interfaces Enabled (DMA Mode). All other encodings are Reserved.
		#(OFFSET, MASK, VALUE)      (0XFCE8A900, 0x0000007FU ,0x00000001U)  */
    mask_write 0XFCE8A900 0x0000007F 0x00000001
		# Register : TEST_MODE_PIN_CHAR @ 0XFCE8A904</p>

		# 
		# CPM5_PCIE1_ATTR_TEST_MODE_PIN_CHAR_ATTR                                         0x0

		# Pin Characterization Test mode. When TRUE enable Input to Output paths for pin characterization. Note: pipe_txn/rxn_data[15:0
		#  (only) are testable with the following configuration required: CRM_CORE_CLK_FREQ_500 = "FALSE", pipe_clk = 125MHz, core_clk 
		#  250MHz.
		#(OFFSET, MASK, VALUE)      (0XFCE8A904, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A904 0x00000001 0x00000000
		# Register : SPARE_BIT0 @ 0XFCE8A908</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT0_ATTR                                                 0x0

		# TRUE : Disables wide link down reset pulse (see pcie5_psb attr_disable_wide_link_down_reset), FALSE : Wide link down reset en
		# bled
		#(OFFSET, MASK, VALUE)      (0XFCE8A908, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A908 0x00000001 0x00000000
		# Register : SPARE_BIT1 @ 0XFCE8A90C</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT1_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A90C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A90C 0x00000001 0x00000000
		# Register : SPARE_BIT2 @ 0XFCE8A910</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT2_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A910, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A910 0x00000001 0x00000000
		# Register : SPARE_BIT3 @ 0XFCE8A914</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT3_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A914, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A914 0x00000001 0x00000000
		# Register : SPARE_BIT4 @ 0XFCE8A918</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT4_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A918, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A918 0x00000001 0x00000000
		# Register : SPARE_BIT5 @ 0XFCE8A91C</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT5_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A91C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A91C 0x00000001 0x00000000
		# Register : SPARE_BIT6 @ 0XFCE8A920</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT6_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A920, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A920 0x00000001 0x00000000
		# Register : SPARE_BIT7 @ 0XFCE8A924</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT7_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A924, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A924 0x00000001 0x00000000
		# Register : SPARE_BIT8 @ 0XFCE8A928</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BIT8_ATTR                                                 0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A928, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCE8A928 0x00000001 0x00000000
		# Register : SPARE_BYTE0 @ 0XFCE8A92C</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BYTE0_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A92C, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8A92C 0x000000FF 0x00000000
		# Register : SPARE_BYTE1 @ 0XFCE8A930</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BYTE1_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A930, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8A930 0x000000FF 0x00000000
		# Register : SPARE_BYTE2 @ 0XFCE8A934</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BYTE2_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A934, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8A934 0x000000FF 0x00000000
		# Register : SPARE_BYTE3 @ 0XFCE8A938</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_BYTE3_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A938, 0x000000FFU ,0x00000000U)  */
    mask_write 0XFCE8A938 0x000000FF 0x00000000
		# Register : SPARE_WORD0 @ 0XFCE8A93C</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_WORD0_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A93C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A93C 0xFFFFFFFF 0x00000000
		# Register : SPARE_WORD1 @ 0XFCE8A940</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_WORD1_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A940, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A940 0xFFFFFFFF 0x00000000
		# Register : SPARE_WORD2 @ 0XFCE8A944</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_WORD2_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A944, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A944 0xFFFFFFFF 0x00000000
		# Register : SPARE_WORD3 @ 0XFCE8A948</p>

		# 
		# CPM5_PCIE1_ATTR_SPARE_WORD3_ATTR                                                0x0

		# Spare attribute
		#(OFFSET, MASK, VALUE)      (0XFCE8A948, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCE8A948 0xFFFFFFFF 0x00000000
		# : PCIEDMA0
		# : ENABLE WRITE ORDERING FOR ACE LITE SLAVE
		# Register : LPD_CCI_CFG_1 @ 0XFF41A004</p>

		# 1-bit per slave interface [S5,S4,S3,S2,S1,S0]. Controls whether an ACE-Lite slave interface supports the Ordered Write Observ
		# tion property. ACE interfaces do not support the Ordered Write Observation property(ignored for ACE slave interfaces) 0 : Int
		# rface does not support Ordered Write Observation. 1 : Interface supports Ordered Write Observation.
		# LPD_SLCR_LPD_CCI_CFG_1_ORDERED_WR_OBSERVE                                       0X3F

		# Ordering and dependency settings
		#(OFFSET, MASK, VALUE)      (0XFF41A004, 0x0000003FU ,0x0000003FU)  */
    mask_write 0XFF41A004 0x0000003F 0x0000003F
}

set cpm_peripherals_init_data {
		# : RESET
		# Register : L2_CTRL @ 0XFCDD0208</p>

		# Enable for core clk in L2 instance 0 0 - Disabled 1 - Enabled
		# CPM5_SLCR_L2_CTRL_CLK_EN_0                                                      0

		# Enable for core clk in L2 instance 1 0 - Disabled 1 - Enabled
		# CPM5_SLCR_L2_CTRL_CLK_EN_1                                                      0

		# L2 Misc Control Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0208, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCDD0208 0x00000003 0x00000000
		# Register : RST_DBG @ 0XFCDC0300</p>

		# block will be reset when asserted 1 (This register is only reset during a POR)
		# CPM5_CRX_RST_DBG_RESET                                                          0

		# Reset for SOC Debug Logic (POR only register)
		#(OFFSET, MASK, VALUE)      (0XFCDC0300, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC0300 0x00000001 0x00000000
		# : INTERRUPT HANDLING
		# : RELEASE RESET ON L2 AND PROGRAM L2 BYPASS
		# Register : L2_BYPASS @ 0XFCDD0210</p>

		# L2 Bypass Enable for Cache 0: 0 - No Bypass 1 - Bypass
		# CPM5_SLCR_L2_BYPASS_EN_0                                                        0

		# L2 Bypass Enable for Cache 1: 0 - No Bypass 1 - Bypass
		# CPM5_SLCR_L2_BYPASS_EN_1                                                        0

		# L2 Cache Bypass Register
		#(OFFSET, MASK, VALUE)      (0XFCDD0210, 0x00000003U ,0x00000000U)  */
    mask_write 0XFCDD0210 0x00000003 0x00000000
		# : RELEASE INTERNAL PCIE RESET AND DMA
		# : 
		# Register : RST_PCIE1 @ 0XFCDC031C</p>

		# block will be reset when asserted 1
		# CPM5_CRX_RST_PCIE1_RESET                                                        0X0

		# Reset for PCIe core1
		#(OFFSET, MASK, VALUE)      (0XFCDC031C, 0x00000001U ,0x00000000U)  */
    mask_write 0XFCDC031C 0x00000001 0x00000000
		# : UNLOCK CODE
		# Register : LOCK @ 0XFCFF000C</p>

		# Lock/Unlock Code
		# CPM_PCSR_LOCK_LOCK                                                              0XF9E8D7C6

		# Lock register for the MASK and PCR Registers
		#(OFFSET, MASK, VALUE)      (0XFCFF000C, 0xFFFFFFFFU ,0xF9E8D7C6U)  */
    mask_write 0XFCFF000C 0xFFFFFFFF 0xF9E8D7C6
		# : POLL PCSR LOCK DEASSERTED
		# Register : PSR @ 0XFCFF0008</p>

		# Indicates that PCSR space is locked for write transactions when asserted
		# CPM_PCSR_PSR_PCSRLOCK                                                           1
    mask_poll 0XFCFF0008 0x00000001 0x00000000
		# : MASK CPM FABRICEN MASK ASSERTED
		# Register : MASK @ 0XFCFF0000</p>
		# : PCSR FABRICEN ASSERTED
		# Register : PCR @ 0XFCFF0004</p>
		# : LOCK CODE
		# Register : LOCK @ 0XFCFF000C</p>

		# Lock/Unlock Code
		# CPM_PCSR_LOCK_LOCK                                                              0X0

		# Lock register for the MASK and PCR Registers
		#(OFFSET, MASK, VALUE)      (0XFCFF000C, 0xFFFFFFFFU ,0x00000000U)  */
    mask_write 0XFCFF000C 0xFFFFFFFF 0x00000000
		# : PCSR LOCK ASSERTED
		# Register : PSR @ 0XFCFF0008</p>

		# Indicates that PCSR space is locked for write transactions when asserted
		# CPM_PCSR_PSR_PCSRLOCK                                                           1
    mask_poll 0XFCFF0008 0x00000001 0x00000001
		# : PCIE RESET
}

